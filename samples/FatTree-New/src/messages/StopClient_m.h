//
// Generated file, do not edit! Created by nedtool 4.6 from messages/StopClient.msg.
//

#ifndef _STOPCLIENT_M_H_
#define _STOPCLIENT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "GenericAppMsg_m.h"
// }}

/**
 * Class generated from <tt>messages/StopClient.msg:13</tt> by nedtool.
 * <pre>
 * //
 * // Message which is used to stop a client.
 * //
 * packet StopClient extends GenericAppMsg
 * {
 *     int delay;
 *     bool clientIsOff;
 *     int connIDSysCon;
 *     string clientAddr;
 *     int serviceport;
 * }
 * </pre>
 */
class StopClient : public ::GenericAppMsg
{
  protected:
    int delay_var;
    bool clientIsOff_var;
    int connIDSysCon_var;
    opp_string clientAddr_var;
    int serviceport_var;

  private:
    void copy(const StopClient& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StopClient&);

  public:
    StopClient(const char *name=NULL, int kind=0);
    StopClient(const StopClient& other);
    virtual ~StopClient();
    StopClient& operator=(const StopClient& other);
    virtual StopClient *dup() const {return new StopClient(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDelay() const;
    virtual void setDelay(int delay);
    virtual bool getClientIsOff() const;
    virtual void setClientIsOff(bool clientIsOff);
    virtual int getConnIDSysCon() const;
    virtual void setConnIDSysCon(int connIDSysCon);
    virtual const char * getClientAddr() const;
    virtual void setClientAddr(const char * clientAddr);
    virtual int getServiceport() const;
    virtual void setServiceport(int serviceport);
};

inline void doPacking(cCommBuffer *b, StopClient& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StopClient& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STOPCLIENT_M_H_

