//
// Generated file, do not edit! Created by nedtool 4.6 from messages/VMMigMsg.msg.
//

#ifndef _VMMIGMSG_M_H_
#define _VMMIGMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "GenericAppMsg_m.h"
// }}

/**
 * Enum generated from <tt>messages/VMMigMsg.msg:14</tt> by nedtool.
 * <pre>
 * enum StateNames
 * {
 * 
 *     INIT_MIG = 0;
 *     ENABLEHV2 = 1;
 *     HV2ENABLED = 2;
 *     STARTVMMIG = 3;
 *     COPYINGDATA = 4;
 *     COPYSTART = 5;
 *     DATARECEIVED = 6;
 *     COPYSUCCESS = 7;
 *     TURNOFFVM1 = 8;
 *     VM1TURNEDOFF = 9;
 *     STARTVM2 = 10;
 *     VM2TURNEDON = 11;
 *     STARTSUCCESS = 12;
 *     TURNOFFHV1 = 13;
 *     HV1TURNEDOFF = 14;
 * }
 * </pre>
 */
enum StateNames {
    INIT_MIG = 0,
    ENABLEHV2 = 1,
    HV2ENABLED = 2,
    STARTVMMIG = 3,
    COPYINGDATA = 4,
    COPYSTART = 5,
    DATARECEIVED = 6,
    COPYSUCCESS = 7,
    TURNOFFVM1 = 8,
    VM1TURNEDOFF = 9,
    STARTVM2 = 10,
    VM2TURNEDON = 11,
    STARTSUCCESS = 12,
    TURNOFFHV1 = 13,
    HV1TURNEDOFF = 14
};

/**
 * Class generated from <tt>messages/VMMigMsg.msg:32</tt> by nedtool.
 * <pre>
 * packet VMMigMsg extends GenericAppMsg
 * {
 *     int msgtype @enum(StateNames);
 *     string hv1address;
 *     string hv2address;
 *     string vm1address;
 *     string vm2address;
 *     string conaddress;
 * 
 *     bool turnOffHV1;
 * 
 *     bool turnOnHV2;
 * 
 *     int connIdfromHV1ToCon;
 *     int connIdToMigS;
 *     int connIdfromHV2ToHV1;
 *     int serviceport;
 * }
 * </pre>
 */
class VMMigMsg : public ::GenericAppMsg
{
  protected:
    int msgtype_var;
    opp_string hv1address_var;
    opp_string hv2address_var;
    opp_string vm1address_var;
    opp_string vm2address_var;
    opp_string conaddress_var;
    bool turnOffHV1_var;
    bool turnOnHV2_var;
    int connIdfromHV1ToCon_var;
    int connIdToMigS_var;
    int connIdfromHV2ToHV1_var;
    int serviceport_var;

  private:
    void copy(const VMMigMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VMMigMsg&);

  public:
    VMMigMsg(const char *name=NULL, int kind=0);
    VMMigMsg(const VMMigMsg& other);
    virtual ~VMMigMsg();
    VMMigMsg& operator=(const VMMigMsg& other);
    virtual VMMigMsg *dup() const {return new VMMigMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMsgtype() const;
    virtual void setMsgtype(int msgtype);
    virtual const char * getHv1address() const;
    virtual void setHv1address(const char * hv1address);
    virtual const char * getHv2address() const;
    virtual void setHv2address(const char * hv2address);
    virtual const char * getVm1address() const;
    virtual void setVm1address(const char * vm1address);
    virtual const char * getVm2address() const;
    virtual void setVm2address(const char * vm2address);
    virtual const char * getConaddress() const;
    virtual void setConaddress(const char * conaddress);
    virtual bool getTurnOffHV1() const;
    virtual void setTurnOffHV1(bool turnOffHV1);
    virtual bool getTurnOnHV2() const;
    virtual void setTurnOnHV2(bool turnOnHV2);
    virtual int getConnIdfromHV1ToCon() const;
    virtual void setConnIdfromHV1ToCon(int connIdfromHV1ToCon);
    virtual int getConnIdToMigS() const;
    virtual void setConnIdToMigS(int connIdToMigS);
    virtual int getConnIdfromHV2ToHV1() const;
    virtual void setConnIdfromHV2ToHV1(int connIdfromHV2ToHV1);
    virtual int getServiceport() const;
    virtual void setServiceport(int serviceport);
};

inline void doPacking(cCommBuffer *b, VMMigMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VMMigMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VMMIGMSG_M_H_

