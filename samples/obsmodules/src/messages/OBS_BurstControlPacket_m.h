//
// Generated file, do not edit! Created by nedtool 5.0 from src/messages/OBS_BurstControlPacket.msg.
//

#ifndef __OBS_BURSTCONTROLPACKET_M_H
#define __OBS_BURSTCONTROLPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/messages/OBS_BurstControlPacket.msg:29</tt> by nedtool.
 * <pre>
 * //Also known as BCP. Control Message for OBS transmissions.
 * //
 * //The kind field identifies the class of this message:
 * //
 * // - <b>kind 1</b>: Optical BCP beginning
 * // - <b>kind 2</b>: Optical BCP end
 * // - <b>kind 3</b>: Electrical BCP (used on OBS_CoreControlUnit)
 * packet OBS_BurstControlPacket
 * {
 *     simtime_t burstArrivalDelta = -1; //Difference between current time and estimated burst arrival time
 *     int burstColour = -1; //Burst's colour
 *     int label = -1; //Destination label
 * 
 *     int burstifierId = -1; //Burstifier id
 *     int numSeq = -1; //Sequence number into packet burstifier
 * 
 *     int senderId = -1; //Burst sender identifier. Not used as a Id
 * 
 *     int burstSize = -1; // Associated burst size
 * }
 * </pre>
 */
class OBS_BurstControlPacket : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::simtime_t burstArrivalDelta;
    int burstColour;
    int label;
    int burstifierId;
    int numSeq;
    int senderId;
    int burstSize;

  private:
    void copy(const OBS_BurstControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OBS_BurstControlPacket&);

  public:
    OBS_BurstControlPacket(const char *name=nullptr, int kind=0);
    OBS_BurstControlPacket(const OBS_BurstControlPacket& other);
    virtual ~OBS_BurstControlPacket();
    OBS_BurstControlPacket& operator=(const OBS_BurstControlPacket& other);
    virtual OBS_BurstControlPacket *dup() const {return new OBS_BurstControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getBurstArrivalDelta() const;
    virtual void setBurstArrivalDelta(::omnetpp::simtime_t burstArrivalDelta);
    virtual int getBurstColour() const;
    virtual void setBurstColour(int burstColour);
    virtual int getLabel() const;
    virtual void setLabel(int label);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getBurstSize() const;
    virtual void setBurstSize(int burstSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OBS_BurstControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OBS_BurstControlPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __OBS_BURSTCONTROLPACKET_M_H

