//
// Generated file, do not edit! Created by nedtool 5.0 from src/EdgeNode/OBS_ScheduledBurstItem.msg.
//

#ifndef __OBS_SCHEDULEDBURSTITEM_M_H
#define __OBS_SCHEDULEDBURSTITEM_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/EdgeNode/OBS_ScheduledBurstItem.msg:23</tt> by nedtool.
 * <pre>
 * // Burst container for BurstList.
 * packet OBS_ScheduledBurstItem
 * {
 *     int listIndex = -1; //Index field used by BurstList. opp_neddoc complains if named 'index'.
 *     int burstId = -1; //Burst Id.
 *     simtime_t sendTime = -1; //Time scheduled to send the burst.
 *     simtime_t minOffset = -1; //Minimum offset.
 *     simtime_t maxOffset = -1; //Maximum offset.
 * }
 * </pre>
 */
class OBS_ScheduledBurstItem : public ::omnetpp::cPacket
{
  protected:
    int listIndex;
    int burstId;
    ::omnetpp::simtime_t sendTime;
    ::omnetpp::simtime_t minOffset;
    ::omnetpp::simtime_t maxOffset;

  private:
    void copy(const OBS_ScheduledBurstItem& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OBS_ScheduledBurstItem&);

  public:
    OBS_ScheduledBurstItem(const char *name=nullptr, int kind=0);
    OBS_ScheduledBurstItem(const OBS_ScheduledBurstItem& other);
    virtual ~OBS_ScheduledBurstItem();
    OBS_ScheduledBurstItem& operator=(const OBS_ScheduledBurstItem& other);
    virtual OBS_ScheduledBurstItem *dup() const {return new OBS_ScheduledBurstItem(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getListIndex() const;
    virtual void setListIndex(int listIndex);
    virtual int getBurstId() const;
    virtual void setBurstId(int burstId);
    virtual ::omnetpp::simtime_t getSendTime() const;
    virtual void setSendTime(::omnetpp::simtime_t sendTime);
    virtual ::omnetpp::simtime_t getMinOffset() const;
    virtual void setMinOffset(::omnetpp::simtime_t minOffset);
    virtual ::omnetpp::simtime_t getMaxOffset() const;
    virtual void setMaxOffset(::omnetpp::simtime_t maxOffset);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OBS_ScheduledBurstItem& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OBS_ScheduledBurstItem& obj) {obj.parsimUnpack(b);}


#endif // ifndef __OBS_SCHEDULEDBURSTITEM_M_H

