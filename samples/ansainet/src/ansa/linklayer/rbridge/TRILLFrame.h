// Copyright (C) 2013 Brno University of Technology (http://nes.fit.vutbr.cz/ansa)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
//

/**
 * @file TRILLFrame.h
 * @author Marcel Marek (mailto:imarek@fit.vutbr.cz), Vladimir Vesely (mailto:ivesely@fit.vutbr.cz)
 * @date 16.3.2012
 * @brief Header file for class representing TRILL header.
 * @detail Header file for class representing TRILL header.
 * @todo Z9
 */
#ifndef TRILLFRAME_H_
#define TRILLFRAME_H_


#include <omnetpp.h>
#include "TRILLFrame_m.h"

namespace inet {

// opp_msgc version check
//#define MSGC_VERSION 0x0402
//#if (MSGC_VERSION!=OMNETPP_VERSION)
//#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
//#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif



/**
 * Class generated from <tt>ansa/linklayer/rbridge/TRILLFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet TRILLFrame {
 *
 *
 *     uint16_t Ethertype;
 *     unsigned short version;
 *     unsigned short reserved;
 *     bool multiDest;
 *     uint8_t opLength;
 *     uint8_t hopCount;
 *     uint16_t egressRBNickname;
 *     uint16_t ingressRBNickname;
 *     uint32_t options[];
 *
 * }
 * </pre>
 */

class INET_API TRILLFrame : public TRILLFrame_Base
{
  protected:
//    uint16_t Ethertype_var;
//    unsigned short version_var;
//    unsigned short reserved_var;
//    bool multiDest_var;
//    uint8_t opLength_var;
//    uint8_t hopCount_var;
//    uint16_t egressRBNickname_var;
//    uint16_t ingressRBNickname_var;
//    uint32_t *options_var; // array ptr
//    unsigned int options_arraysize;

//  private:
//    void copy(const TRILLFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TRILLFrame&);

  public:
    TRILLFrame(const char *name=NULL, int kind=0);
    TRILLFrame(const TRILLFrame& other);
    virtual ~TRILLFrame();
//    TRILLFrame& operator=(const TRILLFrame& other);
    virtual TRILLFrame *dup() const {return new TRILLFrame(*this);}
//    virtual void parsimPack(cCommBuffer *b);
//    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
//    virtual uint16_t getEthertype() const;
//    virtual void setEthertype(uint16_t Ethertype);
//    virtual unsigned short getVersion() const;
//    virtual void setVersion(unsigned short version);
//    virtual unsigned short getReserved() const;
//    virtual void setReserved(unsigned short reserved);
//    virtual bool getMultiDest() const;
//    virtual void setMultiDest(bool multiDest);
//    virtual uint8_t getOpLength() const;
//    virtual void setOpLength(uint8_t opLength);
//    virtual uint8_t getHopCount() const;
//    virtual void setHopCount(uint8_t hopCount);
//    virtual TRILLNickname getEgressRBNickname() const;
//    virtual void setEgressRBNickname(TRILLNickname egressRBNickname);
//    virtual TRILLNickname getIngressRBNickname() const;
//    virtual void setIngressRBNickname(TRILLNickname ingressRBNickname);
//    virtual void setOptionsArraySize(unsigned int size);
//    virtual unsigned int getOptionsArraySize() const;
//    virtual uint32_t getOptions(unsigned int k) const;
//    virtual void setOptions(unsigned int k, uint32_t options);
    virtual void decHopCount(int amount = 1); //decrement hop count
};

//inline void doPacking(cCommBuffer *b, TRILLFrame& obj) {obj.parsimPack(b);}
//inline void doUnpacking(cCommBuffer *b, TRILLFrame& obj) {obj.parsimUnpack(b);}


}
#endif /* TRILLFRAME_H_ */
