[General]
network = FatTree
sim-time-limit = 1560min
cmdenv-express-mode = true
warmup-period = 120min
#repeat = 2
seed-set = 2

[Config load2]

#k value of fat tree ${k=2..16 step 2} 
FatTree.k = ${k=4}

# number of virtual machines
FatTree.vmnum = 4

# Traffic generator configuration.
**.HTTPTraffic.numTcpApps = 1
**.HTTPTraffic.tcpAppType = "TGAppWithIAT"
**.HTTPTraffic.tcpApp[*].serverThreadClass = "TrafficGenerationThread"

**.FTPTraffic.numTcpApps = 1
**.FTPTraffic.tcpAppType = "TGAppWithIAT"
**.FTPTraffic.tcpApp[*].serverThreadClass = "TrafficGenerationThread"

# time between load change
**.controller.**.tcpApp[*].loadAdaptionInterval = 120min
**.controller.**.tcpApp[*].warmUpInterval = 0s

# activate day night cycle
**.loadAdaptation = true
# activate energy optimization 
**.updateNumVMs = false
# activate vm migration
**.migrateVMs = false

# We set the ratio of web to ftp service requests to 4 : 1
# HTTPService
 # max number, actual number set by SysCon; number should be dividable by ten
**.HTTPTraffic.tcpApp[*].port = ${httpport = 80}
**.HTTPTraffic.tcpApp[*].connectAddress = "30.0.0.1"
# between requests now IAT
#**.HTTPTraffic.tcpApp[*].thinkTime = exponential(11ms) #s, ms, us, ns, ps
# IAT 
**.HTTPTraffic.tcpApp[*].iatMean = 7.7ms#${iatMean=7.8,7.9,8.0,8.1,8.2,8.3,8.4,8.5}ms

**.HTTPTraffic.tcpApp[*].requestLength = truncnormal(350B,20B)
**.HTTPTraffic.tcpApp[*].replyLength = exponential(2000B)
**.HTTPTraffic.tcpApp[*].replyDelay = exponential(500ms)

**.HTTPTraffic.tcpApp[*].clientOn = false

# FTPService
# max number, actual number set by SysCon; number should be dividable by ten ${cl}/4
**.FTPTraffic.tcpApp[*].port = ${ftpport = 21}
**.FTPTraffic.tcpApp[*].connectAddress = "30.0.0.1"
# IAT
#**.FTPTraffic.tcpApp[*].iatMax = 8ms
#**.FTPTraffic.tcpApp[*].iatMin = 10ms
#for k=2, 400ms upwards is good
**.FTPTraffic.tcpApp[*].iatMean = 150ms#150ms

**.FTPTraffic.tcpApp[*].requestLength = truncnormal(20B,5B)
**.FTPTraffic.tcpApp[*].replyLength = exponential(100B)
**.FTPTraffic.tcpApp[*].replyDelay = exponential(10s)

**.FTPTraffic.tcpApp[*].clientOn = true

# Module for scheduling migrations
**.SystemController.numTcpApps = 1
**.SystemController.tcpAppType = "SystemController"
**.SystemController.tcpApp[*].serverThreadClass = "SystemControllerThread"
# The percentage of activated clients is set up in the SysCon class under fillInTimeAndPercentagePairs()

# Traffic controller configuration.
**.trafficController.numTcpApps = 1
**.trafficController.tcpAppType = "DCTCPControllerApp"
**.trafficController.tcpApp[0].serverThreadClass = "DCTCPControllerThread"
#**.testvar = ${test=0..14 step 1}
**.trafficController.tcpApp[0].UPPERHTTPTH = 30
**.trafficController.tcpApp[0].LOWERHTTPTH = 10
**.trafficController.tcpApp[0].UPPERFTPTH = 40#${up =5,10,15,20,20,30,30,40,40,40,50,50,50,60,60 !test}
**.trafficController.tcpApp[0].LOWERFTPTH = 20#${low=1, 4, 5, 5,10,10,15,10,20,30,20,25,30,30,40 !test}
**.trafficController.tcpApp[0].VMMIGTH = 10
#smaller value results in stronger smoothing
**.trafficController.tcpApp[0].alpha = 0.5
**.trafficController.tcpApp[0].gamma = 0.5

# Hyper Visor configuration.
**.hypervisor.numTcpApps = 1
**.hypervisor.tcpAppType = "HyperVisorApp"
**.hypervisor.tcpApp[0].port = 1000
**.hypervisor.tcpApp[0].serverThreadClass = "HyperVisorThread"

**.hypervisor.tcpApp[0].hvStartUpTime = normal(52s, 5s)#normal(0.86s,0.08s)#
# attention, very small!!!
**.hypervisor.tcpApp[0].copyDataSize = truncnormal(1GiB,200MiB)
**.hypervisor.tcpApp[0].hvPowerDownTime = normal(25s, 3s)#normal(0.41s,0.05s)#

**.hypervisor**.idlePower = 60W
**.hypervisor**.startUpPower = 80W #added to idle power
**.hypervisor**.shutDownPower = 80W

# Virtual machines configuration.

# all vms
**.vms[*].numTcpApps = 1
**.vms[*].tcpAppType = "VirtualMachineApp"
**.vms[*].tcpApp[0].serverThreadClass = "VirtualMachineThread"

**.vms[*].tcpApp[0].vmPowerDownTime = normal(20s,3s)#normal(0.3s,0.05s)#
**.vms[*].tcpApp[0].vmPowerUpTime = normal(30s,3s)#normal(0.5s,0.05s)#
**.vms[*].tcpApp[*].delayMsg = 500ms

# HTTP vms
#**.vms**.port = ${httpport}
#**.pods[0..1].**.vms**.port = ${httpport}
#**.pods[1].**.vms[*].tcpApp[0].vmON = false #for debug
#**.pods[1].**.hypervisor.tcpApp[0].hvON = false

# FTP vms
**.vms**.port = ${ftpport}
#**.pods[2..3].**.vms**.port = ${ftpport}
#**.pods[*].**.vms[*].tcpApp[0].vmON = false # for debug
#**.pods[*].**.hypervisor.tcpApp[0].hvON = false

#**.vms**.port = 1001
**.vms**.idlePower = 4W
**.vms**.busyPower = 16W
**.vms**.startUpPower = 16W #added to idle power
**.vms**.shutDownPower = 16W

# Router configuration
**.edgeSwitch*.numTcpApps = 1
**.edgeSwitch*.tcpAppType = "EdgeRouterApp"

**.aggRouters*.numTcpApps = 1
**.aggRouters*.tcpAppType = "AggRouterApp"

**.coreRouters*.numTcpApps = 1
**.coreRouters*.tcpAppType = "CoreRouterApp"

**.k = ${k}
**.powerConSwitch = 14W
**.powerConCable = 1W

# Setting queues for all tcp applications.
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue" 
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"

# Event logging.
#record-eventlog = true
#**.trafficController.**.module-eventlog-recording = true
#**.module-eventlog-recording = false

# Recording statistics
**.HTTPTraffic.tcpApp**.scalar-recording = true
**.FTPTraffic.tcpApp**.scalar-recording = true
**.trafficController.tcpApp[0].**.scalar-recording = true
**.vms[*].tcpApp[0].**.scalar-recording = true
#**.trafficGenerators[*].tcpApp[0].**.scalar-recording = true
**.hypervisor.tcpApp[0].**.scalar-recording = true
**.scalar-recording = false

#**.hypervisor.tcpApp[0].**.vector-recording = true
#**.vms[*].tcpApp[0].**.vector-recording = true
#**.HTTPTraffic.tcpApp**.vector-recording = true
#**.FTPTraffic.tcpApp**.vector-recording = true
#**.trafficGenerators**.tcpApp[0].vector-recording = true
#**.trafficController.tcpApp[0].**.vector-recording = true
**.vector-recording = false