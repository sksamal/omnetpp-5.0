<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>omnetpp::cAbstractImageFigure</name>
    <filename>classomnetpp_1_1cAbstractImageFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a35154cada95fa5b67156d9eb3ba900fd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a35154cada95fa5b67156d9eb3ba900fd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractLineFigure</name>
    <filename>classomnetpp_1_1cAbstractLineFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1ed554288575f22dfa6cac706e3c4534</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1ed554288575f22dfa6cac706e3c4534</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractShapeFigure</name>
    <filename>classomnetpp_1_1cAbstractShapeFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractShapeFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a7e9a202ef50a5eace432916944c511ff</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractShapeFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a7e9a202ef50a5eace432916944c511ff</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractTextFigure</name>
    <filename>classomnetpp_1_1cAbstractTextFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>af5c26cc136002f24993f937aae570f88</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>af5c26cc136002f24993f937aae570f88</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAccuracyDetection</name>
    <filename>classomnetpp_1_1cAccuracyDetection.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cAccuracyDetection</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a68d4a0832cc5bb3eb5216a4a3a7f0e51</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAccuracyDetection</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a24ca1e9a7f1bd1e44ec3aafcb5a5a189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAccuracyDetection *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>af204cc428a4240c7a0fd0f8469943d47</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>afac440523caf963ed8b18d782563d5db</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>afe905211e6b16cfdde6c06cb7d5f5d70</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a0efff8623a2fb79dad94a96dcf16d966</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ac0ae5f26cd2001d772aed9d2ea97d41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ab5d762f73a56052954d95b7d0ad81e2e</anchor>
      <arglist>(PostADFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ae32b48a9e4ac9bdc606ff75226e97d9b</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>aec02be2a42ba2f6a99201a4836fddb0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cAccuracyDetection</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a68d4a0832cc5bb3eb5216a4a3a7f0e51</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAccuracyDetection</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a24ca1e9a7f1bd1e44ec3aafcb5a5a189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAccuracyDetection *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>af204cc428a4240c7a0fd0f8469943d47</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>afac440523caf963ed8b18d782563d5db</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>afe905211e6b16cfdde6c06cb7d5f5d70</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>a0efff8623a2fb79dad94a96dcf16d966</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ac0ae5f26cd2001d772aed9d2ea97d41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ab5d762f73a56052954d95b7d0ad81e2e</anchor>
      <arglist>(PostADFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>ae32b48a9e4ac9bdc606ff75226e97d9b</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classomnetpp_1_1cAccuracyDetection.html</anchorfile>
      <anchor>aec02be2a42ba2f6a99201a4836fddb0c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cADByStddev</name>
    <filename>classomnetpp_1_1cADByStddev.html</filename>
    <base>omnetpp::cAccuracyDetection</base>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>aeb86591518cca27cf80dfe38dfdc4498</anchor>
      <arglist>(const cADByStddev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a453fb922f335d02c247adbf9805cfab7</anchor>
      <arglist>(const char *name=nullptr, double acc=0.01, int reps=3, PostADFunc f=nullptr, void *p=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a6a383160a4b01cbede369626aca60ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cADByStddev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a85bd7bb38e9e45fd45fd669e62817cfd</anchor>
      <arglist>(const cADByStddev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cADByStddev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a0ab32ce5f383025eb313a4c7b0877233</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a30f946658312d1911f0d5471ddd3875a</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>ac5f22fd89c9d430ed5a1428428b244e0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a9b960a536c58146680bbb937653bd6bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a1306e29fda504409b52d24e2002fbee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a2af117417cc4c8d4311fc92545326905</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>ad12437ba0690ca8acf1d965e305d4b07</anchor>
      <arglist>(double acc=0.1, int reps=3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>aeb86591518cca27cf80dfe38dfdc4498</anchor>
      <arglist>(const cADByStddev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a453fb922f335d02c247adbf9805cfab7</anchor>
      <arglist>(const char *name=nullptr, double acc=0.01, int reps=3, PostADFunc f=nullptr, void *p=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cADByStddev</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a6a383160a4b01cbede369626aca60ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cADByStddev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a85bd7bb38e9e45fd45fd669e62817cfd</anchor>
      <arglist>(const cADByStddev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cADByStddev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a0ab32ce5f383025eb313a4c7b0877233</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a30f946658312d1911f0d5471ddd3875a</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>ac5f22fd89c9d430ed5a1428428b244e0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a9b960a536c58146680bbb937653bd6bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a1306e29fda504409b52d24e2002fbee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>a2af117417cc4c8d4311fc92545326905</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classomnetpp_1_1cADByStddev.html</anchorfile>
      <anchor>ad12437ba0690ca8acf1d965e305d4b07</anchor>
      <arglist>(double acc=0.1, int reps=3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArcFigure</name>
    <filename>classomnetpp_1_1cArcFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cArcFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a1be53de080046250df5a9b676d70a807</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArcFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a1be53de080046250df5a9b676d70a807</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArray</name>
    <filename>classomnetpp_1_1cArray.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cArray::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a236e5914bc4079a01c8a9415f0983b3c</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a24001a7647ffae2c589daaccee865b82</anchor>
      <arglist>(const char *name=nullptr, int capacity=0, int delta=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>adb9230b582f9be7de81cf572aa37fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab62ab98949d075088cd3a937e4b41dd1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a881eae95b91dde6750a74c3c0c62ba84</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aee4e19388207564ef83ffc65da16e8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a91c6b4a89bb1d70c4285904b8c1ef06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8ccde020d0bbbf1080377bb89ed6f3a3</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a222de2510839e215919de858cef2212a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addAt</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acca5c8d1b12818cc8568f3cb381fcc88</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab944019177e80d63a5380f213e4768e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a2fbb2d0532423a5bb0be1ab88f1aafbf</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a58963b73bd8e7cd05a6d479cf12a9439</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae8850ea6ce67bbde97f49643c3d0191</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7fabe2812bdb719158d254db6b89301c</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a0e696514ef6fdfc2aa2b738ffbc37f28</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a68975e1cc63eb3ac206fbc10723d059e</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab2b06fe8271624c8c0b1b16331d86736</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8b055a6fc3f542e571d9e956f7e8d678</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a2ef5f370393f130ddb7a288f792273c5</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac4220aa394c0e554a88bfd69b2de5e5a</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a446079ae6e32cc368e29e2f0119fdb2b</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7daec272519afcf869120c12d5d4a0bf</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5f49b2100ace1436af745570b56b619f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a559ff3b7b7314027be55aeee45ee8992</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a236e5914bc4079a01c8a9415f0983b3c</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a24001a7647ffae2c589daaccee865b82</anchor>
      <arglist>(const char *name=nullptr, int capacity=0, int delta=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>adb9230b582f9be7de81cf572aa37fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab62ab98949d075088cd3a937e4b41dd1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a881eae95b91dde6750a74c3c0c62ba84</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aee4e19388207564ef83ffc65da16e8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a91c6b4a89bb1d70c4285904b8c1ef06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8ccde020d0bbbf1080377bb89ed6f3a3</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a222de2510839e215919de858cef2212a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addAt</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acca5c8d1b12818cc8568f3cb381fcc88</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab944019177e80d63a5380f213e4768e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a2fbb2d0532423a5bb0be1ab88f1aafbf</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a58963b73bd8e7cd05a6d479cf12a9439</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae8850ea6ce67bbde97f49643c3d0191</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7fabe2812bdb719158d254db6b89301c</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a0e696514ef6fdfc2aa2b738ffbc37f28</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a68975e1cc63eb3ac206fbc10723d059e</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab2b06fe8271624c8c0b1b16331d86736</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8b055a6fc3f542e571d9e956f7e8d678</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a2ef5f370393f130ddb7a288f792273c5</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac4220aa394c0e554a88bfd69b2de5e5a</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a446079ae6e32cc368e29e2f0119fdb2b</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7daec272519afcf869120c12d5d4a0bf</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5f49b2100ace1436af745570b56b619f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a559ff3b7b7314027be55aeee45ee8992</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBernoulli</name>
    <filename>classomnetpp_1_1cBernoulli.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBernoulli *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a835cfab137b6fa30ea619c260fe9dd20</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBernoulli *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a835cfab137b6fa30ea619c260fe9dd20</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBeta</name>
    <filename>classomnetpp_1_1cBeta.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBeta *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a245f87f5613256af0df72db1279694d2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBeta *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a245f87f5613256af0df72db1279694d2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBinomial</name>
    <filename>classomnetpp_1_1cBinomial.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>ac425e090b14ef49e38bebb33f59dbed2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>ac425e090b14ef49e38bebb33f59dbed2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBoolParImpl</name>
    <filename>classomnetpp_1_1cBoolParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ad59f1b81907f20a8162d411f30a206fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae7aac8053c969e017ad0eac4c225e7c0</anchor>
      <arglist>(const cBoolParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6883d71b677b9c93dec8f0d2ae7747a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6085bb876141d45a5a6d2017ba140adc</anchor>
      <arglist>(const cBoolParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBoolParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a4276e73766a4ccf4342141064ee86f04</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ad59f1b81907f20a8162d411f30a206fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae7aac8053c969e017ad0eac4c225e7c0</anchor>
      <arglist>(const cBoolParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6883d71b677b9c93dec8f0d2ae7747a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6085bb876141d45a5a6d2017ba140adc</anchor>
      <arglist>(const cBoolParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBoolParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a4276e73766a4ccf4342141064ee86f04</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCanvas</name>
    <filename>classomnetpp_1_1cCanvas.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a1e73aec2cd1488cc5e1bb3e9d4ea8d1f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a1e73aec2cd1488cc5e1bb3e9d4ea8d1f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCauchy</name>
    <filename>classomnetpp_1_1cCauchy.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cCauchy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a225f901eeb1b82b2311052aef9c819de</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCauchy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a225f901eeb1b82b2311052aef9c819de</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannel</name>
    <filename>classomnetpp_1_1cChannel.html</filename>
    <base>omnetpp::cComponent</base>
    <class kind="class">omnetpp::cChannel::MessageSentSignalValue</class>
    <class kind="struct">omnetpp::cChannel::result_t</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a560269f7f2a294ea313f32bf78443df8</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acf81fb8aeb97a39ee2468a3f39e076fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a9e3014e58ed0e7dc7c4bd3a7391623f9</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a4688cd2b387d2d9608547a9055ca674a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>getChannelType</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a7d4077d9ca79729777705b1512911a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a43a21f306a3ed1811d31e9f1dfd3809f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getSourceGate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6b5e1022a6124367e4eb19079a952f42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ac53b59d9f96b7607a5b47d198bce5f3a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5f63dc06c7294df684b292bca0a80b43</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad948bdcb37b089a9bdcfbf7168f1236b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a173f98fe767b3ae9a706e02c357c3ef2</anchor>
      <arglist>(cMessage *msg) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a477f0af330192a9cb9930b2d9565faf1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abeb36e46a4679f3d29c28d783447a920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>af16609bbae868ce2281aadd7240008eb</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a560269f7f2a294ea313f32bf78443df8</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acf81fb8aeb97a39ee2468a3f39e076fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a9e3014e58ed0e7dc7c4bd3a7391623f9</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a4688cd2b387d2d9608547a9055ca674a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>getChannelType</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a7d4077d9ca79729777705b1512911a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a43a21f306a3ed1811d31e9f1dfd3809f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getSourceGate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6b5e1022a6124367e4eb19079a952f42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ac53b59d9f96b7607a5b47d198bce5f3a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5f63dc06c7294df684b292bca0a80b43</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad948bdcb37b089a9bdcfbf7168f1236b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a173f98fe767b3ae9a706e02c357c3ef2</anchor>
      <arglist>(cMessage *msg) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a477f0af330192a9cb9930b2d9565faf1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abeb36e46a4679f3d29c28d783447a920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>af16609bbae868ce2281aadd7240008eb</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannelType</name>
    <filename>classomnetpp_1_1cChannelType.html</filename>
    <base>omnetpp::cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a11361f34c15197787378354332b34947</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a6600a45bf594a56dc6c28fab12e6eece</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>af547238a70823d0de6a2ddd8dde7d790</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a76b7b38d7dd221824c773aed9d5f7d99</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getIdealChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>afd60c6e982aa6e21f77a4b83227f3e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDelayChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a779702980ad2bbb9cc10bf5e783d14e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDatarateChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a8ec280d09924e7a2adfc57b6e5a45bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cIdealChannel *</type>
      <name>createIdealChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>ae00a8273cd9be18305ee049d36bad88b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDelayChannel *</type>
      <name>createDelayChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a7970cf7a2be40f8c11394933896447fe</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDatarateChannel *</type>
      <name>createDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>ad9e4c4e388ace0533d74d99526a83364</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cChannel *</type>
      <name>createChannelObject</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a13f6988adb5a276f36ee5ee06340a4ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersTo</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>acd83ea7105897ac97f5eb1e10b82e134</anchor>
      <arglist>(cChannel *channel)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cChannel *</type>
      <name>instantiateChannelClass</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a44017f71fc564979cc804db45fd9abc6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a11361f34c15197787378354332b34947</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a6600a45bf594a56dc6c28fab12e6eece</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChiSquare</name>
    <filename>classomnetpp_1_1cChiSquare.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cChiSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a9ed732de03b2ec4b23b99a204012c72d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChiSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a9ed732de03b2ec4b23b99a204012c72d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cClassDescriptor</name>
    <filename>classomnetpp_1_1cClassDescriptor.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca4fa62a67a5a14ad712c96108da00f36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cac7b1b7c5d322963460117c53eebf0141</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06caff73dac20f3794affa9dbc192f7da438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca853da0db176b5d87ba10933979af4dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOWNEDOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cae4a0bd37726b854a9d63b903218a6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca90c1e3ed9c0d3acce5c395614198c6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca4fa62a67a5a14ad712c96108da00f36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cac7b1b7c5d322963460117c53eebf0141</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06caff73dac20f3794affa9dbc192f7da438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca853da0db176b5d87ba10933979af4dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOWNEDOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cae4a0bd37726b854a9d63b903218a6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca90c1e3ed9c0d3acce5c395614198c6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFieldDeclaredOn</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a64e671e85a9fe7ddec89c2c211e94ce4</anchor>
      <arglist>(int field) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldTypeString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a82445c76391179bcea3aa3b7ca1aa224</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getFieldPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aff4cb1877073102c0f97735460ba59cd</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ae6e5d96f102c1af570066d07eaa9b3ca</anchor>
      <arglist>(int field, const char *propertyname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldArraySize</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1562505a52fbd8ce9b8100239ec3cbcf</anchor>
      <arglist>(void *object, int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFieldValueAsString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a258d1983e20c687204162f6d3562429b</anchor>
      <arglist>(void *object, int field, int i) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setFieldValueAsString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ac9a6833eb30f0d71e0dcb4ed80214b24</anchor>
      <arglist>(void *object, int field, int i, const char *value) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldStructName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a5803300dfb3cb2d8c8ba9b9b72d1b3d2</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getFieldStructValuePointer</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0e3390e16425acc08b090adae471cee7</anchor>
      <arglist>(void *object, int field, int i) const  =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a98f00090735eef199dbc362b398ecfdf</anchor>
      <arglist>(const char *className, const char *baseClassName=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0ccdef824b513673ae36ca70ae89299a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1f8052172cd3926a93869b23e3869b89</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aaf022e93b62a8aefc094dd4b1713c249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendsCObject</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a839a4376b71e95db2ffe2a5fd531cee6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNamespace</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a5f347c8d2a135827c7efc947c5b26c70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a77a5c7d52eeee65c80dbf2bce9b45594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ae41139f1e12f5618a570046fc7d8e0a5</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ad2192b4ca2c11500c7e61a6cbcdea818</anchor>
      <arglist>(const char *propertyname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aaaa407e8656e7ac634f8b27ed8efa1d4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a4188c486b8508e8f13c7c3d19d6ac8dd</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findField</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aedfce8d0b0ff18fa249919a482caef71</anchor>
      <arglist>(const char *fieldName) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0a0363c0c27855f569170d2b3f1ddb84</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1a202a2e7b2cac8c243ef37280223d17</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>acbf52a7182467dca2913ca0f690042d8</anchor>
      <arglist>(const cObject *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a98f00090735eef199dbc362b398ecfdf</anchor>
      <arglist>(const char *className, const char *baseClassName=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0ccdef824b513673ae36ca70ae89299a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1a202a2e7b2cac8c243ef37280223d17</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>acbf52a7182467dca2913ca0f690042d8</anchor>
      <arglist>(const cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1f8052172cd3926a93869b23e3869b89</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aaf022e93b62a8aefc094dd4b1713c249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendsCObject</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a839a4376b71e95db2ffe2a5fd531cee6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNamespace</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a5f347c8d2a135827c7efc947c5b26c70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a77a5c7d52eeee65c80dbf2bce9b45594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ae41139f1e12f5618a570046fc7d8e0a5</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ad2192b4ca2c11500c7e61a6cbcdea818</anchor>
      <arglist>(const char *propertyname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aaaa407e8656e7ac634f8b27ed8efa1d4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a4188c486b8508e8f13c7c3d19d6ac8dd</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findField</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aedfce8d0b0ff18fa249919a482caef71</anchor>
      <arglist>(const char *fieldName) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0a0363c0c27855f569170d2b3f1ddb84</anchor>
      <arglist>(int field) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCommBuffer</name>
    <filename>classomnetpp_1_1cCommBuffer.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCommBuffer</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a402c4387838bbff395ab5ea7c8110bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aab9509c879bfdea2b56b899628be7c43</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ade8e6fa06440c5e1b4e250a74bbd7013</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a18f279a1b15912b7a7ad4db76f364621</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a17cb031bce3af1f714e091003614febe</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab371f9ff68b8a490d6efb617102bd606</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa9bd14a0ed1ae5a95bf937342011c493</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2ab66c10f793a98d29fedd6858c4f6c3</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a04b2ffeb9d8a873690c859973d9ee453</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af397d002d73d3f9ed6641b31b3a84dca</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac2ad3bc21ff226ed33ac85a3a6f97005</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3e9bf1ee4d44e291e68b27cd121d99dc</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a26be2991f7508ac8cbf391da955eb7d7</anchor>
      <arglist>(long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91588245fb3b4af16c470a0371db1c00</anchor>
      <arglist>(unsigned long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1c196caf72eb5b4b1f3eb8a08cce13c6</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8a4c79042f7c1e1824e3ce8235efcbf3</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adaed967c081322fd50ae28d5bec63f55</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a179a7cebf53fd186301ea961c5dfdb8d</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93fb0cae05ad6aa8a7c8cf23352e5e4d</anchor>
      <arglist>(const opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a85ee67c776c9d91cc8c52b60cf142bb3</anchor>
      <arglist>(SimTime d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aefcce19fc09611d3ffb6262c4221bbf6</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a170d055905f4dea76fd2c2a5fa57475d</anchor>
      <arglist>(const unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a43ee1c7618808b98150ddb71ddabc91c</anchor>
      <arglist>(const bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a58985ee455806c2ccb7de5d0ad544161</anchor>
      <arglist>(const short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a393b015fc1fc933f5976cc211e1f52d8</anchor>
      <arglist>(const unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93989855260307ef0e1b27d34c96f44c</anchor>
      <arglist>(const int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8728dbe02be0c26733c21ac769e3c1b6</anchor>
      <arglist>(const unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afd12a9b8bf620591fae3e372cbc259a5</anchor>
      <arglist>(const long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3ed53ed056f224497e7f4a97cace77ed</anchor>
      <arglist>(const unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a63195e13189c4b05ddccff622fbe4215</anchor>
      <arglist>(const long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7517f3f055f34ef622b51233402aba65</anchor>
      <arglist>(const unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91d26ab7cb4ac3be21ec11e4828303ee</anchor>
      <arglist>(const float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7ce49e49d228ecae694d29dd93c8028a</anchor>
      <arglist>(const double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ae9d65cb717065e1635141cd3fe1d6fa2</anchor>
      <arglist>(const long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2be5209381e8e238d63760447043db70</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a769934711828a3e9865a66bd4d3c81eb</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a27bd70fe704c4628b8164f3ba0500d10</anchor>
      <arglist>(const opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abc61adda2b264a6feaa0157c922eadc7</anchor>
      <arglist>(const SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a97ad968ffc3d00e0444bc4a1fdd3d906</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>acc948b850d5649cf37292ceea5ef1715</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5b735abbe59e310ed52fd6d388e504ca</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aaa8e32181fdca90c645d781e3c0a9892</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab9c8ed55fc3c164219c402ddcfc684e3</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a4e3abac111b106a1ef4d670e16d9777e</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af5b4f491c3693f1bebeb68712624031d</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5313db8015102910e07311a9f646ae64</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abe0cf9231776b56cae8e5b54786618fc</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa56c76888e73d2adf41f0809f0aa0456</anchor>
      <arglist>(long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1d3fd87b0794d853fe060c23eebee4b1</anchor>
      <arglist>(unsigned long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a79b217183beb648f7adee4557d7e2cd1</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af84c7c978f8aeac7448e4b61098e6b6f</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afa97923364329aad1fd5d260bc10cfa0</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abbcc7011c1236d9138b678b596e899d3</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adae212badd3eb3ff9be7a5fe89f0a7a5</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa86a58b19c215cb71ad9dc00af3b50b0</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7f71388bee556894356e626891628986</anchor>
      <arglist>(SimTime &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5c2482ff8a9cd59d6255b8abbb0cd322</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6d266eeb51b87b71c7137b761f946e8a</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a098d628a7adf956043406588426d0b69</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a037e46e0abeb4842c2a03d0d25f26ae7</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac7fa9282a4ec46377d29b0331868d2d0</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9b7858bae9eaabccbc87f0cca28cd0d3</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2543ff5019753a0b3b1f5c21bb77471c</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af97ee524aea18c854a867f9c8d21de54</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adf447f1e6260b26d09f9a3ae27316f53</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa2dfd482878af46c0f3ae64c7d646966</anchor>
      <arglist>(long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abcd48628af4da587ee42081d7c34d233</anchor>
      <arglist>(unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af8193545beff866ad068552278eec213</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab351f966c9f1593e51f3544285a607ac</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ad3321dc99428e4d5507825bea4b9142f</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a605db897b64165cb422f906d5ec7b4ea</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af89c832b2354f2d6bc1145207465fe1c</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aeeaf685cf82e647578eeb422071c9baa</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa0c6649211be17513d224318c9c95b39</anchor>
      <arglist>(SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7515869cb85aae12a6e632d95f54ca2e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2f61f6ead6b75197a9c2348c3587037a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a823800e1da7a664748fd5357c1f14386</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9ac93f53bf231f4bceb2130aa4275b69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aab9509c879bfdea2b56b899628be7c43</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ade8e6fa06440c5e1b4e250a74bbd7013</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a18f279a1b15912b7a7ad4db76f364621</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a17cb031bce3af1f714e091003614febe</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab371f9ff68b8a490d6efb617102bd606</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa9bd14a0ed1ae5a95bf937342011c493</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2ab66c10f793a98d29fedd6858c4f6c3</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a04b2ffeb9d8a873690c859973d9ee453</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af397d002d73d3f9ed6641b31b3a84dca</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac2ad3bc21ff226ed33ac85a3a6f97005</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3e9bf1ee4d44e291e68b27cd121d99dc</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a26be2991f7508ac8cbf391da955eb7d7</anchor>
      <arglist>(long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91588245fb3b4af16c470a0371db1c00</anchor>
      <arglist>(unsigned long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1c196caf72eb5b4b1f3eb8a08cce13c6</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8a4c79042f7c1e1824e3ce8235efcbf3</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adaed967c081322fd50ae28d5bec63f55</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a179a7cebf53fd186301ea961c5dfdb8d</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93fb0cae05ad6aa8a7c8cf23352e5e4d</anchor>
      <arglist>(const opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a85ee67c776c9d91cc8c52b60cf142bb3</anchor>
      <arglist>(SimTime d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aefcce19fc09611d3ffb6262c4221bbf6</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a170d055905f4dea76fd2c2a5fa57475d</anchor>
      <arglist>(const unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a43ee1c7618808b98150ddb71ddabc91c</anchor>
      <arglist>(const bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a58985ee455806c2ccb7de5d0ad544161</anchor>
      <arglist>(const short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a393b015fc1fc933f5976cc211e1f52d8</anchor>
      <arglist>(const unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93989855260307ef0e1b27d34c96f44c</anchor>
      <arglist>(const int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8728dbe02be0c26733c21ac769e3c1b6</anchor>
      <arglist>(const unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afd12a9b8bf620591fae3e372cbc259a5</anchor>
      <arglist>(const long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3ed53ed056f224497e7f4a97cace77ed</anchor>
      <arglist>(const unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a63195e13189c4b05ddccff622fbe4215</anchor>
      <arglist>(const long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7517f3f055f34ef622b51233402aba65</anchor>
      <arglist>(const unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91d26ab7cb4ac3be21ec11e4828303ee</anchor>
      <arglist>(const float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7ce49e49d228ecae694d29dd93c8028a</anchor>
      <arglist>(const double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ae9d65cb717065e1635141cd3fe1d6fa2</anchor>
      <arglist>(const long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2be5209381e8e238d63760447043db70</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a769934711828a3e9865a66bd4d3c81eb</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a27bd70fe704c4628b8164f3ba0500d10</anchor>
      <arglist>(const opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abc61adda2b264a6feaa0157c922eadc7</anchor>
      <arglist>(const SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a97ad968ffc3d00e0444bc4a1fdd3d906</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>acc948b850d5649cf37292ceea5ef1715</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5b735abbe59e310ed52fd6d388e504ca</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aaa8e32181fdca90c645d781e3c0a9892</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab9c8ed55fc3c164219c402ddcfc684e3</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a4e3abac111b106a1ef4d670e16d9777e</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af5b4f491c3693f1bebeb68712624031d</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5313db8015102910e07311a9f646ae64</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abe0cf9231776b56cae8e5b54786618fc</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa56c76888e73d2adf41f0809f0aa0456</anchor>
      <arglist>(long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1d3fd87b0794d853fe060c23eebee4b1</anchor>
      <arglist>(unsigned long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a79b217183beb648f7adee4557d7e2cd1</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af84c7c978f8aeac7448e4b61098e6b6f</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afa97923364329aad1fd5d260bc10cfa0</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abbcc7011c1236d9138b678b596e899d3</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adae212badd3eb3ff9be7a5fe89f0a7a5</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa86a58b19c215cb71ad9dc00af3b50b0</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7f71388bee556894356e626891628986</anchor>
      <arglist>(SimTime &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5c2482ff8a9cd59d6255b8abbb0cd322</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6d266eeb51b87b71c7137b761f946e8a</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a098d628a7adf956043406588426d0b69</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a037e46e0abeb4842c2a03d0d25f26ae7</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac7fa9282a4ec46377d29b0331868d2d0</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9b7858bae9eaabccbc87f0cca28cd0d3</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2543ff5019753a0b3b1f5c21bb77471c</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af97ee524aea18c854a867f9c8d21de54</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adf447f1e6260b26d09f9a3ae27316f53</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa2dfd482878af46c0f3ae64c7d646966</anchor>
      <arglist>(long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abcd48628af4da587ee42081d7c34d233</anchor>
      <arglist>(unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af8193545beff866ad068552278eec213</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab351f966c9f1593e51f3544285a607ac</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ad3321dc99428e4d5507825bea4b9142f</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a605db897b64165cb422f906d5ec7b4ea</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af89c832b2354f2d6bc1145207465fe1c</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aeeaf685cf82e647578eeb422071c9baa</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa0c6649211be17513d224318c9c95b39</anchor>
      <arglist>(SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7515869cb85aae12a6e632d95f54ca2e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2f61f6ead6b75197a9c2348c3587037a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a823800e1da7a664748fd5357c1f14386</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9ac93f53bf231f4bceb2130aa4275b69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cComponent</name>
    <filename>classomnetpp_1_1cComponent.html</filename>
    <base>omnetpp::cDefaultList</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8d83c0346d3f9f1c5ecb95777bac5556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a914eb6b60cdcbec00464e3bdde1ede1b</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2b5ac76ba3236f514b9d9d977f3b9a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>const cComponent *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aca0ba0d56d50c6eb526f74dacff537a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab09594ea0c35bd2e4e7d49fe51238447</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cComponentType *</type>
      <name>getComponentType</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a204807c5497b98f91ba222842ceffac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a79218e0640b73bfbdc5486d0faa1be5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7dea697b9afe117d9a1bb72b50a37afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNedTypeName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aec1c315a0c916b428f71a6260c1761e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1dd37fdda3ba65045a34ca324eca65f0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac63aab9e66c02c1c0c46dc4aa2452e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannel</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afa87d6205f089a99b5378b602f65cd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a674d075d25cd051d493fd20fc1ce3049</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a78c41744a0adca5046c026fa780d2b48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a696c02b4d28bafcd19521668ba589cb9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abe0d07fe5e69478ed318eee62f31af59</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a834d5764a674b01e9287404ef64f5bcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParams</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a224a112a834c0ef62699052eece3255c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0a95bef1b9c84b134b18c1481adf4c55</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a59489673de925fa190664effb8501522</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af5506335b59111e62cf6292f411f9a9f</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab6ea2aca6faf999fc673b69729f78967</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aee423b79238feeb9146623f087305047</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab0fcc90d1824587680e47ae4cdab7d9d</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af8e4076e8a7b3c02e20a9c592ba4e331</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad7ce644e42e3e9861d6d94f864a3a903</anchor>
      <arglist>(long r, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>dblrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae6fc57aa27ef3961834a2ccab3461adb</anchor>
      <arglist>(int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ada95ebc3f6325ccf588388713a26b10d</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa87fba7bc7d85ccf71f59c4b6625597a</anchor>
      <arglist>(SimTime a, SimTime b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a77c3c31c712d4e700be6453bdf7a6158</anchor>
      <arglist>(double mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae791b66766682ba34c38c72597affcae</anchor>
      <arglist>(SimTime mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab7927795216a4a5022ad1159d425c30f</anchor>
      <arglist>(double mean, double stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5f8a31f69533283539bb28d59c64ae1f</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a250074cc79a2beffd7c4afa33eda792b</anchor>
      <arglist>(double mean, double stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a25f2f394481d77be8288e61d00275a52</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gamma_d</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af2b494a18efe3c00d7d9763561981ef6</anchor>
      <arglist>(double alpha, double theta, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>beta</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa9e515d48816762b5379e610326e5381</anchor>
      <arglist>(double alpha1, double alpha2, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>erlang_k</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a47bdcace2ca6a1b49bb00db5f48e852f</anchor>
      <arglist>(unsigned int k, double mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>chi_square</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae564c0bfecaed3f5bef459789eaa6972</anchor>
      <arglist>(unsigned int k, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>student_t</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a20d41795196a4ca3cd57965fd95468b3</anchor>
      <arglist>(unsigned int i, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cauchy</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a785a8623381510761b01b796fb1c2b85</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>triang</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa6b5a5b31b4f3ebfd938115f4ae7d50f</anchor>
      <arglist>(double a, double b, double c, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lognormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae9420f7e5c2e43bec20eba9c808fc1c8</anchor>
      <arglist>(double m, double w, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weibull</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7d5aee297f1e5213ddd846bfe4a09d46</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pareto_shifted</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd3e4a139da6377739af7dcd7281efc2</anchor>
      <arglist>(double a, double b, double c, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7548efb6bb436abab2a6ce92f50828f</anchor>
      <arglist>(int a, int b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bernoulli</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3cdf318024b1474098a4eb6305211c85</anchor>
      <arglist>(double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>binomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a128c88b3604d1e665328c00b9805e5c1</anchor>
      <arglist>(int n, double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>geometric</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2acd0ae1a310c10820082a7f9653d704</anchor>
      <arglist>(double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>negbinomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a753288c1d814d1662be64dc5f47755e9</anchor>
      <arglist>(int n, double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>poisson</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1c1ca8ec127c3c5d304bda1edc52d58d</anchor>
      <arglist>(double lambda, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a178aee891ea1813e4009f5cbf3f08dbd</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a09bbb65fe46cafb0891d4950e74cdb71</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abc2e2b269cdad6e91f67e8c70f383d14</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a29290418183b197ec7376cf48e175839</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a89343c120b9abad0f43f99d999873a6a</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6c359126b2f6ed0b2ddef17b83afda35</anchor>
      <arglist>(const char *signalName, cIListener *listener) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; simsignal_t &gt;</type>
      <name>getLocalListenedSignals</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3136a118148abbfc566d001d9e4f797c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; cIListener * &gt;</type>
      <name>getLocalSignalListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aea940e8592c8de7c6816e2315c46f25a</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGUI</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af170a9e33793fd8ea42493f8f5b3fda3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>adc331d93e7a97cf68aa2834f07ec1f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa145768f6a54a453e745415400d04080</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2e5da23aec898d7bd16d722663919053</anchor>
      <arglist>(const char *text) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a85c2ae9b17443b0f01b66feeb4f94cc6</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac553b85fbf167cbb73e546771627f797</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd8f1f3618f29687d07b6cb2693aa78d</anchor>
      <arglist>(const char *name, SimTime value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1d2db12bf50d56a56ba3dc176df91b17</anchor>
      <arglist>(cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7d6115031e118ca4586c855ddec90a2</anchor>
      <arglist>(const char *name, cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a36c856572779aa7766989186cef95029</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac93e4dcd843e290f6d13bd98d6279053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6365dca5a7d8ddb694726a53b55a4c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>add480a9cf3f0b32e06ef6e9b87c36b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4c59e888b018005049066efac784fd23</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48c41698cc83a36816bf56d9e69439de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a36c856572779aa7766989186cef95029</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac93e4dcd843e290f6d13bd98d6279053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6365dca5a7d8ddb694726a53b55a4c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>add480a9cf3f0b32e06ef6e9b87c36b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4c59e888b018005049066efac784fd23</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48c41698cc83a36816bf56d9e69439de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a914eb6b60cdcbec00464e3bdde1ede1b</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2b5ac76ba3236f514b9d9d977f3b9a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>const cComponent *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aca0ba0d56d50c6eb526f74dacff537a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab09594ea0c35bd2e4e7d49fe51238447</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cComponentType *</type>
      <name>getComponentType</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a204807c5497b98f91ba222842ceffac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a79218e0640b73bfbdc5486d0faa1be5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7dea697b9afe117d9a1bb72b50a37afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNedTypeName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aec1c315a0c916b428f71a6260c1761e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1dd37fdda3ba65045a34ca324eca65f0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac63aab9e66c02c1c0c46dc4aa2452e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannel</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afa87d6205f089a99b5378b602f65cd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a674d075d25cd051d493fd20fc1ce3049</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a78c41744a0adca5046c026fa780d2b48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a696c02b4d28bafcd19521668ba589cb9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abe0d07fe5e69478ed318eee62f31af59</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a834d5764a674b01e9287404ef64f5bcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParams</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a224a112a834c0ef62699052eece3255c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0a95bef1b9c84b134b18c1481adf4c55</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a59489673de925fa190664effb8501522</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af5506335b59111e62cf6292f411f9a9f</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab6ea2aca6faf999fc673b69729f78967</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aee423b79238feeb9146623f087305047</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab0fcc90d1824587680e47ae4cdab7d9d</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af8e4076e8a7b3c02e20a9c592ba4e331</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad7ce644e42e3e9861d6d94f864a3a903</anchor>
      <arglist>(long r, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>dblrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae6fc57aa27ef3961834a2ccab3461adb</anchor>
      <arglist>(int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ada95ebc3f6325ccf588388713a26b10d</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa87fba7bc7d85ccf71f59c4b6625597a</anchor>
      <arglist>(SimTime a, SimTime b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a77c3c31c712d4e700be6453bdf7a6158</anchor>
      <arglist>(double mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae791b66766682ba34c38c72597affcae</anchor>
      <arglist>(SimTime mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab7927795216a4a5022ad1159d425c30f</anchor>
      <arglist>(double mean, double stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5f8a31f69533283539bb28d59c64ae1f</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a250074cc79a2beffd7c4afa33eda792b</anchor>
      <arglist>(double mean, double stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a25f2f394481d77be8288e61d00275a52</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gamma_d</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af2b494a18efe3c00d7d9763561981ef6</anchor>
      <arglist>(double alpha, double theta, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>beta</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa9e515d48816762b5379e610326e5381</anchor>
      <arglist>(double alpha1, double alpha2, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>erlang_k</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a47bdcace2ca6a1b49bb00db5f48e852f</anchor>
      <arglist>(unsigned int k, double mean, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>chi_square</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae564c0bfecaed3f5bef459789eaa6972</anchor>
      <arglist>(unsigned int k, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>student_t</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a20d41795196a4ca3cd57965fd95468b3</anchor>
      <arglist>(unsigned int i, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cauchy</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a785a8623381510761b01b796fb1c2b85</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>triang</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa6b5a5b31b4f3ebfd938115f4ae7d50f</anchor>
      <arglist>(double a, double b, double c, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lognormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae9420f7e5c2e43bec20eba9c808fc1c8</anchor>
      <arglist>(double m, double w, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weibull</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7d5aee297f1e5213ddd846bfe4a09d46</anchor>
      <arglist>(double a, double b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pareto_shifted</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd3e4a139da6377739af7dcd7281efc2</anchor>
      <arglist>(double a, double b, double c, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7548efb6bb436abab2a6ce92f50828f</anchor>
      <arglist>(int a, int b, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bernoulli</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3cdf318024b1474098a4eb6305211c85</anchor>
      <arglist>(double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>binomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a128c88b3604d1e665328c00b9805e5c1</anchor>
      <arglist>(int n, double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>geometric</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2acd0ae1a310c10820082a7f9653d704</anchor>
      <arglist>(double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>negbinomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a753288c1d814d1662be64dc5f47755e9</anchor>
      <arglist>(int n, double p, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>poisson</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1c1ca8ec127c3c5d304bda1edc52d58d</anchor>
      <arglist>(double lambda, int rng=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad9d13a52022df8f4e754f55c22958eab</anchor>
      <arglist>(simsignal_t signalID, bool b, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3dc2bd99e2171e2f164288d1ae9af7ec</anchor>
      <arglist>(simsignal_t signalID, long l, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a030f024d5f093fe2aec5ed587642a4de</anchor>
      <arglist>(simsignal_t signalID, unsigned long l, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>affc7f9833852c0cebe455c9abc2069e9</anchor>
      <arglist>(simsignal_t signalID, double d, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a86e03b6ce067930fc5a23af3d9a6c194</anchor>
      <arglist>(simsignal_t signalID, const SimTime &amp;t, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a52dd0d8252b351712ec5efae5620b51c</anchor>
      <arglist>(simsignal_t signalID, const char *s, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a686a0ed0adb405486c24e849b83191bf</anchor>
      <arglist>(simsignal_t signalID, cObject *obj, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>acc1a71c4d912d7d6bd8bd8e772711cd8</anchor>
      <arglist>(simsignal_t signalID, const cObject *obj, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3f7a67e59ad3abcb21429c2a9912861f</anchor>
      <arglist>(simsignal_t signalID, char c, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a664554f42b7c05d7881db38d55fa68d2</anchor>
      <arglist>(simsignal_t signalID, unsigned char c, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a14b3db315aed45dbe007245e92c5a4ae</anchor>
      <arglist>(simsignal_t signalID, short i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac8c6683fc70c790f073b0b0ade89bcf9</anchor>
      <arglist>(simsignal_t signalID, unsigned short i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aedab2c18b2d3b39ad774e9ec6877cf98</anchor>
      <arglist>(simsignal_t signalID, int i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8ac2497a112fb4c8e89289a89565e69b</anchor>
      <arglist>(simsignal_t signalID, unsigned int i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4a12c952d230f75a219532b14352d9cb</anchor>
      <arglist>(simsignal_t signalID, float f, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a49a291ed5b89376519bebaa10bdb7b97</anchor>
      <arglist>(simsignal_t signalID, long double d, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayHaveListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9b9a9a207ce90d81538ee507edc6560f</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab26dd488f10971172204b36d80858bd0</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simsignal_t</type>
      <name>registerSignal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae9541593ed53f6b0b468a62c80e7095b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getSignalName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af4a05243a1ce13f3d0fb8b74eba76b3a</anchor>
      <arglist>(simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a178aee891ea1813e4009f5cbf3f08dbd</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a09bbb65fe46cafb0891d4950e74cdb71</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abc2e2b269cdad6e91f67e8c70f383d14</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a29290418183b197ec7376cf48e175839</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a89343c120b9abad0f43f99d999873a6a</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6c359126b2f6ed0b2ddef17b83afda35</anchor>
      <arglist>(const char *signalName, cIListener *listener) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; simsignal_t &gt;</type>
      <name>getLocalListenedSignals</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3136a118148abbfc566d001d9e4f797c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; cIListener * &gt;</type>
      <name>getLocalSignalListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aea940e8592c8de7c6816e2315c46f25a</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGUI</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af170a9e33793fd8ea42493f8f5b3fda3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>adc331d93e7a97cf68aa2834f07ec1f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa145768f6a54a453e745415400d04080</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2e5da23aec898d7bd16d722663919053</anchor>
      <arglist>(const char *text) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a85c2ae9b17443b0f01b66feeb4f94cc6</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac553b85fbf167cbb73e546771627f797</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd8f1f3618f29687d07b6cb2693aa78d</anchor>
      <arglist>(const char *name, SimTime value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1d2db12bf50d56a56ba3dc176df91b17</anchor>
      <arglist>(cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7d6115031e118ca4586c855ddec90a2</anchor>
      <arglist>(const char *name, cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cComponentType</name>
    <filename>classomnetpp_1_1cComponentType.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab8717f85461cf0b2e29d0f8911160511</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a5fa5d54f02b1022797f6bf7554cdc487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a7a640944c50c6a41403cfd1b32986f3c</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ac6f296feec2395e281923b27c5152214</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab8717f85461cf0b2e29d0f8911160511</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a5fa5d54f02b1022797f6bf7554cdc487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigOption</name>
    <filename>classomnetpp_1_1cConfigOption.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ObjectKind</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>ac3b0677926528858fd29ac7fe358ee93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>aae4a7cba63aacc3acae47126ecff3b1b</anchor>
      <arglist>(const char *name, bool isGlobal, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a89774df903e819f8daaea1f44fdc4f09</anchor>
      <arglist>(const char *name, ObjectKind kind, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>aae4a7cba63aacc3acae47126ecff3b1b</anchor>
      <arglist>(const char *name, bool isGlobal, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a89774df903e819f8daaea1f44fdc4f09</anchor>
      <arglist>(const char *name, ObjectKind kind, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPerObject</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>abc8fc32f0cbb7d5d00d823e8513a4486</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGlobal</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a017b1ead8e5988dd0e491cae93ac510c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectKind</type>
      <name>getObjectKind</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>af9229b23d2c97f4487fa2318c0d215b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>afc641171fb699c1116758176cd3bf4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a6a93a97cd20c30b5a38b371343b41d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultValue</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a9e99ea1717e6825dbe5bf82df6a4cdfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getObjectKindName</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a7e3da2320b4a882833c362c0839c4a86</anchor>
      <arglist>(ObjectKind kind)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a811755497e507821b3f40e3f6aa56886</anchor>
      <arglist>(Type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfiguration</name>
    <filename>classomnetpp_1_1cConfiguration.html</filename>
    <base>omnetpp::cObject</base>
    <class kind="class">omnetpp::cConfiguration::KeyValue</class>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ae315f45d67e5a1a4b24f208d1f4c0cba</anchor>
      <arglist>(const char *key) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a6dabb484127d85cccdfaff7b2ef4459c</anchor>
      <arglist>(const char *key) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getPerObjectConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a1bf7258d84cce254206f32094fefa502</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getPerObjectConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a116d909f35e76c0c4d6e1fcd1befb5e0</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>abf4c5be5fa71ec916ed155aa5b52f20d</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ad36758d56029e5b521777dffe8bb58b1</anchor>
      <arglist>(cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a73bc3d8ef753c6c9ff7ebe4a2fbaea02</anchor>
      <arglist>(cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ac0ed689e4fd44aa973c21c3de394dde7</anchor>
      <arglist>(cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a987fbe49a97573c60230026350483823</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a736b04a05e749d8a9ff10f4eb66efaae</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a441f9ebf1b39237f39c024286a9b35ce</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>af96b6bcbe2496086b6eee4fdeed820a0</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>aac5dd3c96f09f00b057a73bc459bdfa0</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a68319618fda99469c462b5caca2b3b86</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a83d6d08bbf3a464bdac58bf42635f731</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5303b805d8a00909cea74c85cba6ca12</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ae3820824fa70431a197427dfc958473a</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5f2f3be64d1b9495c79be21140ac1d19</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a549ea0ae0fe2aebabc2bc1a15621013a</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a79683e412161862d51908e185ec5ad4c</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>substituteVariables</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a8b0750e7b48fb3d827c47a25d9e325cc</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ae315f45d67e5a1a4b24f208d1f4c0cba</anchor>
      <arglist>(const char *key) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a6dabb484127d85cccdfaff7b2ef4459c</anchor>
      <arglist>(const char *key) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getPerObjectConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a1bf7258d84cce254206f32094fefa502</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getPerObjectConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a116d909f35e76c0c4d6e1fcd1befb5e0</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>abf4c5be5fa71ec916ed155aa5b52f20d</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ad36758d56029e5b521777dffe8bb58b1</anchor>
      <arglist>(cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a73bc3d8ef753c6c9ff7ebe4a2fbaea02</anchor>
      <arglist>(cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ac0ed689e4fd44aa973c21c3de394dde7</anchor>
      <arglist>(cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a987fbe49a97573c60230026350483823</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a736b04a05e749d8a9ff10f4eb66efaae</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a441f9ebf1b39237f39c024286a9b35ce</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>af96b6bcbe2496086b6eee4fdeed820a0</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>aac5dd3c96f09f00b057a73bc459bdfa0</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a68319618fda99469c462b5caca2b3b86</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a83d6d08bbf3a464bdac58bf42635f731</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5303b805d8a00909cea74c85cba6ca12</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ae3820824fa70431a197427dfc958473a</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5f2f3be64d1b9495c79be21140ac1d19</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a549ea0ae0fe2aebabc2bc1a15621013a</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a79683e412161862d51908e185ec5ad4c</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>substituteVariables</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a8b0750e7b48fb3d827c47a25d9e325cc</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationEx</name>
    <filename>classomnetpp_1_1cConfigurationEx.html</filename>
    <base>omnetpp::cConfiguration</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a0be3648e0b171e7f54422285de56de55</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a60d380ced93606e65e42b6322061476f</anchor>
      <arglist>(const char *ignorableConfigKeys=nullptr) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a94024946850d2001fe2e7b79f7adbc7b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activateConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af1185cb1605442df97c49f88eb0c62b9</anchor>
      <arglist>(const char *configName, int runNumber=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getConfigDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a888e11442af0e5bad02000f7201b868b</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getBaseConfigs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a0f0a02419235b6be480cdee22f10031c</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigChain</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa19215ac9cdfda30a1f58e6b1459312b</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRunsInConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a2d7fa90b38e4c2164cce27280136c3f2</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>unrollConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6925b0187fcca4c3d72a967404ac7326</anchor>
      <arglist>(const char *configName, bool detailed=true) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getActiveConfigName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af105d456fb60f664ac61ec0ab4273284</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getActiveRunNumber</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a9f5ef4e1609bd8809efdb0972db731c1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a61d321738df4e97c2632702d8ffab976</anchor>
      <arglist>(const char *varname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIterationVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ad71e9d644249143283b9f5e0ad6dfc15</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getPredefinedVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a9af8044d51c5577db71fba9e560f1de1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariableDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a15170577741b227300b8369f21f5cefc</anchor>
      <arglist>(const char *varname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>afeb8b762ea924f12602d8ab469534f89</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a08b621dab5cee1562c573c775b848448</anchor>
      <arglist>(const char *pattern) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getParameterValue</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ad03d917e2c25c46f5e2c945707134115</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getParameterEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ab8e15daff2befe20171c09f5c94a3375</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getParameterKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa1817b5d26ec27bfd81a9810bd6327ab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6aad226a1ec0ac60e99a901153f0856d</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeySuffixes</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a8215424d5bee81265c09e6c247faa5b1</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a94024946850d2001fe2e7b79f7adbc7b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activateConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af1185cb1605442df97c49f88eb0c62b9</anchor>
      <arglist>(const char *configName, int runNumber=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getConfigDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a888e11442af0e5bad02000f7201b868b</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getBaseConfigs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a0f0a02419235b6be480cdee22f10031c</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigChain</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa19215ac9cdfda30a1f58e6b1459312b</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRunsInConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a2d7fa90b38e4c2164cce27280136c3f2</anchor>
      <arglist>(const char *configName) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>unrollConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6925b0187fcca4c3d72a967404ac7326</anchor>
      <arglist>(const char *configName, bool detailed=true) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getActiveConfigName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af105d456fb60f664ac61ec0ab4273284</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getActiveRunNumber</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a9f5ef4e1609bd8809efdb0972db731c1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a61d321738df4e97c2632702d8ffab976</anchor>
      <arglist>(const char *varname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIterationVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ad71e9d644249143283b9f5e0ad6dfc15</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getPredefinedVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a9af8044d51c5577db71fba9e560f1de1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariableDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a15170577741b227300b8369f21f5cefc</anchor>
      <arglist>(const char *varname) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>afeb8b762ea924f12602d8ab469534f89</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a08b621dab5cee1562c573c775b848448</anchor>
      <arglist>(const char *pattern) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getParameterValue</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ad03d917e2c25c46f5e2c945707134115</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getParameterEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ab8e15daff2befe20171c09f5c94a3375</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getParameterKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa1817b5d26ec27bfd81a9810bd6327ab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6aad226a1ec0ac60e99a901153f0856d</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeySuffixes</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a8215424d5bee81265c09e6c247faa5b1</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationReader</name>
    <filename>classomnetpp_1_1cConfigurationReader.html</filename>
    <class kind="class">omnetpp::cConfigurationReader::KeyValue</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cConfigurationReader</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a4f69d5972b6a651096671bbf054e471a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a0be3648e0b171e7f54422285de56de55</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getDefaultBaseDirectory</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a15fe6649f29d4fed1c0f600b9fcb7f95</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSections</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a4ab7d363b32339810f6f26e213d8286c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getSectionName</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a63d88143be7fbc19d4c1e367454c3919</anchor>
      <arglist>(int sectionId) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEntries</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a7bbf879671174d9581201b195cda916d</anchor>
      <arglist>(int sectionId) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a10295a1a6a743cb4ed58bb22c0d4884a</anchor>
      <arglist>(int sectionId, int entryId) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>afeb8b762ea924f12602d8ab469534f89</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cContextSwitcher</name>
    <filename>classomnetpp_1_1cContextSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextSwitcher.html</anchorfile>
      <anchor>a63164fafb28f3cd2a28d237c2eee1cdd</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextSwitcher.html</anchorfile>
      <anchor>a06bd75016e3c052f5f8b5e70ef2c511e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cContextTypeSwitcher</name>
    <filename>classomnetpp_1_1cContextTypeSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextTypeSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextTypeSwitcher.html</anchorfile>
      <anchor>a103cc8bb9449708b8c75e40f56667d28</anchor>
      <arglist>(int contexttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextTypeSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextTypeSwitcher.html</anchorfile>
      <anchor>ab4a637202a7ef423c186e962e9fb060e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCoroutine</name>
    <filename>classomnetpp_1_1cCoroutine.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5b906e3f42b51704bf60d4684a1afa87</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stackSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0611e7f68f7001071b85b2228864061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a21c72f456f83c6fb55d837863f955707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a228ebdbab08c537d22aa5354c34f6be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a17c95dc91fd0116b886ab0c511e13a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a741784522779ee0f7b6522f0abbe7446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0373cb8911ea30ed9eaf63f368020f55</anchor>
      <arglist>(unsigned totalStack, unsigned mainStack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>ae167b603e5e653a02cbed46c06d740b4</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5ddd5a77d3fff9b54c0e97160dd07351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0373cb8911ea30ed9eaf63f368020f55</anchor>
      <arglist>(unsigned totalStack, unsigned mainStack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>ae167b603e5e653a02cbed46c06d740b4</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5ddd5a77d3fff9b54c0e97160dd07351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5b906e3f42b51704bf60d4684a1afa87</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stackSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0611e7f68f7001071b85b2228864061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a21c72f456f83c6fb55d837863f955707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a228ebdbab08c537d22aa5354c34f6be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a17c95dc91fd0116b886ab0c511e13a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a741784522779ee0f7b6522f0abbe7446</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDatarateChannel</name>
    <filename>classomnetpp_1_1cDatarateChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ae7bb61b525d07321407c9fafd1ff13d5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af4048cd7af2b6ecde21c49df4261b3b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ac2550944936d4eec74acf4c7bd6d8903</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aa8a0a8c05944ac56975a6cec6c123607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a743590939177b6d5a7cf577d76a9af44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a0ccd8e37a615d569971c8b3c806cb346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a46920b55bf3b908934aca97b8af58573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a5c6f3094f42d1ad43b8eb5ec97d1122a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a32fae46a42035e2728e0b33397269cae</anchor>
      <arglist>(const char *parname) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a7a74c8d74ce75e855bb3e5f84e4dfaa1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a5905dd960cbdf26e57ce23c048fe078f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6bad2fcfc7d581fdbcb8b6b107c673f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDatarateChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4aedae32419b530b795fe3f8d475b8ea</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ae7bb61b525d07321407c9fafd1ff13d5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af4048cd7af2b6ecde21c49df4261b3b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ac2550944936d4eec74acf4c7bd6d8903</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aa8a0a8c05944ac56975a6cec6c123607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a743590939177b6d5a7cf577d76a9af44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a0ccd8e37a615d569971c8b3c806cb346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a46920b55bf3b908934aca97b8af58573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a5c6f3094f42d1ad43b8eb5ec97d1122a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDefaultList</name>
    <filename>classomnetpp_1_1cDefaultList.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a54ae8016bf4a8114be5879f44d218cf7</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a2312c9aa63bc47d1328b5af4fe30b8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a374a5b85e6fb5447896e57e7dc0ba048</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a7c1e25af71cdd045e17eddf5aade479e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aae7ee771e5ed3c49a8d79ec62c78bad3</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListSize</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>af772fd0a4bebe426b7c82d02e633678f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac2ada0ce144b32cba101f5fd0648290f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a562cff5ba3410d42195829c46234ea79</anchor>
      <arglist>(cOwnedObject *obj) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a84fddeafbc9ff5b424526424c1d43388</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aaf848f8ee6cda450b60b2452bd7815f3</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a84fddeafbc9ff5b424526424c1d43388</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aaf848f8ee6cda450b60b2452bd7815f3</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a54ae8016bf4a8114be5879f44d218cf7</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a2312c9aa63bc47d1328b5af4fe30b8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a374a5b85e6fb5447896e57e7dc0ba048</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a7c1e25af71cdd045e17eddf5aade479e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aae7ee771e5ed3c49a8d79ec62c78bad3</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListSize</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>af772fd0a4bebe426b7c82d02e633678f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac2ada0ce144b32cba101f5fd0648290f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a562cff5ba3410d42195829c46234ea79</anchor>
      <arglist>(cOwnedObject *obj) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDefaultMessagePrinter</name>
    <filename>classomnetpp_1_1cDefaultMessagePrinter.html</filename>
    <base>omnetpp::cMessagePrinter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getScoreFor</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>a0776375f7daeccbbd66e69590b578707</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printMessage</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>a9556f76ceb4f3755b64a34b190d409d7</anchor>
      <arglist>(std::ostream &amp;os, cMessage *msg) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDelayChannel</name>
    <filename>classomnetpp_1_1cDelayChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aa8a0a8c05944ac56975a6cec6c123607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a5c6f3094f42d1ad43b8eb5ec97d1122a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a32fae46a42035e2728e0b33397269cae</anchor>
      <arglist>(const char *parname) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDelayChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a3bfb565f78dbcffa848260be92578921</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDelayChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>afbe0e0c23f9e0902103658c0c6db4316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDelayChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a9bd41354488b8ff8a16143a12d4f3c4b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aa8a0a8c05944ac56975a6cec6c123607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a5c6f3094f42d1ad43b8eb5ec97d1122a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDeleteModuleException</name>
    <filename>classomnetpp_1_1cDeleteModuleException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a40184be3d400ded3d59af9d907032606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a1435bac08c8ae9177d6e601f62358f12</anchor>
      <arglist>(const cDeleteModuleException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDeleteModuleException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a5d185d0601166158b3cdbae4c85fc37d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>aae86d2a7de243494e1b1cf4f5110eede</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDensityEstBase</name>
    <filename>classomnetpp_1_1cDensityEstBase.html</filename>
    <base>omnetpp::cStdDev</base>
    <class kind="struct">omnetpp::cDensityEstBase::Cell</class>
    <member kind="enumeration">
      <type></type>
      <name>RangeMode</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a798fec219ba08f1be88b570a77d6e397</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a7686c70fff3baf338db294f2c34a86d5</anchor>
      <arglist>(const cDensityEstBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ae2fa20ec000f99f9951b054bf3cd23f2</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>aecf97a1953d79d74080a193fb98f6ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDensityEstBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ae353dbe632f920e832595021ddec98c2</anchor>
      <arglist>(const cDensityEstBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a899eb1710990800f57346e3684551770</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a9a422a27e38cec4084ee70beb2106131</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a83992b771810dde37d4bf2be7f160212</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a02528fb645607a2a89724dafe9e99562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a6effa79f054db6b9b16a6829a9f423dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransformed</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a68af660077c135c64a06d8460469d83c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a3515c08d770acdf521c5ccd0a83218ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a891b702f3b6ac52c18e91c029922c34a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a1231067bd52eb60c8a658d095e95cbf5</anchor>
      <arglist>(int k) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a006e50a208eb4eb3cde1ef400c469753</anchor>
      <arglist>(int k) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellPDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>af4003451d3a3d950e1819cea74c87f15</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUnderflowCell</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>aa8671865b383403fea20a39c14b74a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getOverflowCell</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ab56c4807fb1f1efcd91a827b5ec09251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell</type>
      <name>getCellInfo</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a439c4d0c8142e8bcbd7830f2e6426111</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>acd601a76bd91497ea445af9a1f2ed5c8</anchor>
      <arglist>(double x) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a368919e831789b456868c79c34021b8e</anchor>
      <arglist>(double x) const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ab4867766d76a441b3214c49ea3357387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ac15c88a0d16553813bbb36164eacf8e4</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a7686c70fff3baf338db294f2c34a86d5</anchor>
      <arglist>(const cDensityEstBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ae2fa20ec000f99f9951b054bf3cd23f2</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDensityEstBase</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>aecf97a1953d79d74080a193fb98f6ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDensityEstBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ae353dbe632f920e832595021ddec98c2</anchor>
      <arglist>(const cDensityEstBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a899eb1710990800f57346e3684551770</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a9a422a27e38cec4084ee70beb2106131</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a83992b771810dde37d4bf2be7f160212</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a02528fb645607a2a89724dafe9e99562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a6effa79f054db6b9b16a6829a9f423dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransformed</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a68af660077c135c64a06d8460469d83c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a3515c08d770acdf521c5ccd0a83218ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a891b702f3b6ac52c18e91c029922c34a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a1231067bd52eb60c8a658d095e95cbf5</anchor>
      <arglist>(int k) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a006e50a208eb4eb3cde1ef400c469753</anchor>
      <arglist>(int k) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellPDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>af4003451d3a3d950e1819cea74c87f15</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUnderflowCell</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>aa8671865b383403fea20a39c14b74a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getOverflowCell</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>ab56c4807fb1f1efcd91a827b5ec09251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell</type>
      <name>getCellInfo</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a439c4d0c8142e8bcbd7830f2e6426111</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>acd601a76bd91497ea445af9a1f2ed5c8</anchor>
      <arglist>(double x) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cDensityEstBase.html</anchorfile>
      <anchor>a368919e831789b456868c79c34021b8e</anchor>
      <arglist>(double x) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDisplayString</name>
    <filename>classomnetpp_1_1cDisplayString.html</filename>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac7188b7ded5cad79f25b99eb2eb8ebbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a42446be9b2f8ae8a22be2fab6dd6fdb8</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a76b866eb5152392258bfff1dcfb54070</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aebaf78e62ec56f567726b553f25a9997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a09f40799cbd4dc18e8d27818ab65cc48</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7c637cd3079e4b85ab4780d572e978c7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a61e3f9e408879932ec0de98f2740b6a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9fbbd810e16e381fbb9770919ec460d5</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a868491f1bb3085364a28cf3b8cc315f0</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aace213fe84c8e3ec070b21611eb1a27e</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acb21aadd8e682967e97b930388bc5bdd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a088e1e88814a5381cff3d0479dc85326</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a90ecd058ac7b6f14e8c8b720ffc279ed</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9861b82e81afbbc12710996f2b1135f6</anchor>
      <arglist>(const char *tagname, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ab617f89477d545643327a1dbd3b0ea50</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6365fce5a40a7a7c595772b7d229dcfc</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7f837c1d1ec4505c7d1cd663e918eee3</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a0b4bb03ac6a2090abdff1fdc21b1214f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6744c4bfd9dbfbca54328dc2d031b82b</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTagIndex</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a760aa05e7461865cec44054bea806507</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a811c08c01758b9c83fab75f1f64405e6</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6d6f89d54fb65e25a2dd7bc15ab4b80b</anchor>
      <arglist>(int tagindex, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>afb324bf6a9ae14fc7c3809759f9ca7a0</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac74e53edc2bfddf5483af77cf269a5d6</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a780fa758b55c3f637ef92c8e69e134cd</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac7188b7ded5cad79f25b99eb2eb8ebbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a42446be9b2f8ae8a22be2fab6dd6fdb8</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a76b866eb5152392258bfff1dcfb54070</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aebaf78e62ec56f567726b553f25a9997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a09f40799cbd4dc18e8d27818ab65cc48</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7c637cd3079e4b85ab4780d572e978c7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a61e3f9e408879932ec0de98f2740b6a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9fbbd810e16e381fbb9770919ec460d5</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a868491f1bb3085364a28cf3b8cc315f0</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aace213fe84c8e3ec070b21611eb1a27e</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acb21aadd8e682967e97b930388bc5bdd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a088e1e88814a5381cff3d0479dc85326</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a90ecd058ac7b6f14e8c8b720ffc279ed</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9861b82e81afbbc12710996f2b1135f6</anchor>
      <arglist>(const char *tagname, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ab617f89477d545643327a1dbd3b0ea50</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6365fce5a40a7a7c595772b7d229dcfc</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7f837c1d1ec4505c7d1cd663e918eee3</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a0b4bb03ac6a2090abdff1fdc21b1214f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6744c4bfd9dbfbca54328dc2d031b82b</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTagIndex</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a760aa05e7461865cec44054bea806507</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a811c08c01758b9c83fab75f1f64405e6</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6d6f89d54fb65e25a2dd7bc15ab4b80b</anchor>
      <arglist>(int tagindex, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>afb324bf6a9ae14fc7c3809759f9ca7a0</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac74e53edc2bfddf5483af77cf269a5d6</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a780fa758b55c3f637ef92c8e69e134cd</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDoubleHistogram</name>
    <filename>classomnetpp_1_1cDoubleHistogram.html</filename>
    <base>omnetpp::cHistogram</base>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a391fd4c5bc280b65ecf6351b97c5f952</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a2c264855fc4e8048acb259cacf62ce5a</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a8a2f78fff2f3e07f1a68965f907b76d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a81d9e6326d9b0ae61b5c2b26ce397d7d</anchor>
      <arglist>(const cDoubleHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a7a1d391d734d8ee9a9b58566be8029b3</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a391fd4c5bc280b65ecf6351b97c5f952</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a2c264855fc4e8048acb259cacf62ce5a</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a8a2f78fff2f3e07f1a68965f907b76d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a81d9e6326d9b0ae61b5c2b26ce397d7d</anchor>
      <arglist>(const cDoubleHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a7a1d391d734d8ee9a9b58566be8029b3</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDoubleParImpl</name>
    <filename>classomnetpp_1_1cDoubleParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a4c27602efd5eba459a70fe786e8ac6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a297d5f464e523042142a8db3c535a607</anchor>
      <arglist>(const cDoubleParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9395ae4676d6fa4452ee6d07e4380d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3256add573b422bb71dddc83ce95bf66</anchor>
      <arglist>(const cDoubleParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3028bc6a1730b381bf1714782e1fae9a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a4c27602efd5eba459a70fe786e8ac6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a297d5f464e523042142a8db3c535a607</anchor>
      <arglist>(const cDoubleParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9395ae4676d6fa4452ee6d07e4380d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3256add573b422bb71dddc83ce95bf66</anchor>
      <arglist>(const cDoubleParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3028bc6a1730b381bf1714782e1fae9a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression</name>
    <filename>classomnetpp_1_1cDynamicExpression.html</filename>
    <base>omnetpp::cExpression</base>
    <class kind="class">omnetpp::cDynamicExpression::Elem</class>
    <class kind="class">omnetpp::cDynamicExpression::Functor</class>
    <member kind="enumeration">
      <type></type>
      <name>OpType</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aa1aa1c6a8f3bbed5b167bc2d4511b969</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac53061fc453bee6909ee01f4647b7588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab1afc3e7dbea916957c62f3dc5e24b91</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a9f789279e8ef6318ba18f0cbb75a5b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDynamicExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a03fc282f6ded53ded9abfe2812695b7b</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDynamicExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a18abeeb2e032d08e611d1b05f90b59c4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>afcca117215da32234b4907136ed775bd</anchor>
      <arglist>(Elem e[], int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aa8e1a5b855a40f5cb21fe8cd709acf86</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a89b79bcb6424959b7789e2a1c5164794</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aeab2c97cbae747ba01a11f3075f926de</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac8895c7fba469e99b5ffb1f7cd91992e</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab62ceab3f30c83406ab6e89c25e8b35c</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a696ce733c5444eeaf765ce4b78a6af90</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac53061fc453bee6909ee01f4647b7588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab1afc3e7dbea916957c62f3dc5e24b91</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a9f789279e8ef6318ba18f0cbb75a5b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDynamicExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a03fc282f6ded53ded9abfe2812695b7b</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDynamicExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a18abeeb2e032d08e611d1b05f90b59c4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>afcca117215da32234b4907136ed775bd</anchor>
      <arglist>(Elem e[], int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aa8e1a5b855a40f5cb21fe8cd709acf86</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a89b79bcb6424959b7789e2a1c5164794</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aeab2c97cbae747ba01a11f3075f926de</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac8895c7fba469e99b5ffb1f7cd91992e</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab62ceab3f30c83406ab6e89c25e8b35c</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a696ce733c5444eeaf765ce4b78a6af90</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab514a16ecd3b6571a39abfdb84f6fd36</anchor>
      <arglist>(const cExpression *other) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>acd305132a0e1c163ea11b65a7492619f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ae3daddde44f76441b0ba3df2a23645ee</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a476884717dcda3b74928f6e98bd46b88</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a44cc255a4b41c3baea2dad147e288a78</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cDensityEstBase::Cell</name>
    <filename>structomnetpp_1_1cDensityEstBase_1_1Cell.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEnum</name>
    <filename>classomnetpp_1_1cEnum.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a561148a563851d3aaf7f3f6c4a52b9b1</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af66cbac13dd29d4ce4df52e8edd0ac36</anchor>
      <arglist>(const char *name, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a4287a073832adaf46badca65ef58fb7b</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a6315b0752f8d7926dc3e58635898f21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a174cf2d40af7c48fdeff27801623ab91</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnum *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>abc707625422059a95c240c39705adbbd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a27d455ca85908877759d556c6597bc8d</anchor>
      <arglist>(int value, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bulkInsert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1d160ee27f9fb163c0af493496c03ab6</anchor>
      <arglist>(const char *name1,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringFor</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af14ab71a2f175b24c90d99bcad416b98</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a3e6b92b9cd0febe41797e342ef6e0b7c</anchor>
      <arglist>(const char *name, int fallback=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a9491099daedd8826b5aa9068f432a6c0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getNameValueMap</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>aaa188c03fc6859d14b3022c0eb2c6db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ad8c4fd4a19b9e3c90d9257d7ebd9dc64</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af62fcf61aedfeb3b5bb65ff8f2a6e7b0</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a561148a563851d3aaf7f3f6c4a52b9b1</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af66cbac13dd29d4ce4df52e8edd0ac36</anchor>
      <arglist>(const char *name, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a4287a073832adaf46badca65ef58fb7b</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a6315b0752f8d7926dc3e58635898f21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a174cf2d40af7c48fdeff27801623ab91</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnum *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>abc707625422059a95c240c39705adbbd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a27d455ca85908877759d556c6597bc8d</anchor>
      <arglist>(int value, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bulkInsert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1d160ee27f9fb163c0af493496c03ab6</anchor>
      <arglist>(const char *name1,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringFor</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af14ab71a2f175b24c90d99bcad416b98</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a3e6b92b9cd0febe41797e342ef6e0b7c</anchor>
      <arglist>(const char *name, int fallback=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a9491099daedd8826b5aa9068f432a6c0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getNameValueMap</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>aaa188c03fc6859d14b3022c0eb2c6db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ad8c4fd4a19b9e3c90d9257d7ebd9dc64</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af62fcf61aedfeb3b5bb65ff8f2a6e7b0</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEnvir</name>
    <filename>classomnetpp_1_1cEnvir.html</filename>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad5b6c9aca7cccab7ff739f23b9a5eafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a205ff0da6955bdba3ea794f9c72f9c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0115bf48e9f5530f0983cdead07d3764</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentInitBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae58d654d230b6d864cf7dfe63d6175f4</anchor>
      <arglist>(cComponent *component, int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a19247e2b26f41e9cc1eba80a2d127b09</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSent_OBSOLETE</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a58d95df3480a9bbb8fbe9dcaf26d2f70</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af181f35b3bdb5b8039ef0f3537a9f421</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2fc540cb60ff2d27024df373806d7f1e</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5bc17b175a83b8ce66b185d7ea058954</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a28213e378a39f302257005a8bc0dac44</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a291c3abd9879995b251048b7b05800c6</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a72c470ebad5f30e14eba311ec3fdf54a</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7402a31fef42ae7e01bc48c8614ae69</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>acf785aa6a32b53dbf160a26164f908aa</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5fdaaeefd778192d21ba7c57b908ea1f</anchor>
      <arglist>(cMessage *msg, cMessage *clone)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adad7f5e9833eb9e960c1b4204500a286</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aaad45e02feb9927b4b8fec863eeaa154</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a921dc95d8cebbdff765fa5372c6e3d7c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a356a1fa0096b200dee2a56b77071b466</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3b6427ab1a8c98dc8ebaa42a3ba9fe1f</anchor>
      <arglist>(cModule *newmodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af76c25b86760ac92290e8bda37f4c9a9</anchor>
      <arglist>(cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a98d871412024c715efbad7c7bad848f8</anchor>
      <arglist>(cGate *newgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6beea8772ffc08eb3b89d227c389d62f</anchor>
      <arglist>(cGate *gate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abefe7cb988c214c468ae6ffd413d254b</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a79349c08f37502d5080b154dcce3f183</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aade0907fecc282c852954825b98f7387</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f6184b69af711fbd8b3c5527ab57fd3</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a21a2a2167ff1a5f350f686242906066b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventClassName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4cbbd8416e8d13df73d93851b13eee6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getCurrentEventModule</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3dd07d1a10dafa1a4ab6ceb86c235db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2b11c1e456beb8324eec7795ccf5738b</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae8b0c547a791ff52285a7c7d1da456fb</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08d934443f2d8c0f00469e61125bf53b</anchor>
      <arglist>(cPar *parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ab9dc76891ba4db0c3aca3ca6fe8ab8b1</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad24ee6cee9afef58728be09fcafaa323</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad9fd63316e364a1f8787134282cb748c</anchor>
      <arglist>(const char *content, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa95d6fbdcb2424087a88c7e9d74407af</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a78ea72a94ab03ed4cf7cd5fbe93f5c5e</anchor>
      <arglist>(const char *content)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f5476a6759b90e53c8d23d7eaaf2038</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0686a65f9b012ea6d56c880a170b64d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a01cdc3cef0589ce4ceadddca5c76c5e3</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a1ced2dca00249df63d6a184d711600f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfigurationEx *</type>
      <name>getConfigEx</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad44c47726e7e8487a0e5dff0d66ce2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3912720b86980f5beb0972173aefab6f</anchor>
      <arglist>(const char *fileName, cComponentType *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abe80f2ab68e7eb5ca1579058a7250785</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoggingEnabled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4af51c209eea41a09ae7d711a3e7c24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2073e9cabd31009758e5b8377726e992</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abcb58867fe98018b3155c3f5aa22203c</anchor>
      <arglist>(cComponent *component, const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printfmsg</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac8c95ae05234fcbb62033972fcdb0080</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac56c39b2f2c905218117cba57d17c6ca</anchor>
      <arglist>(cLogEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a8b3071121fd2ca7ed57cd0296e2e7f00</anchor>
      <arglist>(const char *prompt, const char *defaultreply=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac849e4b392da38a5d8323c77b5baa771</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6ba40e23c72bd7cfbfa4429cec13a3a2</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a569accfb1d607678fdcdfd840f91538d</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af5ef5b4f034266a532a5f1f9c2c3d87b</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a02c87433d6d5da29341ad7e06ea822e4</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08a55d093b78085ee7bd33fb2a3f1bc5</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7d5a4007579fbaea8cd60b81b8285651</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a06dce55e1809a93b1559cea0c4bf16ad</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>afce9d5f303860a7eedd21682d3bc9f54</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad609f89604f5fa30f794266193d21ecc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae1d531af427653670aa21be55492b0a9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa8a93059999a0d664065475d354cc736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a55c1024cf95ca111eba73c77bf051377</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attachDebugger</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af8002456500c6cb7501c720039ba4846</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a715f6c80da5fc9cd818f049df943ba87</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a586810ea68f851727a476a6525f1237c</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad5b6c9aca7cccab7ff739f23b9a5eafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a205ff0da6955bdba3ea794f9c72f9c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0115bf48e9f5530f0983cdead07d3764</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentInitBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae58d654d230b6d864cf7dfe63d6175f4</anchor>
      <arglist>(cComponent *component, int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a19247e2b26f41e9cc1eba80a2d127b09</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSent_OBSOLETE</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a58d95df3480a9bbb8fbe9dcaf26d2f70</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af181f35b3bdb5b8039ef0f3537a9f421</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2fc540cb60ff2d27024df373806d7f1e</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5bc17b175a83b8ce66b185d7ea058954</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a28213e378a39f302257005a8bc0dac44</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a291c3abd9879995b251048b7b05800c6</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a72c470ebad5f30e14eba311ec3fdf54a</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7402a31fef42ae7e01bc48c8614ae69</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>acf785aa6a32b53dbf160a26164f908aa</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5fdaaeefd778192d21ba7c57b908ea1f</anchor>
      <arglist>(cMessage *msg, cMessage *clone)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adad7f5e9833eb9e960c1b4204500a286</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aaad45e02feb9927b4b8fec863eeaa154</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a921dc95d8cebbdff765fa5372c6e3d7c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a356a1fa0096b200dee2a56b77071b466</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3b6427ab1a8c98dc8ebaa42a3ba9fe1f</anchor>
      <arglist>(cModule *newmodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af76c25b86760ac92290e8bda37f4c9a9</anchor>
      <arglist>(cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a98d871412024c715efbad7c7bad848f8</anchor>
      <arglist>(cGate *newgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6beea8772ffc08eb3b89d227c389d62f</anchor>
      <arglist>(cGate *gate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abefe7cb988c214c468ae6ffd413d254b</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a79349c08f37502d5080b154dcce3f183</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aade0907fecc282c852954825b98f7387</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f6184b69af711fbd8b3c5527ab57fd3</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a21a2a2167ff1a5f350f686242906066b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventClassName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4cbbd8416e8d13df73d93851b13eee6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getCurrentEventModule</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3dd07d1a10dafa1a4ab6ceb86c235db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2b11c1e456beb8324eec7795ccf5738b</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae8b0c547a791ff52285a7c7d1da456fb</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08d934443f2d8c0f00469e61125bf53b</anchor>
      <arglist>(cPar *parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ab9dc76891ba4db0c3aca3ca6fe8ab8b1</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad24ee6cee9afef58728be09fcafaa323</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad9fd63316e364a1f8787134282cb748c</anchor>
      <arglist>(const char *content, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa95d6fbdcb2424087a88c7e9d74407af</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a78ea72a94ab03ed4cf7cd5fbe93f5c5e</anchor>
      <arglist>(const char *content)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f5476a6759b90e53c8d23d7eaaf2038</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0686a65f9b012ea6d56c880a170b64d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a01cdc3cef0589ce4ceadddca5c76c5e3</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a1ced2dca00249df63d6a184d711600f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfigurationEx *</type>
      <name>getConfigEx</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad44c47726e7e8487a0e5dff0d66ce2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3912720b86980f5beb0972173aefab6f</anchor>
      <arglist>(const char *fileName, cComponentType *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abe80f2ab68e7eb5ca1579058a7250785</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoggingEnabled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4af51c209eea41a09ae7d711a3e7c24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2073e9cabd31009758e5b8377726e992</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abcb58867fe98018b3155c3f5aa22203c</anchor>
      <arglist>(cComponent *component, const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printfmsg</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac8c95ae05234fcbb62033972fcdb0080</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac56c39b2f2c905218117cba57d17c6ca</anchor>
      <arglist>(cLogEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a8b3071121fd2ca7ed57cd0296e2e7f00</anchor>
      <arglist>(const char *prompt, const char *defaultreply=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac849e4b392da38a5d8323c77b5baa771</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6ba40e23c72bd7cfbfa4429cec13a3a2</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a569accfb1d607678fdcdfd840f91538d</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af5ef5b4f034266a532a5f1f9c2c3d87b</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a02c87433d6d5da29341ad7e06ea822e4</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08a55d093b78085ee7bd33fb2a3f1bc5</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7d5a4007579fbaea8cd60b81b8285651</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a06dce55e1809a93b1559cea0c4bf16ad</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>afce9d5f303860a7eedd21682d3bc9f54</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad609f89604f5fa30f794266193d21ecc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae1d531af427653670aa21be55492b0a9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa8a93059999a0d664065475d354cc736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a55c1024cf95ca111eba73c77bf051377</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attachDebugger</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af8002456500c6cb7501c720039ba4846</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a715f6c80da5fc9cd818f049df943ba87</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a586810ea68f851727a476a6525f1237c</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cErlang</name>
    <filename>classomnetpp_1_1cErlang.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cErlang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>ade8f2ac6c3a7c5c4b3af50439b964043</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cErlang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>ade8f2ac6c3a7c5c4b3af50439b964043</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cErrorMessages</name>
    <filename>classomnetpp_1_1cErrorMessages.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEvent</name>
    <filename>classomnetpp_1_1cEvent.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a2b9d1f17c1ae693396aabfe6671806eb</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>aef9c4ead911212e1cb4e0b58d601d1da</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4ad62a2a6e4cb248830b54ab8828dd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac42c71d590531b0c45bc1913d198a777</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a8dba1df1fcd6c78e83a50f3568e3457e</anchor>
      <arglist>() const  override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a237354dd9d4cbbf541853d92c3966bb4</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>af1722b1b9451b4afe25d1e703d32ac53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acbec73e4cdd0baf14d56501c6633a998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4f80baa2c80a4007bece8a25244ccd5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cObject *</type>
      <name>getTargetObject</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a85594ccf384bb4ed8ccf8e432d08ef16</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a8e717c467d9e3b95691f2b9a47ac69cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStale</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad82ee20534e197adf447761720e437fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad202bdf85b060603989ff7dcb1be7072</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a2b9d1f17c1ae693396aabfe6671806eb</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>aef9c4ead911212e1cb4e0b58d601d1da</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4ad62a2a6e4cb248830b54ab8828dd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac42c71d590531b0c45bc1913d198a777</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a8dba1df1fcd6c78e83a50f3568e3457e</anchor>
      <arglist>() const  override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a237354dd9d4cbbf541853d92c3966bb4</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>af1722b1b9451b4afe25d1e703d32ac53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acbec73e4cdd0baf14d56501c6633a998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4f80baa2c80a4007bece8a25244ccd5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cObject *</type>
      <name>getTargetObject</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a85594ccf384bb4ed8ccf8e432d08ef16</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a8e717c467d9e3b95691f2b9a47ac69cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStale</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad82ee20534e197adf447761720e437fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad202bdf85b060603989ff7dcb1be7072</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEventHeap</name>
    <filename>classomnetpp_1_1cEventHeap.html</filename>
    <base>omnetpp::cFutureEventSet</base>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3fcb274aa6a7c51d00d8d7b13a8a04e1</anchor>
      <arglist>(const cEventHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab27ce4acae1932a62bbc740b06590ca6</anchor>
      <arglist>(const char *name=nullptr, int initialCapacity=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a2050a48dddcbd56f2f5308e756d7e81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEventHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a9bc95142da08a087ad47bc7e30307f56</anchor>
      <arglist>(const cEventHeap &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEventHeap *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a343d8536d9bc738df2affa06a397ce57</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a019c2c119da10ac58f4b9e318828ddf5</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a0cd9ec59fc6c5402adedb9d362d3e40f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3b84f23f4165400a51f1dabec5f78df6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a6d8a901a21ae4ed70d0039b82fa7064e</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8c2baf5843b0316eff31370cf6a8e807</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>aaa78943d38ef285d8acc556729399706</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac53433d6457b0151fdf762eb854ff5d6</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>accfc4d7e750a2b481cc7ecd8ef639549</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab842095dd9236621ea6e6b0fe92040ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3fcb274aa6a7c51d00d8d7b13a8a04e1</anchor>
      <arglist>(const cEventHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab27ce4acae1932a62bbc740b06590ca6</anchor>
      <arglist>(const char *name=nullptr, int initialCapacity=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a2050a48dddcbd56f2f5308e756d7e81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEventHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a9bc95142da08a087ad47bc7e30307f56</anchor>
      <arglist>(const cEventHeap &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEventHeap *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a343d8536d9bc738df2affa06a397ce57</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a019c2c119da10ac58f4b9e318828ddf5</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a0cd9ec59fc6c5402adedb9d362d3e40f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3b84f23f4165400a51f1dabec5f78df6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a6d8a901a21ae4ed70d0039b82fa7064e</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8c2baf5843b0316eff31370cf6a8e807</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>aaa78943d38ef285d8acc556729399706</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac53433d6457b0151fdf762eb854ff5d6</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>accfc4d7e750a2b481cc7ecd8ef639549</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab842095dd9236621ea6e6b0fe92040ac</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cException</name>
    <filename>classomnetpp_1_1cException.html</filename>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a8e6a6d3d4070b34d9739e4ae7aca065a</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af5adb5ad9a1df543cb457d61897c5130</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a951d151b4bbed3d0272851c60bd26fa0</anchor>
      <arglist>(const cObject *where, OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acac45118142c9048c573d89c5858af89</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a678befe867e9ff64a80213d2ce3ee8b5</anchor>
      <arglist>(const cException &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a17c1f6fc0a638e74671391b83106f968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a82013bc9da99df8a5f15f1d962a8c173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5bbf2a5832dde65d55f124195cd1f5ff</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28fd871d32d23af162b862a4d48c2bac</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab9d44f6f3e54c6fbca9c9abf05822857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab45a7e16f7f79c97694ee06c0c0fd618</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acbaaf3d1d8a8d9a26f8a858f06563843</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFormattedMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af592e0bd44a4d3d16f2d0324ed9a3bca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a9bb8691286e754243925ca8dab62a500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a3d80cb70ea3be186b5d06a2a32172a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimtime</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a72d5454145ac7612dcf5ed319e8e7a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContext</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28c443c04f498f4b498d99c4ba3a1341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextClassName</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a2735efe8a9dcc95c1c58edf5b0e8a756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextFullPath</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ae608b977e75acfe529424d55086bc2c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentId</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a6cad94da3a9d74abccb6f58636d64cd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentKind</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aa41c25cc284f88cbe75388e2f26e8a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a6756bccdf3947debfc1453ea86829da6</anchor>
      <arglist>(const cObject *obj, OppErrorCode errorcode, const char *fmt, va_list va)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a8e6a6d3d4070b34d9739e4ae7aca065a</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af5adb5ad9a1df543cb457d61897c5130</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a951d151b4bbed3d0272851c60bd26fa0</anchor>
      <arglist>(const cObject *where, OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acac45118142c9048c573d89c5858af89</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a678befe867e9ff64a80213d2ce3ee8b5</anchor>
      <arglist>(const cException &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a17c1f6fc0a638e74671391b83106f968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a82013bc9da99df8a5f15f1d962a8c173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5bbf2a5832dde65d55f124195cd1f5ff</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28fd871d32d23af162b862a4d48c2bac</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab9d44f6f3e54c6fbca9c9abf05822857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab45a7e16f7f79c97694ee06c0c0fd618</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acbaaf3d1d8a8d9a26f8a858f06563843</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFormattedMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af592e0bd44a4d3d16f2d0324ed9a3bca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a9bb8691286e754243925ca8dab62a500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a3d80cb70ea3be186b5d06a2a32172a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimtime</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a72d5454145ac7612dcf5ed319e8e7a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContext</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28c443c04f498f4b498d99c4ba3a1341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextClassName</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a2735efe8a9dcc95c1c58edf5b0e8a756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextFullPath</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ae608b977e75acfe529424d55086bc2c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentId</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a6cad94da3a9d74abccb6f58636d64cd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentKind</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aa41c25cc284f88cbe75388e2f26e8a54</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cExponential</name>
    <filename>classomnetpp_1_1cExponential.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cExponential *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a0658c51d2925e49b1c479750b7d11835</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExponential *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a0658c51d2925e49b1c479750b7d11835</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cExpression</name>
    <filename>classomnetpp_1_1cExpression.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab0743b489b94eb9a75cc6bbfcceda54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a1fee568287f02b558e551764b17ece6f</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a6961bae2edda5bcff8293ed3e032693f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad8e18f35306bb42c1b4609fbd936f865</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ade3395e0808683c0451996b437f7d504</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a4a612bdc554295f9fb4133c46efce424</anchor>
      <arglist>(cComponent *context=nullptr) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a85bbc6e43cfae86e98ebd90801c078f3</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad57cb7def7f1df66c4a03d1b6fb5a4cf</anchor>
      <arglist>(cComponent *context=nullptr, const char *expectedUnit=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a7a8857c44fc9e34a7de9507864c3f075</anchor>
      <arglist>(cComponent *context=nullptr, const char *expectedUnit=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5a08aa625086dff0935b06d80b6f6cb5</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a3190f29a4459be705c411e4b3c9575f5</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>af0ecabdaf7b411d60d131bbeda4ba55b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad9bf9348bcad332265cd01b157bc0504</anchor>
      <arglist>(const cExpression *other) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a301a9252effb8e15d2fc02d06e88dc48</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a313b6026c814d0e85f129c02e35b61d2</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab0743b489b94eb9a75cc6bbfcceda54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a1fee568287f02b558e551764b17ece6f</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a6961bae2edda5bcff8293ed3e032693f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad8e18f35306bb42c1b4609fbd936f865</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ade3395e0808683c0451996b437f7d504</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a4a612bdc554295f9fb4133c46efce424</anchor>
      <arglist>(cComponent *context=nullptr) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a85bbc6e43cfae86e98ebd90801c078f3</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad57cb7def7f1df66c4a03d1b6fb5a4cf</anchor>
      <arglist>(cComponent *context=nullptr, const char *expectedUnit=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a7a8857c44fc9e34a7de9507864c3f075</anchor>
      <arglist>(cComponent *context=nullptr, const char *expectedUnit=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5a08aa625086dff0935b06d80b6f6cb5</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a3190f29a4459be705c411e4b3c9575f5</anchor>
      <arglist>(cComponent *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>af0ecabdaf7b411d60d131bbeda4ba55b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad9bf9348bcad332265cd01b157bc0504</anchor>
      <arglist>(const cExpression *other) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a301a9252effb8e15d2fc02d06e88dc48</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a313b6026c814d0e85f129c02e35b61d2</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFigure</name>
    <filename>classomnetpp_1_1cFigure.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="struct">omnetpp::cFigure::Color</class>
    <class kind="struct">omnetpp::cFigure::Font</class>
    <class kind="class">omnetpp::cFigure::Pixmap</class>
    <class kind="struct">omnetpp::cFigure::Point</class>
    <class kind="struct">omnetpp::cFigure::Rectangle</class>
    <class kind="struct">omnetpp::cFigure::RGBA</class>
    <class kind="struct">omnetpp::cFigure::Transform</class>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8e99d8c5e498daaffe01f4b81f7158e5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4d5d77ee90549b1652dc3bff26361519</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>afd9076bd218c8d583093778cc71887b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFigure &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a9584e82d7c92417d54ce04a67dd08e</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aef3f18c1d9c4aa2d5f122b70c47e6bbd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a7dea697b9afe117d9a1bb72b50a37afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6e38994af1981188081d0a96c5628aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aff6547edc5bdc358ad27566775035b3c</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6e0e1a1c96cc0489c14feefac5007fee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a06c5cba18a2af9d40679c4b6207d079d</anchor>
      <arglist>(const Transform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2b170213c6f9436b46c163f271c39724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aefcd02e43ea49c15d3123f5e00d77e36</anchor>
      <arglist>(const char *tags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getParentFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abbe354b3a3d07435a33dc44f02e61165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3e2334a61989a6153b17e39f6fbbbcb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a739e5f130285fdd398872519b804946c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a69acca23f238784af127d0ac12c441dc</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a1045a4885352396c819f444b0a48ce49</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2e50aed153af7af200a334412ac0e737</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3e5c0b214a6a15f39c6804da7ffa287f</anchor>
      <arglist>(cFigure *figure) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a571449a74e69dc5003377db5f1c956a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8f9d653fba1375fb483e76cff6dd1485</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acfb80671feb90c5919e1dd3bd347d8ff</anchor>
      <arglist>(const char *path) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFromParent</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2c6b55308e0b5275ab68eee6667bc352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aea4ddae576392a7b25628f42311feac4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a0ffc8ea87ad0bd9ca7019879dc9aac54</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e26f9434d4ad9ba38af30fcd405f4f5</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abdaf356c1a86f324dee1ff9ba1dc3ed8</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseToTop</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af8eca5416a69dc9851b27d2b91a10cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerToBottom</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a552b85c68bbe6557397f19cc56453a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dupTree</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a78187001255862339353da1569f47a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a80c8ea86138165ba0ba882cdf14ae304</anchor>
      <arglist>(double dx, double dy)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9bbfc49189ad8062f2a75959ddef9256</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acaa004e5782a82fe9178607edcf51c4d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8e99d8c5e498daaffe01f4b81f7158e5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4d5d77ee90549b1652dc3bff26361519</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>afd9076bd218c8d583093778cc71887b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFigure &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a9584e82d7c92417d54ce04a67dd08e</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aef3f18c1d9c4aa2d5f122b70c47e6bbd</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a7dea697b9afe117d9a1bb72b50a37afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6e38994af1981188081d0a96c5628aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aff6547edc5bdc358ad27566775035b3c</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6e0e1a1c96cc0489c14feefac5007fee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a06c5cba18a2af9d40679c4b6207d079d</anchor>
      <arglist>(const Transform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2b170213c6f9436b46c163f271c39724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aefcd02e43ea49c15d3123f5e00d77e36</anchor>
      <arglist>(const char *tags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getParentFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abbe354b3a3d07435a33dc44f02e61165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3e2334a61989a6153b17e39f6fbbbcb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a739e5f130285fdd398872519b804946c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a69acca23f238784af127d0ac12c441dc</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a1045a4885352396c819f444b0a48ce49</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2e50aed153af7af200a334412ac0e737</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3e5c0b214a6a15f39c6804da7ffa287f</anchor>
      <arglist>(cFigure *figure) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a571449a74e69dc5003377db5f1c956a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8f9d653fba1375fb483e76cff6dd1485</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acfb80671feb90c5919e1dd3bd347d8ff</anchor>
      <arglist>(const char *path) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFromParent</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2c6b55308e0b5275ab68eee6667bc352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aea4ddae576392a7b25628f42311feac4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a0ffc8ea87ad0bd9ca7019879dc9aac54</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e26f9434d4ad9ba38af30fcd405f4f5</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abdaf356c1a86f324dee1ff9ba1dc3ed8</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseToTop</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af8eca5416a69dc9851b27d2b91a10cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerToBottom</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a552b85c68bbe6557397f19cc56453a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dupTree</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a78187001255862339353da1569f47a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a80c8ea86138165ba0ba882cdf14ae304</anchor>
      <arglist>(double dx, double dy)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9bbfc49189ad8062f2a75959ddef9256</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acaa004e5782a82fe9178607edcf51c4d</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFingerprintCalculator</name>
    <filename>classomnetpp_1_1cFingerprintCalculator.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cFingerprintCalculator.html</anchorfile>
      <anchor>a997d0fe4121d4c64c7867208df6eb8ec</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cFingerprintCalculator.html</anchorfile>
      <anchor>a90caa4746f966edf6439042d8f640c3b</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFSM</name>
    <filename>classomnetpp_1_1cFSM.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>abac5843e392344f2b8bd4746827a320a</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ad402ac8e0390e96fdbd9c47643d74b31</anchor>
      <arglist>(const cFSM &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af3fc68ab0ad078d0581d3d0e8bec4fb6</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFSM *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af34ea22a1f3975217007905ecdff69ed</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af63e8c613d15b5563db86658d38ddab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStateName</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a687035561b9475447a4513072a7495a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInTransientState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a92e8dfbd029bea95d2e2d218da7b8a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a9eeff0498e055ca73441c5f3f16dd0b9</anchor>
      <arglist>(int state, const char *stateName=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>abac5843e392344f2b8bd4746827a320a</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ad402ac8e0390e96fdbd9c47643d74b31</anchor>
      <arglist>(const cFSM &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af3fc68ab0ad078d0581d3d0e8bec4fb6</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFSM *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af34ea22a1f3975217007905ecdff69ed</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af63e8c613d15b5563db86658d38ddab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStateName</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a687035561b9475447a4513072a7495a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInTransientState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a92e8dfbd029bea95d2e2d218da7b8a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a9eeff0498e055ca73441c5f3f16dd0b9</anchor>
      <arglist>(int state, const char *stateName=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFutureEventSet</name>
    <filename>classomnetpp_1_1cFutureEventSet.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ac028189fb0b4ce4a6fca7125855dc0a5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>abe567c3bd432cfb0983c232078ec911c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a118a2f9bc53702da286ef30fea7eb5eb</anchor>
      <arglist>(const cFutureEventSet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ab32ac46be50776254b1127194310eca8</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a7b0b39cb950e24f3823ab2c37819b6a1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad4f19c1ff184440ca5f1e7adc94b0c2a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad5c78b1b28ba67ee6bb3f2692d0be0a5</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad0d566b9654b5052f913a124845c6433</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a7f1be1aae17103e3e53a3b7cdb57a5b1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a58706f6b2e389174152684b30122bd9f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ae2300fa37846b42a05eb401083d5ee08</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a83961e591ab5cb6a1373c5eb28d735f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ac028189fb0b4ce4a6fca7125855dc0a5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>abe567c3bd432cfb0983c232078ec911c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a118a2f9bc53702da286ef30fea7eb5eb</anchor>
      <arglist>(const cFutureEventSet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ab32ac46be50776254b1127194310eca8</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a7b0b39cb950e24f3823ab2c37819b6a1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad4f19c1ff184440ca5f1e7adc94b0c2a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad5c78b1b28ba67ee6bb3f2692d0be0a5</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad0d566b9654b5052f913a124845c6433</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a7f1be1aae17103e3e53a3b7cdb57a5b1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a58706f6b2e389174152684b30122bd9f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ae2300fa37846b42a05eb401083d5ee08</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a83961e591ab5cb6a1373c5eb28d735f2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGamma</name>
    <filename>classomnetpp_1_1cGamma.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGamma *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a03da1a6bb50c3a1c371b40f498bd392c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGamma *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a03da1a6bb50c3a1c371b40f498bd392c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGate</name>
    <filename>classomnetpp_1_1cGate.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a6414f30b8d52995e4efda7b7caf746df</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>abff82ccf31f4fffe8dda8efb2b380f3a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>connectTo</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a2ccf25d786300fd3514ecd700c362514</anchor>
      <arglist>(cGate *gate, cChannel *channel=nullptr, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a960705de531a20389fb29928d43258c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>reconnectWith</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ade2a0c93a66e514fe7a6ebcc631bed1f</anchor>
      <arglist>(cChannel *channel, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a9e3529d9cd372a21c53895a916712762</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a86c95bd3e6789a91503b70b3acecb66e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aed0af0600d5e1da9d81e8d52d3e444da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aece09f68af428e9b262ffb76b640ee6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPreviousGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a77e92339332cca84b80d3e79830481df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getNextGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a03438d6cb4ec2a861c729f82335f7e89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa17ba685a1e498ba22647e91fd6bcaf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathStartGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5b6bfa5cda168821e95a11397610496f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathEndGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a64b67f6a8857e2d7e8326f8aafc7df80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathContains</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a7f7d353255f15867f6c98a7a1d87d243</anchor>
      <arglist>(cModule *module, int gateId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a22a38f2ea3c0b00d96f6f99db4e6c168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a56ca27fb38ca92ff6a93c8955ee0ef11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a180fa55a4bf36580963bed9e3e09c227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathOK</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a069277ac44de9fa0e5586d38565fab66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a874774b4a34846e019c7341998c26e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5fca7be71b1a08f7272233e8b96c2591</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>abff82ccf31f4fffe8dda8efb2b380f3a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>connectTo</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a2ccf25d786300fd3514ecd700c362514</anchor>
      <arglist>(cGate *gate, cChannel *channel=nullptr, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a960705de531a20389fb29928d43258c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>reconnectWith</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ade2a0c93a66e514fe7a6ebcc631bed1f</anchor>
      <arglist>(cChannel *channel, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>adbf3252abddd72f9a5bb3c3f8624e253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getNameSuffix</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab2ccd09f194e6d86017b0f447f08b408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a29282c3089315ea720b8fdddac7dc746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>afc641171fb699c1116758176cd3bf4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getOwnerModule</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a402e06faed2f4127c521db0e2b00d03e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a7dea697b9afe117d9a1bb72b50a37afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaseId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a508a49a5a1d64ee6ad40ea5b1f57045c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5775df451a32aa32fab7fac48a1c1e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a349f844a931904d2219c1ff9bbbff85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a22afef0f1f4cc850559c2737bc43d4fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeliverOnReceptionStart</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a06104078027d23c9b2c25e71702bbc70</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDeliverOnReceptionStart</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab972670969232cac2975464515fc6228</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a9e3529d9cd372a21c53895a916712762</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a86c95bd3e6789a91503b70b3acecb66e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aed0af0600d5e1da9d81e8d52d3e444da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aece09f68af428e9b262ffb76b640ee6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPreviousGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a77e92339332cca84b80d3e79830481df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getNextGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a03438d6cb4ec2a861c729f82335f7e89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa17ba685a1e498ba22647e91fd6bcaf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathStartGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5b6bfa5cda168821e95a11397610496f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathEndGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a64b67f6a8857e2d7e8326f8aafc7df80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathContains</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a7f7d353255f15867f6c98a7a1d87d243</anchor>
      <arglist>(cModule *module, int gateId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a22a38f2ea3c0b00d96f6f99db4e6c168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a56ca27fb38ca92ff6a93c8955ee0ef11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a180fa55a4bf36580963bed9e3e09c227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathOK</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a069277ac44de9fa0e5586d38565fab66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a874774b4a34846e019c7341998c26e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5fca7be71b1a08f7272233e8b96c2591</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGenericAssignableWatch</name>
    <filename>classomnetpp_1_1cGenericAssignableWatch.html</filename>
    <templarg>T</templarg>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGenericReadonlyWatch</name>
    <filename>classomnetpp_1_1cGenericReadonlyWatch.html</filename>
    <templarg>T</templarg>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGeometric</name>
    <filename>classomnetpp_1_1cGeometric.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGeometric *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>ab21d0daf6b83ae50fae88a97c9181e34</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGeometric *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>ab21d0daf6b83ae50fae88a97c9181e34</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGlobalRegistrationList</name>
    <filename>classomnetpp_1_1cGlobalRegistrationList.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGroupFigure</name>
    <filename>classomnetpp_1_1cGroupFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGroupFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>ae0e6551edc225a75748edad438cf8ae0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGroupFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>ae0e6551edc225a75748edad438cf8ae0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::ChannelIterator</name>
    <filename>classomnetpp_1_1cModule_1_1ChannelIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a9e5c67e1ab527bd7089556b75594b892</anchor>
      <arglist>(const cModule *parentModule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>ad61ef1f0a4662c2d7c6dcb24fe10dd39</anchor>
      <arglist>(const cModule *parentModule)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>ab5767922c5d06aba118eb118748e42ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cChannel *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>ad9863f7635ac0ba5cd653d0ad3dbf10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a7ba8b4efe9a0139ae36dac30f781a742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a40a6286724aaf278d78ea04cea519711</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cHasher</name>
    <filename>classomnetpp_1_1cHasher.html</filename>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cHasher</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a59aee1f6608f0ed413f53e9f5830ef2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getHash</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a97650cbea09f658130ae654f588b7a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a33fefb3dd7b797908a4378adb306b482</anchor>
      <arglist>(const char *hash) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ad9a390859f95153684967f28ca9fbbbb</anchor>
      <arglist>(const char *hash) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getHash</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a97650cbea09f658130ae654f588b7a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a33fefb3dd7b797908a4378adb306b482</anchor>
      <arglist>(const char *hash) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ad9a390859f95153684967f28ca9fbbbb</anchor>
      <arglist>(const char *hash) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cHistogram</name>
    <filename>classomnetpp_1_1cHistogram.html</filename>
    <base>omnetpp::cHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1c19734a1012a1ceeb8392fd2031cd2f</anchor>
      <arglist>(const cHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a024814ae7212abf7de4557010a6ccff7</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, HistogramMode mode=MODE_AUTO)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a9a98080a0f8da3ba5973f3112d0ba098</anchor>
      <arglist>(const cHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a66daa83be1818ffdf4b99ebe80c6ec81</anchor>
      <arglist>(HistogramMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HistogramMode</type>
      <name>getMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3be0c084d8309e270562dfd1c14cbbbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a99284643a305d5cd0604886c5d8b3578</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a451a560722774cb34faa91ae4ddc4d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a4ea2bc5c1c6d7679974143b32973ddac</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a5c8575332a1945fdc0ed190ca820619c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1c19734a1012a1ceeb8392fd2031cd2f</anchor>
      <arglist>(const cHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a024814ae7212abf7de4557010a6ccff7</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, HistogramMode mode=MODE_AUTO)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a9a98080a0f8da3ba5973f3112d0ba098</anchor>
      <arglist>(const cHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a66daa83be1818ffdf4b99ebe80c6ec81</anchor>
      <arglist>(HistogramMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HistogramMode</type>
      <name>getMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3be0c084d8309e270562dfd1c14cbbbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a99284643a305d5cd0604886c5d8b3578</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a451a560722774cb34faa91ae4ddc4d9e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cHistogramBase</name>
    <filename>classomnetpp_1_1cHistogramBase.html</filename>
    <base>omnetpp::cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a6a871597781cf647738013d4e7bcf391</anchor>
      <arglist>(const cHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>ae19efff1f07c68114a063bc9aea11bb8</anchor>
      <arglist>(const char *name, int numcells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>ad38c0a4e974ad32a935b3bc5b94191c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a0e0dd6cf5c0f7591d56ee114b25b02bb</anchor>
      <arglist>(const cHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a0b9a373f4c0998bc94f499096afc43c8</anchor>
      <arglist>(int numcells)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a6a871597781cf647738013d4e7bcf391</anchor>
      <arglist>(const cHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>ae19efff1f07c68114a063bc9aea11bb8</anchor>
      <arglist>(const char *name, int numcells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogramBase</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>ad38c0a4e974ad32a935b3bc5b94191c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a0e0dd6cf5c0f7591d56ee114b25b02bb</anchor>
      <arglist>(const cHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogramBase.html</anchorfile>
      <anchor>a0b9a373f4c0998bc94f499096afc43c8</anchor>
      <arglist>(int numcells)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIconFigure</name>
    <filename>classomnetpp_1_1cIconFigure.html</filename>
    <base>omnetpp::cImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cIconFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a2e33fa8151064730fcfc5e1112a15c02</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIconFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a2e33fa8151064730fcfc5e1112a15c02</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIdealChannel</name>
    <filename>classomnetpp_1_1cIdealChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIdealChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ace2c4f6475dec208af7a603ebdc08646</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIdealChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a914115f2a52bd81cb5cb2dfad139d952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cIdealChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ad2c8afd7d6ed8d30cb3b8a0b3d04e5ea</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a8b67d0f96021a19eb3c0a42e2d698d7a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a03c80e11371ebcc5c22018ed00f08675</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ad4764a1ade6818df4d5722576001e812</anchor>
      <arglist>(cMessage *msg) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a6661f39e4d3fd131371efd055fe5f94a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>aeb24b1340d426166718f51dcad736cd5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIEventlogManager</name>
    <filename>classomnetpp_1_1cIEventlogManager.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a7ffcecc9bb64e5173a10cf6f70da5258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a5dd948fc43922b2bde37f0441ea02d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>aab3b4fd12b67c81c79e75fcb6171dc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ad317961823d3cd6e0345e004a4831fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a7ffcecc9bb64e5173a10cf6f70da5258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a5dd948fc43922b2bde37f0441ea02d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>aab3b4fd12b67c81c79e75fcb6171dc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ad317961823d3cd6e0345e004a4831fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIListener</name>
    <filename>classomnetpp_1_1cIListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a9202aa79acbe49d9482cda70d4fa52e2</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a9d6636d2c93be4f900d2f34ef7573d6c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ad82b98756b1af55e606a3708f3d3079c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ae943cf67eaa6c6f3a73c3ac0ad306f42</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a3f4bb7e9f977e9f47ffd4dcf74bf7de1</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a15bbca55a64d40d18148cfb22bd46bea</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ac143f86dc3f306f5e784a8762fc7eafc</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a4d9f3bfc96e4ec8a2bd8cf0617789008</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a2d28c5d95d9df8964cd8bb941bf3011c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a8ffe7a50835dc5a5d3976d8785a86c5c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubscribeCount</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ae645d46946a58e330dfe8abb3d819b51</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cImageFigure</name>
    <filename>classomnetpp_1_1cImageFigure.html</filename>
    <base>omnetpp::cAbstractImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a91c5e7447f4b68e7c88fdd424abed352</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a91c5e7447f4b68e7c88fdd424abed352</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIntUniform</name>
    <filename>classomnetpp_1_1cIntUniform.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>ae1d313189917938fa30fe46adbdbe62f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>ae1d313189917938fa30fe46adbdbe62f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIOutputScalarManager</name>
    <filename>classomnetpp_1_1cIOutputScalarManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <member kind="function">
      <type></type>
      <name>cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>acb3f358ec2ca20d58b0a6a3c3dce55ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ab2ed6a81b443756f97c3212e8ff78bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>acb3f358ec2ca20d58b0a6a3c3dce55ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ab2ed6a81b443756f97c3212e8ff78bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIOutputVectorManager</name>
    <filename>classomnetpp_1_1cIOutputVectorManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <member kind="function">
      <type></type>
      <name>cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab0a261b859d50450f1b53fdb78d3f213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab8255275d2e87ff0e137c90a1232a5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a23b45317f0bd3557f7e275408dffd52a</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>aed071088dc572c5ba80d42e8c2bd3865</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af7cf5246deaab8e821500bc496f84ddb</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab0a261b859d50450f1b53fdb78d3f213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab8255275d2e87ff0e137c90a1232a5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a23b45317f0bd3557f7e275408dffd52a</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>aed071088dc572c5ba80d42e8c2bd3865</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af7cf5246deaab8e821500bc496f84ddb</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cISimulationLifecycleListener</name>
    <filename>classomnetpp_1_1cISimulationLifecycleListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a48eebdf97ccee9c03ddc732db16d7ed7</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listenerAdded</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a391446431455b96e9f8df56df8d2b092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listenerRemoved</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a739aacad80f0410eebd9f7056d172950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getSimulationLifecycleEventName</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a36ef52c425e731db35d72c9b225a8815</anchor>
      <arglist>(SimulationLifecycleEventType eventType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cISnapshotManager</name>
    <filename>classomnetpp_1_1cISnapshotManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <member kind="function">
      <type></type>
      <name>cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a53e3a474845ffdf2941cb67d041cdb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a1783e5f897a4ed548c8c64d47ea3d1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a53e3a474845ffdf2941cb67d041cdb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a1783e5f897a4ed548c8c64d47ea3d1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a55577052df26f98128b23a0013e9c066</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cITimestampedValue</name>
    <filename>classomnetpp_1_1cITimestampedValue.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cITimestampedValue</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>a10a588e813d4b30dff99f65ec8dfef8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>ab68a1f3cafc4d7d6adbd6c06616971cc</anchor>
      <arglist>(simsignal_t signalID) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>a8593f510465c3be07c966b4c7efccabf</anchor>
      <arglist>(simsignal_t signalID) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cKSplit</name>
    <filename>classomnetpp_1_1cKSplit.html</filename>
    <base>omnetpp::cDensityEstBase</base>
    <class kind="struct">omnetpp::cKSplit::Grid</class>
    <class kind="class">omnetpp::cKSplit::Iterator</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>gaf380c0952190c3d595b7a1de8d43e5bc</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga3da446f624c1d69471059b2c72031ab7</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a6647dc548ac1bc9a3711ad0ea99d84bc</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a1320d2d60879e00061b6806749ba7eeb</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aec3155ff5e969838da7e4bae282f8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5386c603951d05866a16417ce4f969a4</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cKSplit *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae990fbdf127d9fdeade07aed42008159</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad56b858b092960c5f9c626785740770c</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a08d9d6fc3fe8be5de65a80fca4b4132a</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeExtension</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a112ce4e6e8a6fadde711199e25239302</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae3db39dcc910969ed5f70f4a68ad6d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a34623e04708149bc0a20c74d80bcfe41</anchor>
      <arglist>(Grid &amp;grid) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a2b5ebb61b5dc7483202165214d6a7b3a</anchor>
      <arglist>(Grid &amp;grid, int cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ada5bd0a57667fc2a0b4dc7e045e3fcf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a12bb0afe97ab64cb30020315cd322810</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getRootGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a927cf87593e5d709912644d681c30a84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae8bdaef6e2e05763af5431257003ce7f</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a6647dc548ac1bc9a3711ad0ea99d84bc</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a1320d2d60879e00061b6806749ba7eeb</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aec3155ff5e969838da7e4bae282f8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5386c603951d05866a16417ce4f969a4</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cKSplit *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae990fbdf127d9fdeade07aed42008159</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad56b858b092960c5f9c626785740770c</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a08d9d6fc3fe8be5de65a80fca4b4132a</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeExtension</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a112ce4e6e8a6fadde711199e25239302</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ae3db39dcc910969ed5f70f4a68ad6d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a34623e04708149bc0a20c74d80bcfe41</anchor>
      <arglist>(Grid &amp;grid) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a2b5ebb61b5dc7483202165214d6a7b3a</anchor>
      <arglist>(Grid &amp;grid, int cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ada5bd0a57667fc2a0b4dc7e045e3fcf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a12bb0afe97ab64cb30020315cd322810</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getRootGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a927cf87593e5d709912644d681c30a84</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLabelFigure</name>
    <filename>classomnetpp_1_1cLabelFigure.html</filename>
    <base>omnetpp::cAbstractTextFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cLabelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a714a6c6a761bdd499583f7ace1cf0b8d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLabelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a714a6c6a761bdd499583f7ace1cf0b8d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLCG32</name>
    <filename>classomnetpp_1_1cLCG32.html</filename>
    <base>omnetpp::cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a97d0cf80d1a11c6270b92ae548fae74f</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>ab3e4dab712a67d9c1c24e336eb5a6609</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>acd6a60c2b1ea304b32a3272ca5158c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a54c19a6c552efcfe69fe38c5b16d8ba0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a1b57a3dd02eaa642a0a19b191d496f23</anchor>
      <arglist>(unsigned long n) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>af47475884a1eb5d04f71bdf216bfd6ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>afa34031c0bae20ca8f63aa3d5429b8d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a623300784c4501c0a764711cf17f5501</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLineFigure</name>
    <filename>classomnetpp_1_1cLineFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac90cbc17dca53eca2fe3ec1ab671ec03</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac90cbc17dca53eca2fe3ec1ab671ec03</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cListener</name>
    <filename>classomnetpp_1_1cListener.html</filename>
    <base>omnetpp::cIListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ac29d2f941ddc13062ed6566d67896d13</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ad7eeef91300cda697657332f42de5ed9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a6b66fcb9e86ec6f74615a7c78183433d</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a7069e1fa04e58faa57ad63912f665f9f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a40fd422e510d42f547638442fa362404</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ae297a106431baec4417a7be954a4b65f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a16748135bffb8ab012820fd72c5ac516</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unsupportedType</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a4619acf63a173a52465b3fccea522ada</anchor>
      <arglist>(simsignal_t signalID, const char *dataType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLog</name>
    <filename>classomnetpp_1_1cLog.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getLogLevelName</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>ac1afc6d8dd67b9ad6cd97f154c8f509a</anchor>
      <arglist>(LogLevel logLevel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogLevel</type>
      <name>resolveLogLevel</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a86b06865ab1f9ef65ffc84c41087fcd0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static LogLevel</type>
      <name>logLevel</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a459a731406775aecba537a713747b5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NoncomponentLogPredicate</type>
      <name>noncomponentLogPredicate</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>aca3b622f98b7a26a047ccc7b66bfb9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ComponentLogPredicate</type>
      <name>componentLogPredicate</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a067919070048057e5bb40a849561e55a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLogEntry</name>
    <filename>classomnetpp_1_1cLogEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLongHistogram</name>
    <filename>classomnetpp_1_1cLongHistogram.html</filename>
    <base>omnetpp::cHistogram</base>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a4304c443ff9bab82652547534b44d412</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>ae3046c449b4deef50902eabcbe1a5ac0</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a87c474d62b31b5fb6b1586df1d9c7a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a57d56352383995b25c3b0b60c89ddeec</anchor>
      <arglist>(const cLongHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>abf890a363632b3772a56c448c8641b81</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a4304c443ff9bab82652547534b44d412</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>ae3046c449b4deef50902eabcbe1a5ac0</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a87c474d62b31b5fb6b1586df1d9c7a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a57d56352383995b25c3b0b60c89ddeec</anchor>
      <arglist>(const cLongHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>abf890a363632b3772a56c448c8641b81</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLongParImpl</name>
    <filename>classomnetpp_1_1cLongParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a95d7348fa49cda0b002290872cf0af23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>aa65bc412f70369a10375a8a3474f03dd</anchor>
      <arglist>(const cLongParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5b862a38ff256fea06bbdd05b3a31e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ad8037aeabda660a80b4d3125d6787bff</anchor>
      <arglist>(const cLongParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a1c46d355f18309e558750321970668bb</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a95d7348fa49cda0b002290872cf0af23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>aa65bc412f70369a10375a8a3474f03dd</anchor>
      <arglist>(const cLongParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongParImpl</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5b862a38ff256fea06bbdd05b3a31e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ad8037aeabda660a80b4d3125d6787bff</anchor>
      <arglist>(const cLongParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a1c46d355f18309e558750321970668bb</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cLongParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchableString</name>
    <filename>classomnetpp_1_1cMatchableString.html</filename>
    <base>omnetpp::cMatchExpression::Matchable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchableString.html</anchorfile>
      <anchor>a79512e78bb9cfbbec7b0c65dba7fabb6</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchableString.html</anchorfile>
      <anchor>ab2513a5a9133850caeffce3ef8e8dd34</anchor>
      <arglist>(const char *attribute) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchExpression</name>
    <filename>classomnetpp_1_1cMatchExpression.html</filename>
    <class kind="class">omnetpp::cMatchExpression::Matchable</class>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>af55f89081719676193f682b07d2b7907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>abf71d13082028b4675f160814aa87a28</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a6c78e7298451994378f4ea6f8e9e2901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a928a43596a234d42196aee3d75078410</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a0e05a3b5a602ad3e60c5d809f8b9f2f1</anchor>
      <arglist>(const Matchable *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMersenneTwister</name>
    <filename>classomnetpp_1_1cMersenneTwister.html</filename>
    <base>omnetpp::cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a97d0cf80d1a11c6270b92ae548fae74f</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>ab3e4dab712a67d9c1c24e336eb5a6609</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>acd6a60c2b1ea304b32a3272ca5158c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a54c19a6c552efcfe69fe38c5b16d8ba0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a1b57a3dd02eaa642a0a19b191d496f23</anchor>
      <arglist>(unsigned long n) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>af47475884a1eb5d04f71bdf216bfd6ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>afa34031c0bae20ca8f63aa3d5429b8d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a623300784c4501c0a764711cf17f5501</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMessage</name>
    <filename>classomnetpp_1_1cMessage.html</filename>
    <base>omnetpp::cEvent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a912c4f968fbdb97b749650cad39b1cc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7b0d9c4f844ad6792b13540d3bd27cf3</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6f9c89dc38ff0d8b209d626d89d3900c</anchor>
      <arglist>(const char *name=nullptr, short kind=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0faacd30cb4bc6500f7c8eedb339f2fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a37a9fec30e6e991ef763e316f9944b6d</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3cd946817b1cd6235206e738daaafacf</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9173c19d363e874d88c1b8b27937e2d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9e9819a8fa478afaff43fcf38c1d731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1de606f342ed492e3f05c3d05d67753f</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a27f690b788cd980f740f6cbae40516f4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae0b903525fb01d41c2cdd197ee2e9068</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4a64790b42d60c544749bd5a605f71f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa60ba5d5d6ab47a59084b2bf39400679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>adeaad7febbb68866e90aa255b8489a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a87aa93f5841e7fcad006942cf5ff23b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5aa04944ec565a477270ded3ded85d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>getParList</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9bc950d36aacf9c4e7afe9cc194aab96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac0969ebc4fa6a06f845e83ca36248152</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa55e1570e48af898e2c460fb16e9d8b5</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f9a003e99d69a0201fcbd73f2cb13b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6c40b8851c9da933155a4638e6e309bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9730d1220096d7e94dbda9e671bce29</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9ea42aa020d39baf1e4cc9b18612a15d</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>addObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a36d1bcf966f3117a6df0e4d9b1034268</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac58ba4e553d3558d98e17609105979aa</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0d9cb4f5ff4b87a289129bf335909168</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa9b65ee88af8d9ee61a576450808f5a7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a93b289901ceadeabd25bba862d0a4440</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4305ec9ec46d773da8e507f6d7895126</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSenderModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad9ceb6311d8d13612ecd4a5ec7ebc6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSenderGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f6a6b83820866487b1c15be1975c4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getArrivalModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1b72caccfdc8a4dd8abe446ef849ed53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getArrivalGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8ac30933cf0fde02f23b0f573562627a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc81c619d7865a06d059e440a9f9e9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>acafcca3adad2671de2a302e1bd45465c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7a8b006d40ba285cde98bec19341d1bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abe481a3e84815fea7f442068598f6fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getCreationTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4ced11dc3bcc06495b0404ca5ba5d13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac86cc49b3d0a19410d4d567ae32cb60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4f80baa2c80a4007bece8a25244ccd5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a531af78522976cd65ad88e5b402b0fd7</anchor>
      <arglist>(int gateId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aea6b4fbdf524d00f90fdd9821414041f</anchor>
      <arglist>(const char *gateName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae20655149053c6b21f0807930f6e4262</anchor>
      <arglist>(const char *gateName, int gateIndex) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>af1d3501efaaee26d201dfa1e8ceb8305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTreeId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a85ca0b45143c37f7942799de3c90f915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac9289727e926aa29d25a1be6724a997a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc5770bbf53eed08ce9da8193ec18422</anchor>
      <arglist>(int moduleId, int gateId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5bc4b36b360e9211ede0a6d5abd145e8</anchor>
      <arglist>(int moduleId, int gateId, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afea26c76a4b7c5b59d84e4ae878bcc3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abf8c8160afe4717902f86a44ba180e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2c9661a900c7a2ad3ad4552010e37c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7b0d9c4f844ad6792b13540d3bd27cf3</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6f9c89dc38ff0d8b209d626d89d3900c</anchor>
      <arglist>(const char *name=nullptr, short kind=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0faacd30cb4bc6500f7c8eedb339f2fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a37a9fec30e6e991ef763e316f9944b6d</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3cd946817b1cd6235206e738daaafacf</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9173c19d363e874d88c1b8b27937e2d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9e9819a8fa478afaff43fcf38c1d731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1de606f342ed492e3f05c3d05d67753f</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a27f690b788cd980f740f6cbae40516f4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae0b903525fb01d41c2cdd197ee2e9068</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4a64790b42d60c544749bd5a605f71f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa60ba5d5d6ab47a59084b2bf39400679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>adeaad7febbb68866e90aa255b8489a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a87aa93f5841e7fcad006942cf5ff23b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5aa04944ec565a477270ded3ded85d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>getParList</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9bc950d36aacf9c4e7afe9cc194aab96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac0969ebc4fa6a06f845e83ca36248152</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa55e1570e48af898e2c460fb16e9d8b5</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f9a003e99d69a0201fcbd73f2cb13b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6c40b8851c9da933155a4638e6e309bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9730d1220096d7e94dbda9e671bce29</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9ea42aa020d39baf1e4cc9b18612a15d</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>addObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a36d1bcf966f3117a6df0e4d9b1034268</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac58ba4e553d3558d98e17609105979aa</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0d9cb4f5ff4b87a289129bf335909168</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa9b65ee88af8d9ee61a576450808f5a7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a93b289901ceadeabd25bba862d0a4440</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4305ec9ec46d773da8e507f6d7895126</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSenderModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad9ceb6311d8d13612ecd4a5ec7ebc6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSenderGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f6a6b83820866487b1c15be1975c4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getArrivalModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1b72caccfdc8a4dd8abe446ef849ed53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getArrivalGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8ac30933cf0fde02f23b0f573562627a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc81c619d7865a06d059e440a9f9e9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>acafcca3adad2671de2a302e1bd45465c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7a8b006d40ba285cde98bec19341d1bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abe481a3e84815fea7f442068598f6fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getCreationTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4ced11dc3bcc06495b0404ca5ba5d13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac86cc49b3d0a19410d4d567ae32cb60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4f80baa2c80a4007bece8a25244ccd5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a531af78522976cd65ad88e5b402b0fd7</anchor>
      <arglist>(int gateId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aea6b4fbdf524d00f90fdd9821414041f</anchor>
      <arglist>(const char *gateName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae20655149053c6b21f0807930f6e4262</anchor>
      <arglist>(const char *gateName, int gateIndex) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>af1d3501efaaee26d201dfa1e8ceb8305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTreeId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a85ca0b45143c37f7942799de3c90f915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac9289727e926aa29d25a1be6724a997a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc5770bbf53eed08ce9da8193ec18422</anchor>
      <arglist>(int moduleId, int gateId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5bc4b36b360e9211ede0a6d5abd145e8</anchor>
      <arglist>(int moduleId, int gateId, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afea26c76a4b7c5b59d84e4ae878bcc3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abf8c8160afe4717902f86a44ba180e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2c9661a900c7a2ad3ad4552010e37c7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMessagePrinter</name>
    <filename>classomnetpp_1_1cMessagePrinter.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cMessagePrinter</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>ade045b58c8c52298bc240eecd9ecf9e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessagePrinter</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>ac68f6b1ba4d533c7f981ba9470bafe6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getScoreFor</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>abb4751893d84560239d4770b4ae4d587</anchor>
      <arglist>(cMessage *msg) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printMessage</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>aa60a2769186610d41078295b5dee0ecf</anchor>
      <arglist>(std::ostream &amp;os, cMessage *msg) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMethodCallContextSwitcher</name>
    <filename>classomnetpp_1_1cMethodCallContextSwitcher.html</filename>
    <base>omnetpp::cContextSwitcher</base>
    <member kind="function">
      <type></type>
      <name>cMethodCallContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a89dd67ff310e17c2e68a8d500964c709</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMethodCallContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a05a7c80858a24236b585fb223d987279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>methodCall</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a45e3372ab1817bdabec36568e171e247</anchor>
      <arglist>(const char *methodFmt,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDepth</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>ab275726b46a696f8b20c4a23113230d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModelChangeNotification</name>
    <filename>classomnetpp_1_1cModelChangeNotification.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule</name>
    <filename>classomnetpp_1_1cModule.html</filename>
    <base>omnetpp::cComponent</base>
    <class kind="class">omnetpp::cModule::ChannelIterator</class>
    <class kind="class">omnetpp::cModule::GateIterator</class>
    <class kind="class">omnetpp::cModule::SubmoduleIterator</class>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa536977bf4b94ed900f22f724ffa09a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a46d8700e728ab4f8b9227e539308d012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab5789d4642b82c586b11f47af734e89e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac68651321f7e97be8adc93099f8f001a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>addGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a330386002a1b76ad332e62df891f0d65</anchor>
      <arglist>(const char *gatename, cGate::Type type, bool isvector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a016b66e74af85c54540a93cd57b26eff</anchor>
      <arglist>(const char *gatename, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getOrCreateFirstUnconnectedGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa130e951651c40f55a61e67fda458c4d</anchor>
      <arglist>(const char *gatename, char suffix, bool inside, bool expand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOrCreateFirstUnconnectedGatePair</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6aac62a91fc2c620f2049549df0aaa69</anchor>
      <arglist>(const char *gatename, bool inside, bool expand, cGate *&amp;gatein, cGate *&amp;gateout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a4a67d6cedd01d1e68aee354213b9c438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a282ace0b150fe221b5547fc99d392f2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a9e3014e58ed0e7dc7c4bd3a7391623f9</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlaceholder</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8a01f705963179874363c982039a9ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a4688cd2b387d2d9608547a9055ca674a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getModuleType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac6295297bfe5ca74ee367232bd838352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a43a21f306a3ed1811d31e9f1dfd3809f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a5775df451a32aa32fab7fac48a1c1e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a349f844a931904d2219c1ff9bbbff85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac6b2b17edc96513401b352b9d41825b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubmodules</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a09531db55fe3c01af55b9b0daa72c2d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8bec33ab6b46c94ee9f05825c99184b2</anchor>
      <arglist>(const char *name, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>affd762a971a066ee031c98c709369ba8</anchor>
      <arglist>(const char *name, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>af1e9f7c8ec184239ee4e9eeb4f8d79eb</anchor>
      <arglist>(const char *path) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a527d7dc0912da702a9bdaaf2bf3c067a</anchor>
      <arglist>(const char *gatename, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d28c99da94e1e048f55ce5e1b61a980</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc2f899b85daa1a272e6484c3941d5df</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa056f20adc550dc9bc4136852a7aa485</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>afb5e1f6423df17c879a798e6c8c35fbb</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2ea9d870d7df06034b2ffdbc9d07bea5</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ad56266e67bc89ac6774d40de3ebebfd2</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a12952e3ce837ac93c5365b05d3a72de1</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ba5523eb4fe43401f83bcc6480612d3</anchor>
      <arglist>(const char *gatename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getGateNames</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ade67db36c620ad4edf1757d6797b3de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0d4da8e48354157545326c73a48bcdf9</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGateVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a869201ec40e129baba9d702c0667be33</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6d0193f83bb9f06e08b08e54bc1a88f2</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateBaseId</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa654f0f359bb3c3309d7be5d1c2a629c</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>af35e959b3108bc16e2949ac319bd54a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>getAncestorPar</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d1f0430275913dafd40def83ff23b5c</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3e2334a61989a6153b17e39f6fbbbcb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>getOsgCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a15d6b6f7f120e612cd5e1e3c1e920ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0f4bdc4664d1d895715e31965f4c1218</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ee158eec753e304a76f17bc38289801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7017c0881e4ba412cda2e2f65e6d1aeb</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa536977bf4b94ed900f22f724ffa09a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a46d8700e728ab4f8b9227e539308d012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab5789d4642b82c586b11f47af734e89e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac68651321f7e97be8adc93099f8f001a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>addGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a330386002a1b76ad332e62df891f0d65</anchor>
      <arglist>(const char *gatename, cGate::Type type, bool isvector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a016b66e74af85c54540a93cd57b26eff</anchor>
      <arglist>(const char *gatename, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getOrCreateFirstUnconnectedGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa130e951651c40f55a61e67fda458c4d</anchor>
      <arglist>(const char *gatename, char suffix, bool inside, bool expand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOrCreateFirstUnconnectedGatePair</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6aac62a91fc2c620f2049549df0aaa69</anchor>
      <arglist>(const char *gatename, bool inside, bool expand, cGate *&amp;gatein, cGate *&amp;gateout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a4a67d6cedd01d1e68aee354213b9c438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a282ace0b150fe221b5547fc99d392f2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a9e3014e58ed0e7dc7c4bd3a7391623f9</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlaceholder</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8a01f705963179874363c982039a9ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a4688cd2b387d2d9608547a9055ca674a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getModuleType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac6295297bfe5ca74ee367232bd838352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a43a21f306a3ed1811d31e9f1dfd3809f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a5775df451a32aa32fab7fac48a1c1e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a349f844a931904d2219c1ff9bbbff85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac6b2b17edc96513401b352b9d41825b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubmodules</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a09531db55fe3c01af55b9b0daa72c2d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8bec33ab6b46c94ee9f05825c99184b2</anchor>
      <arglist>(const char *name, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>affd762a971a066ee031c98c709369ba8</anchor>
      <arglist>(const char *name, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>af1e9f7c8ec184239ee4e9eeb4f8d79eb</anchor>
      <arglist>(const char *path) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a527d7dc0912da702a9bdaaf2bf3c067a</anchor>
      <arglist>(const char *gatename, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d28c99da94e1e048f55ce5e1b61a980</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc2f899b85daa1a272e6484c3941d5df</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa056f20adc550dc9bc4136852a7aa485</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>afb5e1f6423df17c879a798e6c8c35fbb</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2ea9d870d7df06034b2ffdbc9d07bea5</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ad56266e67bc89ac6774d40de3ebebfd2</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a12952e3ce837ac93c5365b05d3a72de1</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ba5523eb4fe43401f83bcc6480612d3</anchor>
      <arglist>(const char *gatename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getGateNames</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ade67db36c620ad4edf1757d6797b3de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0d4da8e48354157545326c73a48bcdf9</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGateVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a869201ec40e129baba9d702c0667be33</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6d0193f83bb9f06e08b08e54bc1a88f2</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateBaseId</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa654f0f359bb3c3309d7be5d1c2a629c</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>af35e959b3108bc16e2949ac319bd54a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>getAncestorPar</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d1f0430275913dafd40def83ff23b5c</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3e2334a61989a6153b17e39f6fbbbcb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>getOsgCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a15d6b6f7f120e612cd5e1e3c1e920ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0f4bdc4664d1d895715e31965f4c1218</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ee158eec753e304a76f17bc38289801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7017c0881e4ba412cda2e2f65e6d1aeb</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModuleType</name>
    <filename>classomnetpp_1_1cModuleType.html</filename>
    <base>omnetpp::cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aaf4596066785ab64d7b4c19184d56bcc</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a4e0966fee11fc59709bb4367fdf3c63c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af952222e04b9bbf36ce16da2697345cf</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>ad434108215d1bfa42e6b8d9ac3f36c5d</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a595519523ccac6de560e2a2952fd42b3</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a3e4cde603a30767d3d9c7b44e0381111</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af500e537900eea8993f5024e44e38203</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aa20627e25fc3c30b38939669539bc011</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cModule *</type>
      <name>createModuleObject</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aa1c70582b0eb8d045769966beecf400f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersAndGatesTo</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a89ba0411cdde74f69c3f37dd48ad8670</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setupGateVectors</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af99f6a658ad3e2c6b00c0a1f4f947567</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a590e345f8033910ad4bb2ace360579bc</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>instantiateModuleClass</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a174701e9f6b0a9e2921ec5f2f21548b6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aaf4596066785ab64d7b4c19184d56bcc</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a4e0966fee11fc59709bb4367fdf3c63c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af952222e04b9bbf36ce16da2697345cf</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>ad434108215d1bfa42e6b8d9ac3f36c5d</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a595519523ccac6de560e2a2952fd42b3</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a3e4cde603a30767d3d9c7b44e0381111</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMsgPar</name>
    <filename>classomnetpp_1_1cMsgPar.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="typedef">
      <type>void(*</type>
      <name>VoidDelFunc</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a04897f0907c45b913bba5aeea93a8e83</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>VoidDupFunc</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a86a790616d0e738e0953ffce7e86eb41</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae99808032eb440f1e88fa13aded2b4ac</anchor>
      <arglist>(const cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>af7de3af4d9207d0793ca72ebe42efe0f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aafd7fe48a32b8e636574788799f2f0eb</anchor>
      <arglist>(const char *name, cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad16bd82d87b7a46823f27768b913e6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a853b583da1969855f4224b75c469d2bb</anchor>
      <arglist>(const cMsgPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4b54f4e9984f5653655fca27403b440f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad1fb086f013492292495a594e7f5d13e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1270569d9e42c6c7903a932d54d19005</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8bc8fd098498723a2c61b4ac26f5eb67</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa785f60fb038c8b40b863d6165a55c59</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5902c662b726f78c11fde5aba8657436</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0c88a6947d600f7cbf38d80756651f8a</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a03683d5006f8e195e66268eab90b858e</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b7676e4896d026da2c6edfbe32da8f1</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b4c92e9886d9f7cbc7fcfd3b20deff6</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a70a28ac015229ccb19cc27443d0a50d3</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adc09683b4209271c82875b33e6df2237</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad52429c66ebe66485a3e9e5dc006024c</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aca34e7878317b36d4bf93f993be39b3a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b6294b552f7b95f76b6699e1b35c208</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae9ab4772626e62e20eb02cd8534068a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab77a11563a3d4811d753bcbf8808de9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abdc847d0964aaf66aa186a2a09a3af7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aad7c86e3a7c4753efa88b5c659496c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a122f3f2460ad27f9605da27f9efe7579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>getObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1a749f3face2b41ccce95a583015ab50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab0b1c0b380f882296ed44884603e47e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aefbbacbf987e36b1bea9e064dc75f119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a84ff838c325f8502edcf2d5ec8aff8ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a98fcf81273f50795cc89728a0c09c1b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a99ffce0bf81ea5eaeb35babf2a50d1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2042ccab7e563c77799cf2d45ab3b146</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a308c84d72eb5a3eb26bfbc41a0c6d0e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abcf010d7150b7f050186921cf4082f8f</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6d99ba4a1efa2886652f65ad26c432e5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9331c3cdb698999edbb0431a48286efb</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a7599107b9d5b5b46d901a7b1caef76b8</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6dea310dfb660f79d1c93b56e89255cd</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adb872043f8edaa4777da4b4a4b3dce1d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aed81375abf31af016cf7a69409f284c8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad07ff2083d90d4036915d8ee30175dd6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aaddee1f80b2d78295a11d7858ed12e46</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8509cc19354d45892cb025a493a203fa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa5f1168220075dca0c96ebd15c5e55eb</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a63d5d8671ae95339a7100743f323d674</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa10b8b1d63a2b329eedf5bf9731c91a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa6e68d01309b477dbff200b35eee7a7b</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabae388199abe5cc023b5323ec6bc9ad</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae195601f7fdc314fddf388cbfa231e28</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b3baad8c612d81b96e46f84d7e97580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab75164b28454722bdf29710c208f0736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac77ce1bd678ab2a2822337cf2aa2d7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac2f36c2d09514eb6ee1aa262bc4b31a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>afdd42698216921270c2a7b5f9996579c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5c5e6c29336647e95ec25388301710ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acec270392f32ff5627360daa1de7e66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a27a7be0e2f8d707cdd0f15e50eb0d9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2ece9436743e010a3eff90abc3a5778c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabab268504345fcb036094bc7b5c4438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a14f233e4256bdb5ccdc02f4aee842f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b32021b12206ef34495c688760c44bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cOwnedObject *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5382f2360a00fcbc9979e4880f887af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1b3d533016410521e53cbe92b1f459cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1aee57457aa1ae56e18c48732b6f9f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a814385b4b7651b9b57124e3f749ab4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1aee57457aa1ae56e18c48732b6f9f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a814385b4b7651b9b57124e3f749ab4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae99808032eb440f1e88fa13aded2b4ac</anchor>
      <arglist>(const cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>af7de3af4d9207d0793ca72ebe42efe0f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aafd7fe48a32b8e636574788799f2f0eb</anchor>
      <arglist>(const char *name, cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad16bd82d87b7a46823f27768b913e6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a853b583da1969855f4224b75c469d2bb</anchor>
      <arglist>(const cMsgPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4b54f4e9984f5653655fca27403b440f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad1fb086f013492292495a594e7f5d13e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1270569d9e42c6c7903a932d54d19005</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8bc8fd098498723a2c61b4ac26f5eb67</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa785f60fb038c8b40b863d6165a55c59</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5902c662b726f78c11fde5aba8657436</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0c88a6947d600f7cbf38d80756651f8a</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a03683d5006f8e195e66268eab90b858e</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b7676e4896d026da2c6edfbe32da8f1</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b4c92e9886d9f7cbc7fcfd3b20deff6</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a70a28ac015229ccb19cc27443d0a50d3</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adc09683b4209271c82875b33e6df2237</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad52429c66ebe66485a3e9e5dc006024c</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aca34e7878317b36d4bf93f993be39b3a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b6294b552f7b95f76b6699e1b35c208</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae9ab4772626e62e20eb02cd8534068a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab77a11563a3d4811d753bcbf8808de9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abdc847d0964aaf66aa186a2a09a3af7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aad7c86e3a7c4753efa88b5c659496c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a122f3f2460ad27f9605da27f9efe7579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>getObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1a749f3face2b41ccce95a583015ab50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab0b1c0b380f882296ed44884603e47e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aefbbacbf987e36b1bea9e064dc75f119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a84ff838c325f8502edcf2d5ec8aff8ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a98fcf81273f50795cc89728a0c09c1b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a99ffce0bf81ea5eaeb35babf2a50d1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2042ccab7e563c77799cf2d45ab3b146</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a308c84d72eb5a3eb26bfbc41a0c6d0e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abcf010d7150b7f050186921cf4082f8f</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6d99ba4a1efa2886652f65ad26c432e5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9331c3cdb698999edbb0431a48286efb</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a7599107b9d5b5b46d901a7b1caef76b8</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6dea310dfb660f79d1c93b56e89255cd</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adb872043f8edaa4777da4b4a4b3dce1d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aed81375abf31af016cf7a69409f284c8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad07ff2083d90d4036915d8ee30175dd6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aaddee1f80b2d78295a11d7858ed12e46</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8509cc19354d45892cb025a493a203fa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa5f1168220075dca0c96ebd15c5e55eb</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a63d5d8671ae95339a7100743f323d674</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa10b8b1d63a2b329eedf5bf9731c91a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa6e68d01309b477dbff200b35eee7a7b</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabae388199abe5cc023b5323ec6bc9ad</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae195601f7fdc314fddf388cbfa231e28</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b3baad8c612d81b96e46f84d7e97580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab75164b28454722bdf29710c208f0736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac77ce1bd678ab2a2822337cf2aa2d7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac2f36c2d09514eb6ee1aa262bc4b31a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>afdd42698216921270c2a7b5f9996579c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5c5e6c29336647e95ec25388301710ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acec270392f32ff5627360daa1de7e66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a27a7be0e2f8d707cdd0f15e50eb0d9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2ece9436743e010a3eff90abc3a5778c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabab268504345fcb036094bc7b5c4438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a14f233e4256bdb5ccdc02f4aee842f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b32021b12206ef34495c688760c44bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cOwnedObject *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5382f2360a00fcbc9979e4880f887af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1b3d533016410521e53cbe92b1f459cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMultiFingerprintCalculator</name>
    <filename>classomnetpp_1_1cMultiFingerprintCalculator.html</filename>
    <base>omnetpp::cFingerprintCalculator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cMultiFingerprintCalculator *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>a8981634ff543d340155ce26b771fb580</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>ab54515c9f3e8197ec1f43d1be8707320</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>a1f5245a9bd90a9cf9771d699139ce656</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNamedObject</name>
    <filename>classomnetpp_1_1cNamedObject.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adfe987f95b37871810f3981267219bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>abf107f14a5685d87c6fbb774d06bfc74</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adc562ba91fc815b60bdd58dc3a38e363</anchor>
      <arglist>(const cNamedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a95ee2931a2a23cb0488f89b9843d6a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNamedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a31ac852f8aef7f9c9a1f416987840fbf</anchor>
      <arglist>(const cNamedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>ac370b8ddf4a1e0dba92a85fc1c04bc9b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a74bd09deef892d5e2f59c09b422404b4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a0d90efb3c4174b920e54339ee8912db5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adfe987f95b37871810f3981267219bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>abf107f14a5685d87c6fbb774d06bfc74</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adc562ba91fc815b60bdd58dc3a38e363</anchor>
      <arglist>(const cNamedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a95ee2931a2a23cb0488f89b9843d6a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNamedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a31ac852f8aef7f9c9a1f416987840fbf</anchor>
      <arglist>(const cNamedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>ac370b8ddf4a1e0dba92a85fc1c04bc9b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a74bd09deef892d5e2f59c09b422404b4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a0d90efb3c4174b920e54339ee8912db5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNEDFunction</name>
    <filename>classomnetpp_1_1cNEDFunction.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNEDFunction</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>aac2554f652417767709b377c449c15df</anchor>
      <arglist>(NEDFunction f, const char *signature, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDFunction</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a3a3a9e4863fff21ce5d2abf596b35c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue</type>
      <name>invoke</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>afe1ce8ac564010aaecefa7f253d258f4</anchor>
      <arglist>(cComponent *context, cNEDValue argv[], int argc)</arglist>
    </member>
    <member kind="function">
      <type>NEDFunction</type>
      <name>getFunctionPointer</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a808b748e59d6c3ad0aeada069b2a7bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignature</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a4bce97299f69ca7c2f5980ea280eb77b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getReturnType</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a2309ab9219d6503ec17b4fa568c17537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getArgType</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a32c2d06aafd33448fb781cf0fd2708bd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a4b6a05239a9a002fe26201f3cc97633a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>ad1ca231d42efca3b13b651c3cb3f0d26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a2ec5e5f644beab1fd0a5cbb0a179fc2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a9ae8805e9a4102baa579909b400996fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a2623ddccf9835186f21d5642345a85f4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a28c75c452b6108f29025a0d69760724e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>aa63bb913133a48cd4a8894d6f185d88a</anchor>
      <arglist>(NEDFunction f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDFunction</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>aac2554f652417767709b377c449c15df</anchor>
      <arglist>(NEDFunction f, const char *signature, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDFunction</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a3a3a9e4863fff21ce5d2abf596b35c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue</type>
      <name>invoke</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>afe1ce8ac564010aaecefa7f253d258f4</anchor>
      <arglist>(cComponent *context, cNEDValue argv[], int argc)</arglist>
    </member>
    <member kind="function">
      <type>NEDFunction</type>
      <name>getFunctionPointer</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a808b748e59d6c3ad0aeada069b2a7bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignature</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a4bce97299f69ca7c2f5980ea280eb77b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getReturnType</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a2309ab9219d6503ec17b4fa568c17537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getArgType</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a32c2d06aafd33448fb781cf0fd2708bd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a4b6a05239a9a002fe26201f3cc97633a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>ad1ca231d42efca3b13b651c3cb3f0d26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarArgs</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a2ec5e5f644beab1fd0a5cbb0a179fc2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a9ae8805e9a4102baa579909b400996fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNEDFunction.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNEDMathFunction</name>
    <filename>classomnetpp_1_1cNEDMathFunction.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a562aabf4a9c7eb12ed1534df0528ce20</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>aa6396fb4ca6737a06f2a27ed43ca1cb7</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a42386729a6ccbf28cfdb027b1403af91</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>aed513a0e28cd4ad96b321a16b931f520</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a7a3ea085b6dc594d0c749938c55941eb</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a21782a21ed498d66a1edb4f696925777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a6ab235c85f47fd23e8e817ac980d5717</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>getMathFunc</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a67b90c9529dd52f690091ea0fa919967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>getMathFuncNoArg</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>af6781bf58db13f036ca70cd3c21ce609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>getMathFunc1Arg</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a949a8969e9b32ed7e8799eb2a1d27c10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>getMathFunc2Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a34ba9089435c1d226282ad3de7550656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>getMathFunc3Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>ab7d38292fbfd11257350877e4089f5ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>getMathFunc4Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a197aad1f53f4ea7de6943546ffd44ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a9ae8805e9a4102baa579909b400996fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a2fc3485a63352cfbad5158cc9cd7ef54</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a2c2210f432bc142134de0a410fcd5a02</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a329a9891e907736389722300fb7b544f</anchor>
      <arglist>(MathFunc f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a562aabf4a9c7eb12ed1534df0528ce20</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>aa6396fb4ca6737a06f2a27ed43ca1cb7</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a42386729a6ccbf28cfdb027b1403af91</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>aed513a0e28cd4ad96b321a16b931f520</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a7a3ea085b6dc594d0c749938c55941eb</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDMathFunction</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a21782a21ed498d66a1edb4f696925777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a6ab235c85f47fd23e8e817ac980d5717</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>getMathFunc</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a67b90c9529dd52f690091ea0fa919967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>getMathFuncNoArg</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>af6781bf58db13f036ca70cd3c21ce609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>getMathFunc1Arg</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a949a8969e9b32ed7e8799eb2a1d27c10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>getMathFunc2Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a34ba9089435c1d226282ad3de7550656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>getMathFunc3Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>ab7d38292fbfd11257350877e4089f5ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>getMathFunc4Args</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a197aad1f53f4ea7de6943546ffd44ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a9ae8805e9a4102baa579909b400996fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNEDMathFunction.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNEDValue</name>
    <filename>classomnetpp_1_1cNEDValue.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a4d08fdb3b804beaa71a41565bbb5aed1</anchor>
      <arglist>(const cNEDValue &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a99f790fa98987b3f14ad6e21f274f084</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a9d66058ff4de6d7c86a0ed69c3a09daa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a364642337e6d210fe3f412bb7001bdb7</anchor>
      <arglist>(double d, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa54f5567efd3ec5c176b6e45f1e1029c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a32187f45a6118a568e0ccfecec658d79</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa9ca3fd5dae4c71cabec6daac6ce4ffc</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ada2770e0d2de032d593e6d7e750c0f68</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a2924f6cc1546444425b9f08c2ca42327</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a61706249b79f437b4a6c5db5a9f0e845</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a10de0b69b5edd40e9c2638c12e5e0bca</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a52b180468bd1dc873de0db512314dec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a5f40ac7cf2370db579c96b4671b61953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a73c3347f1e43fb8b9f8cac8f3948b91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ae2131312637e31df07c35faded8f78e8</anchor>
      <arglist>(const char *unit) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a6a93a97cd20c30b5a38b371343b41d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a393284ca204556acc5b9c8efde0a88bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a45c9f1dd5d762f494cc2587da047968c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ab189dc0270c52fbc2a8231394959583e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>adcaac7fb4d4e704fed99c9371cea0a5d</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ab22dc072ca1f6b3755c8139d279c23c1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>acf54ecf0b41ba00ee79092deefac812f</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>adab3d15333648a788035ba3ada6e35d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>af25d4978bdb951c33f91ff0e1c50d136</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a4d8214f4144d4ccb78dd8ac638c1777b</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a60e644b6dbc6eebe618bea59370d5748</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a91e5815aa97ad1d85516d2241546943f</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>af7747da954e71cb9a3d0ef00735a7b04</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa03a9e13101d9bf0acd788b99662cb1a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ae41bfafc8987ffd8406e5da91c05e9a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ad90cb9802db359b91e8df7dda606a36f</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a8157643f56e25c3388c4ba701efb7149</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a32dae5dbf280cf1511aa1a6c063e384a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa5fe7b0be5f8ccce2bf24a6325fa3649</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aae10acc60c2317754dcbe79c9b3f1b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a21b3dd35f400f9bff2a5f323bab48630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a6a6c0aaee2d785b48a1e57710ceb586b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ad3458486e208bbd7b782352192c6af82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aef9201b9c209876fc177668454e04c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aafe18270925d13d2d327687c1125ff68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a20a235a3b8231d8f92c779347fc8eb76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a1e468842f87b88e04011cf0834f20f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a5665dbc337111463ad23d3dba99f7ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a2874b8b9dc536df7e5e75833fee24c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a7d27cc515e59f676f08d399124be099d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aac131de7b011269ca1f1892aba95a830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>afc641171fb699c1116758176cd3bf4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a84ff838c325f8502edcf2d5ec8aff8ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ac976964169b81aaba1d4cbb422f559ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a44cc255a4b41c3baea2dad147e288a78</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>abe0c445d9f20ac77b54533577a6f02fd</anchor>
      <arglist>(const char *str, const char *expectedUnit=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a5bbec8611a1d832564a92f0ca546bc7a</anchor>
      <arglist>(const char *str, std::string &amp;outActualUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getPooled</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ab74a52c4a45a291ab96acd2892ec94fd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a99f790fa98987b3f14ad6e21f274f084</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a9d66058ff4de6d7c86a0ed69c3a09daa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a364642337e6d210fe3f412bb7001bdb7</anchor>
      <arglist>(double d, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa54f5567efd3ec5c176b6e45f1e1029c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a32187f45a6118a568e0ccfecec658d79</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa9ca3fd5dae4c71cabec6daac6ce4ffc</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ada2770e0d2de032d593e6d7e750c0f68</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a2924f6cc1546444425b9f08c2ca42327</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a61706249b79f437b4a6c5db5a9f0e845</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a10de0b69b5edd40e9c2638c12e5e0bca</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a52b180468bd1dc873de0db512314dec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a5f40ac7cf2370db579c96b4671b61953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a73c3347f1e43fb8b9f8cac8f3948b91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ae2131312637e31df07c35faded8f78e8</anchor>
      <arglist>(const char *unit) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a6a93a97cd20c30b5a38b371343b41d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a393284ca204556acc5b9c8efde0a88bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a45c9f1dd5d762f494cc2587da047968c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ab189dc0270c52fbc2a8231394959583e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>adcaac7fb4d4e704fed99c9371cea0a5d</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ab22dc072ca1f6b3755c8139d279c23c1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>acf54ecf0b41ba00ee79092deefac812f</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>adab3d15333648a788035ba3ada6e35d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>af25d4978bdb951c33f91ff0e1c50d136</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a4d8214f4144d4ccb78dd8ac638c1777b</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a60e644b6dbc6eebe618bea59370d5748</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a91e5815aa97ad1d85516d2241546943f</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>af7747da954e71cb9a3d0ef00735a7b04</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa03a9e13101d9bf0acd788b99662cb1a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ae41bfafc8987ffd8406e5da91c05e9a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ad90cb9802db359b91e8df7dda606a36f</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a8157643f56e25c3388c4ba701efb7149</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a32dae5dbf280cf1511aa1a6c063e384a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa5fe7b0be5f8ccce2bf24a6325fa3649</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aae10acc60c2317754dcbe79c9b3f1b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a21b3dd35f400f9bff2a5f323bab48630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a6a6c0aaee2d785b48a1e57710ceb586b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>ad3458486e208bbd7b782352192c6af82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aef9201b9c209876fc177668454e04c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aafe18270925d13d2d327687c1125ff68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a20a235a3b8231d8f92c779347fc8eb76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a1e468842f87b88e04011cf0834f20f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a5665dbc337111463ad23d3dba99f7ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a2874b8b9dc536df7e5e75833fee24c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>a7d27cc515e59f676f08d399124be099d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cNEDValue.html</anchorfile>
      <anchor>aac131de7b011269ca1f1892aba95a830</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNegBinomial</name>
    <filename>classomnetpp_1_1cNegBinomial.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cNegBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a4a468550d309211b68f53e586b2e61e1</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNegBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a4a468550d309211b68f53e586b2e61e1</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNoncopyableOwnedObject</name>
    <filename>classomnetpp_1_1cNoncopyableOwnedObject.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cNoncopyableOwnedObject</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a3ccaef17700a8263a1db446f3d121cbf</anchor>
      <arglist>(const char *name=nullptr, bool namepooling=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNoncopyableOwnedObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>aee703aa1cb211bb96a6fbfcf3583d88e</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNormal</name>
    <filename>classomnetpp_1_1cNormal.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a1b38aa12a3505044200e4d80d6daae53</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a1b38aa12a3505044200e4d80d6daae53</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNullEnvir</name>
    <filename>classomnetpp_1_1cNullEnvir.html</filename>
    <base>omnetpp::cEnvir</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8f9108e44afef3f97ecb687e4b20e9fc</anchor>
      <arglist>(cObject *object) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad36a41e2be8a134850684b17b4f36ba8</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSent_OBSOLETE</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8190da79e32888c4b48b5fbb76891f95</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a336081183e31c6df1d59112698318d68</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1d1532198af100b8a10b13f8a322ca4d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a26d98e682cb975371124daced90339ab</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a34b43f3054e1434ad42466e742f5b127</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a5246c17391314741a64a10a358b97529</anchor>
      <arglist>(cMessage *msg, cGate *srcGate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8b2bfc725926c40034fce7ae4f4e826b</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a782ad3b2414fd8521a49e11f85902c22</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a31a6bb57846fb95a0d88f0d03569c3b3</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>acde5166b66864d6b331daa54ad3b9709</anchor>
      <arglist>(cMessage *msg, cMessage *clone) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a2c736148bafc453d1d63cf980117833b</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a7f266407cd290799344aedc4f712ada1</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>abaf01f3a91e50ca6e7c320100534191c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a6494eb9f3a7791fd323c5537a8ed0b97</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab0f1cb1242182e292fd30f152a559f2d</anchor>
      <arglist>(cModule *newmodule) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a90211b850fda69f207b253a974d7c6d1</anchor>
      <arglist>(cModule *module) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a544e643d58dc893a2db9aebea2714c12</anchor>
      <arglist>(cGate *newgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab5e9354719e5e005e53ac57fb68087ae</anchor>
      <arglist>(cGate *gate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a08db1d8f94efbacbccec050df173c406</anchor>
      <arglist>(cGate *srcgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab9538f2c68bafdf6ead02520d72e6d3e</anchor>
      <arglist>(cGate *srcgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a4dc0770b0573e95770f104864a35d62e</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>aeadd1278db27d9de713a78384cefce4b</anchor>
      <arglist>(cObject *obj) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac08c73f89277260ec1fe888b9ac7583d</anchor>
      <arglist>(cLogEntry *entry) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a4375c4f7d44a34d7da3ee4e7cc05a333</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>adf7e1cc0fcac18feb2919cfb2b44bb39</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a5028b334b31026f0d2aa198e84152db9</anchor>
      <arglist>(cPar *par) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a29a4a0682e40eef1e102dde381035ef2</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1aed2cef41aafe7a7cfebfa970b83170</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a3a375f7d1edb6453d2075e7c6fb768d0</anchor>
      <arglist>(const char *content, const char *xpath=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a0b9ad0dcd10a90a68be280e3135b1171</anchor>
      <arglist>(const char *filename) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac248b6ec2e164761c4147decb879df90</anchor>
      <arglist>(const char *content) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad1881c36294c5884db2ceb9d39f26a5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a13d12bc3946bf178be97902d422e6636</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad1d1a6a9cd9a667904dc2caed837822a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a281c6ac6cefd395ac57ca94a80e2371f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8ab3386f3c8425ab75ed92673458af9d</anchor>
      <arglist>(const char *fileName, cComponentType *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a141e4b9fa32d2aa74c2183ca1bed9005</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8719e2a5c85c2ede8b243553a2fe2793</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a905d0631c64af4b5771efd55b1876906</anchor>
      <arglist>(cComponent *component, const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a60d66e19319e0078da55b62067bdac96</anchor>
      <arglist>(const char *prompt, const char *defaultreply=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a3234059e447700c59ba3bf484b7effce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a550eb862ec566739525d1244a819c272</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a50478cbf002226bf4fa42d1d950a95ce</anchor>
      <arglist>(const char *modulename, const char *vectorname) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a56494f8c2629792a5da7c1bd0594934e</anchor>
      <arglist>(void *vechandle) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a551e366d5ba3f8680e97572803aa43b9</anchor>
      <arglist>(void *vechandle, const char *name, const char *value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a65171d612bff370f8b894f8db6c92415</anchor>
      <arglist>(void *vechandle, simtime_t t, double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>abe2cd89d88674f23b39480b5374b8e17</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a362cfe8ae57e9057b7e264689246169e</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>afc8df9503189d3f6dd06f359e3e562ca</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>af4368a48177a84231fe8084dba309722</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a72cfe41ba7ac30085fb145ebc632ca84</anchor>
      <arglist>(std::ostream *os) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a43be3d7560ad906c2d3b9b8107e5ea8d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac825d0a5b7b381aca2660be90552da5b</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a5a37891b5e1010508f79d638241e2225</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8fcb5a41f6f5d099e3c26f4708169dfa</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a2c83b9c96638f5427e54b5e987d9c63c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a83f281e4ff5e19e8fbfec1cacad79b33</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attachDebugger</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad57daf73b9b94924e382383b06f4ddca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab8dc0377b2245bb0ef1611b8d2fd30fa</anchor>
      <arglist>(cISimulationLifecycleListener *listener) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a9e1bf66f0ef9aa95bd9ae08bf3218760</anchor>
      <arglist>(cISimulationLifecycleListener *listener) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNumericResultFilter</name>
    <filename>classomnetpp_1_1cNumericResultFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNumericResultRecorder</name>
    <filename>classomnetpp_1_1cNumericResultRecorder.html</filename>
    <base>omnetpp::cResultRecorder</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObject</name>
    <filename>classomnetpp_1_1cObject.html</filename>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a19c327c658826577208cd63317db3373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9f88630a430d31cf2caf4abd8d857e6a</anchor>
      <arglist>(const cObject &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>aafe3a7f7ab9e37024e2ea482e12968de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a8854bcb69efa2af6f8c7cae3ee92bbf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a70f88e8edc62f8abd5db1b0328eb7ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a432e6710315c241729f8d6f492b6318a</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ad1fc98ea6bfdb645f6d08cbc065245fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>abbb39e4a93ad7710aeca9970ef17a15d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>aa61b1c46391e86b19a6a9176605e59c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a39640237e61d62b024692ae017b9efa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9363681f09d39d04631ec55eb15cb388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6a1cd9aeed4205dc0553d6cdc69f06ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a95affb0d0d508d477e182fcac8379afc</anchor>
      <arglist>(cCommBuffer *buffer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9ef56c03ddb3166c46048ed65b767a72</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>acc646c6199a326bdff221c6995586adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ac6d2c9566a92eedd883945ed9a5677bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6fbbab48c06f13814a0a7a71537ae500</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2e891dff011a9e6a5ff3fda07962d13a</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>af0a0559d90e1a9de8a581ec3854c460a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a0f12f812ec24a2b8c9137da85268bf24</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a32f73a8adf0bf38a045afcbd9babbd05</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9d79054c2c4ee2e7738e0e0cd3555713</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a70f88e8edc62f8abd5db1b0328eb7ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a432e6710315c241729f8d6f492b6318a</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ad1fc98ea6bfdb645f6d08cbc065245fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>abbb39e4a93ad7710aeca9970ef17a15d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>aa61b1c46391e86b19a6a9176605e59c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a39640237e61d62b024692ae017b9efa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9363681f09d39d04631ec55eb15cb388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6a1cd9aeed4205dc0553d6cdc69f06ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a0f12f812ec24a2b8c9137da85268bf24</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a32f73a8adf0bf38a045afcbd9babbd05</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9d79054c2c4ee2e7738e0e0cd3555713</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a95affb0d0d508d477e182fcac8379afc</anchor>
      <arglist>(cCommBuffer *buffer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9ef56c03ddb3166c46048ed65b767a72</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>acc646c6199a326bdff221c6995586adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ac6d2c9566a92eedd883945ed9a5677bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6fbbab48c06f13814a0a7a71537ae500</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2e891dff011a9e6a5ff3fda07962d13a</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>af0a0559d90e1a9de8a581ec3854c460a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectFactory</name>
    <filename>classomnetpp_1_1cObjectFactory.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cObjectFactory</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>adca682b0fe95761d2544143d1d2497c3</anchor>
      <arglist>(const char *name, cObject *(*creatorfunc)(), void *(*castfunc)(cObject *), const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstract</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a5cac993da33675986a5e705d5488c4dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a422215ae1f9b9326b3dbc114f42ab552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstance</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>af826371ac83a5b6b466d42cc1682505a</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a618519deedecc134daf6f45128cab03f</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a48fceee48320fe539f535252ca9baadc</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a88064a4400527ea9e98816f3dbdb1162</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>afcdd5345b13c9d6b71ebf291db766ab4</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObjectFactory</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>adca682b0fe95761d2544143d1d2497c3</anchor>
      <arglist>(const char *name, cObject *(*creatorfunc)(), void *(*castfunc)(cObject *), const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstract</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a5cac993da33675986a5e705d5488c4dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a422215ae1f9b9326b3dbc114f42ab552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstance</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>af826371ac83a5b6b466d42cc1682505a</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a75a561fea2eb253bec2f2d45a53e6bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a618519deedecc134daf6f45128cab03f</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a48fceee48320fe539f535252ca9baadc</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a88064a4400527ea9e98816f3dbdb1162</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>afcdd5345b13c9d6b71ebf291db766ab4</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectOsgNode</name>
    <filename>classomnetpp_1_1cObjectOsgNode.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectResultFilter</name>
    <filename>classomnetpp_1_1cObjectResultFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::CodeFragments</name>
    <filename>classomnetpp_1_1CodeFragments.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Color</name>
    <filename>structomnetpp_1_1cFigure_1_1Color.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOsgCanvas</name>
    <filename>classomnetpp_1_1cOsgCanvas.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="struct">omnetpp::cOsgCanvas::Viewpoint</class>
    <member kind="enumeration">
      <type></type>
      <name>ViewerStyle</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gaf0b73d3d331edf08d7b2401b48622652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CameraManipulatorType</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gae9cf5117e3a9b51d6ded7154cd384906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a09461df716e8fcd4813501a387dd0901</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8a8a5aac326621921cba707f8c291234</anchor>
      <arglist>(osg::Node *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual osg::Node *</type>
      <name>getScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>abc381dcb18ad7a7414f6645ece27f607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a008e95db0f26057186c8ea3c71b02084</anchor>
      <arglist>(ViewerStyle viewerStyle)</arglist>
    </member>
    <member kind="function">
      <type>ViewerStyle</type>
      <name>getViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aeb0e5156c305f70e7774c59a685fc201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd60e9605b54ac5f9ea1a962fc4bff02</anchor>
      <arglist>(Color clearColor)</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a4324b6ca3fbd313e68be5c06e1c39e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ab16208e1fdf8295c6786460e9e55f45f</anchor>
      <arglist>(CameraManipulatorType manipulator)</arglist>
    </member>
    <member kind="function">
      <type>CameraManipulatorType</type>
      <name>getCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a44796687558c07e4398edc4939d9a89b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a793f3b70365ddb0f99daeab3585683d2</anchor>
      <arglist>(double fieldOfViewAngle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aac13a41d7e954aed8fc590921882fdc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a5d497aeb40cb3788dacf6aec963b6c77</anchor>
      <arglist>(double zNear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8220e5acf11a0a24d6ee3139f56e1fa8</anchor>
      <arglist>(double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a0e6628f1bab0e2a095fc35b1d3009694</anchor>
      <arglist>(double zNear, double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>adaa79dd9873faa2c93425f2a6cb79581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acf37b71666d4966c906e2dbbccadc7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a20cf70fa61b014923caffb39be1211aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a383934f5a08796ff1625bd68fbc95830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1541d87ab041039a3a1aa0e20dfa3ea9</anchor>
      <arglist>(const Viewpoint &amp;viewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const Viewpoint &amp;</type>
      <name>getGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a690bb3d7fb35190b989ae5d8f593b56e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a95807e5383512a4dfafc106020a8d5b1</anchor>
      <arglist>(const osgEarth::Viewpoint &amp;earthViewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const osgEarth::Viewpoint &amp;</type>
      <name>getEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a540f345d63bd1de61930ce0f887e4cc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a09461df716e8fcd4813501a387dd0901</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8a8a5aac326621921cba707f8c291234</anchor>
      <arglist>(osg::Node *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual osg::Node *</type>
      <name>getScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>abc381dcb18ad7a7414f6645ece27f607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a008e95db0f26057186c8ea3c71b02084</anchor>
      <arglist>(ViewerStyle viewerStyle)</arglist>
    </member>
    <member kind="function">
      <type>ViewerStyle</type>
      <name>getViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aeb0e5156c305f70e7774c59a685fc201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd60e9605b54ac5f9ea1a962fc4bff02</anchor>
      <arglist>(Color clearColor)</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a4324b6ca3fbd313e68be5c06e1c39e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ab16208e1fdf8295c6786460e9e55f45f</anchor>
      <arglist>(CameraManipulatorType manipulator)</arglist>
    </member>
    <member kind="function">
      <type>CameraManipulatorType</type>
      <name>getCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a44796687558c07e4398edc4939d9a89b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a793f3b70365ddb0f99daeab3585683d2</anchor>
      <arglist>(double fieldOfViewAngle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aac13a41d7e954aed8fc590921882fdc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a5d497aeb40cb3788dacf6aec963b6c77</anchor>
      <arglist>(double zNear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8220e5acf11a0a24d6ee3139f56e1fa8</anchor>
      <arglist>(double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a0e6628f1bab0e2a095fc35b1d3009694</anchor>
      <arglist>(double zNear, double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>adaa79dd9873faa2c93425f2a6cb79581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acf37b71666d4966c906e2dbbccadc7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a20cf70fa61b014923caffb39be1211aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a383934f5a08796ff1625bd68fbc95830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1541d87ab041039a3a1aa0e20dfa3ea9</anchor>
      <arglist>(const Viewpoint &amp;viewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const Viewpoint &amp;</type>
      <name>getGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a690bb3d7fb35190b989ae5d8f593b56e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a95807e5383512a4dfafc106020a8d5b1</anchor>
      <arglist>(const osgEarth::Viewpoint &amp;earthViewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const osgEarth::Viewpoint &amp;</type>
      <name>getEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a540f345d63bd1de61930ce0f887e4cc8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOutVector</name>
    <filename>classomnetpp_1_1cOutVector.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b120a883e2c6cac3ed7e5f2e1e305e9</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae710f134555e2e90cf80e77f3e88fd33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aaa720f0373785b1d4a0c63013ff590d9</anchor>
      <arglist>(const char *registeredEnumName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab7f3b34616c552b3e217a0420858865e</anchor>
      <arglist>(cEnum *enumDecl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9aa52943a9f7c2a24e13c94e1be5acbe</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a893411190ca1d9df510fc6695122cb15</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolationMode</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a76b2b4fb57076bf0edef9c9900006903</anchor>
      <arglist>(InterpolationMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMin</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a41f5c3ab06740760e338bd3498d70ab4</anchor>
      <arglist>(double minValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMax</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>af9e2d3d9c2f05ea2bdd4ec3a58d07b79</anchor>
      <arglist>(double maxValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9d9023fc8be8ea65240ebd2f4a760f3f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae981cfc4db52ee570159445618b8f738</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a13bb325bf01759ea9b42897acdca8a72</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5d21284d0b17a0aad1086a67665f55ac</anchor>
      <arglist>(simtime_t t, SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a0111431f6286280f1532e5ae24763edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a07d0958526619eadcc9dbdc65bd8c987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b6678112201531a509c5b8aa850941e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7d36314018b5e4330d3b0f90808e896b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6477bc7f84b1c4ef4e6c3d8c6294d5b6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a1a4286a4e7c27e32402280e9b788efa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesReceived</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab153da7eaeabe16d9fb0471efa7e5742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesStored</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aac092a2fb0a7aad425fe67f7673a24ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b120a883e2c6cac3ed7e5f2e1e305e9</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae710f134555e2e90cf80e77f3e88fd33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aaa720f0373785b1d4a0c63013ff590d9</anchor>
      <arglist>(const char *registeredEnumName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab7f3b34616c552b3e217a0420858865e</anchor>
      <arglist>(cEnum *enumDecl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9aa52943a9f7c2a24e13c94e1be5acbe</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a893411190ca1d9df510fc6695122cb15</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolationMode</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a76b2b4fb57076bf0edef9c9900006903</anchor>
      <arglist>(InterpolationMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMin</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a41f5c3ab06740760e338bd3498d70ab4</anchor>
      <arglist>(double minValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMax</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>af9e2d3d9c2f05ea2bdd4ec3a58d07b79</anchor>
      <arglist>(double maxValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9d9023fc8be8ea65240ebd2f4a760f3f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae981cfc4db52ee570159445618b8f738</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a13bb325bf01759ea9b42897acdca8a72</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5d21284d0b17a0aad1086a67665f55ac</anchor>
      <arglist>(simtime_t t, SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a0111431f6286280f1532e5ae24763edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a07d0958526619eadcc9dbdc65bd8c987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b6678112201531a509c5b8aa850941e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7d36314018b5e4330d3b0f90808e896b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6477bc7f84b1c4ef4e6c3d8c6294d5b6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a1a4286a4e7c27e32402280e9b788efa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesReceived</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab153da7eaeabe16d9fb0471efa7e5742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesStored</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aac092a2fb0a7aad425fe67f7673a24ae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOvalFigure</name>
    <filename>classomnetpp_1_1cOvalFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cOvalFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a717219040c0d6f4ea0816606e52ac4f5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOvalFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a717219040c0d6f4ea0816606e52ac4f5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOwnedObject</name>
    <filename>classomnetpp_1_1cOwnedObject.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a7f32d0c4779ab2a168543abc889925ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ada672f2b20d2d7470d8a1807c3c499d2</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a73f9af4059edeaea7700ebfa708df027</anchor>
      <arglist>(const cOwnedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a1b56d769aad3147e670dd8379c552fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a371064c3874a82a97af56633697f127e</anchor>
      <arglist>(const cOwnedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a621ff186e02e08a69c0ccc45bccd97fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a2a6c9f508df1f39823c4e021bd700ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetObjectCounters</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ab897b3db5c360836c312c283956ee059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a7f32d0c4779ab2a168543abc889925ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ada672f2b20d2d7470d8a1807c3c499d2</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a73f9af4059edeaea7700ebfa708df027</anchor>
      <arglist>(const cOwnedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a1b56d769aad3147e670dd8379c552fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a371064c3874a82a97af56633697f127e</anchor>
      <arglist>(const cOwnedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>abff82ccf31f4fffe8dda8efb2b380f3a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>add5072d22bcbc3fc795e65a23970f3f8</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a0626b44cf9fe2c413d04e668d9a20b66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDefaultList *</type>
      <name>getDefaultOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a6094d8b17f6e1ff797d8bf65bcf3f991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a621ff186e02e08a69c0ccc45bccd97fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a2a6c9f508df1f39823c4e021bd700ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetObjectCounters</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ab897b3db5c360836c312c283956ee059</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPacket</name>
    <filename>classomnetpp_1_1cPacket.html</filename>
    <base>omnetpp::cMessage</base>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a87a6fcf80431d091d8a627de93cec0f5</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a44ef5aec0b7ee5a20e16d43a359dea07</anchor>
      <arglist>(const char *name=nullptr, short kind=0, int64_t bitLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adacfa90ceccb9a776bacb49059b84c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a1bfce61443b7812c94d4768e90fb58bd</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2237f5bd26da210d7d5d9263cf3475ba</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>af0218b16079c94390bc0e66bf6fa4d82</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a990a669a293d41412734605f0b4dfd0f</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2a0eec0a82efb19d77626244b46c7d9b</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acb6d55ae3df7e3870a177893764c57a5</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a507cc8cf5a3c9da175020e2683a04dbe</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a20c4770653df70c4a963a5c47bae0c52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab5b9a8697180a2eefaee97dc0387191b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa6060f23d98f3370b77c9f66674f4ff3</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ad8b3824d8bd1b44ce5c833a2ceac0307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>encapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a777dbb2397769d3a4b94cb1ff40cfca3</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a24f2945ce67c8a77e09d1a69842e66c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>afb480df84641f9dbb6c96d13e20b1523</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a8cdf02848e5d73776a52c888b6f5209a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab4a142b1df3a86c36287986eda408666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptionStart</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa7d620f6f823c504d00ef07c6144713a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a87a6fcf80431d091d8a627de93cec0f5</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a44ef5aec0b7ee5a20e16d43a359dea07</anchor>
      <arglist>(const char *name=nullptr, short kind=0, int64_t bitLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adacfa90ceccb9a776bacb49059b84c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a1bfce61443b7812c94d4768e90fb58bd</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2237f5bd26da210d7d5d9263cf3475ba</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>af0218b16079c94390bc0e66bf6fa4d82</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a990a669a293d41412734605f0b4dfd0f</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2a0eec0a82efb19d77626244b46c7d9b</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acb6d55ae3df7e3870a177893764c57a5</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a507cc8cf5a3c9da175020e2683a04dbe</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a20c4770653df70c4a963a5c47bae0c52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab5b9a8697180a2eefaee97dc0387191b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa6060f23d98f3370b77c9f66674f4ff3</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ad8b3824d8bd1b44ce5c833a2ceac0307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>encapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a777dbb2397769d3a4b94cb1ff40cfca3</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a24f2945ce67c8a77e09d1a69842e66c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>afb480df84641f9dbb6c96d13e20b1523</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a8cdf02848e5d73776a52c888b6f5209a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab4a142b1df3a86c36287986eda408666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptionStart</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa7d620f6f823c504d00ef07c6144713a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPacketQueue</name>
    <filename>classomnetpp_1_1cPacketQueue.html</filename>
    <base>omnetpp::cQueue</base>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ae7d07727a24ccea09eff943984da5bbb</anchor>
      <arglist>(const char *name=nullptr, CompareFunc cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8aaa53fda10590d97afcd0867a56809b</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>cPacketQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a25427c09fd84978d75094f2c7efbe6b2</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a09428e0375ce1fb1752f377bb7eba342</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af1d0c318a55d43f928dbffd749fa17de</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a740b997199a122269b773fb8736b3afb</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>add0c33dcff509c964aab7a187ba1d945</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5f12769dea3af371e7e8dc424c6813a6</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a831518137d7448c1ea60806e4e6b1e41</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5c8f57d9ad49e1a72aa87d3ea8b8a1a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ab5b9a8697180a2eefaee97dc0387191b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a926b4dc6e337c605a7e43231a3ce5c28</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a7ecc20074ce720249aa556589eb0f0a5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>afc62174dbef2282b82ad2757f343f99f</anchor>
      <arglist>(int i) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ae7d07727a24ccea09eff943984da5bbb</anchor>
      <arglist>(const char *name=nullptr, CompareFunc cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8aaa53fda10590d97afcd0867a56809b</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>cPacketQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a25427c09fd84978d75094f2c7efbe6b2</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a09428e0375ce1fb1752f377bb7eba342</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af1d0c318a55d43f928dbffd749fa17de</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a740b997199a122269b773fb8736b3afb</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>add0c33dcff509c964aab7a187ba1d945</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5f12769dea3af371e7e8dc424c6813a6</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a831518137d7448c1ea60806e4e6b1e41</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5c8f57d9ad49e1a72aa87d3ea8b8a1a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ab5b9a8697180a2eefaee97dc0387191b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a926b4dc6e337c605a7e43231a3ce5c28</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a7ecc20074ce720249aa556589eb0f0a5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>afc62174dbef2282b82ad2757f343f99f</anchor>
      <arglist>(int i) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPar</name>
    <filename>classomnetpp_1_1cPar.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPar</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a9b5d994a48ed104f505c4810168dabfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>abff82ccf31f4fffe8dda8efb2b380f3a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a192c7aac5fc73b8864528f38cbd0b7e9</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a60f3b6d3ead55d0e1907dfb1e3d6a965</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acade5cc8961b8765a933ae318b974e08</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af3354e6460cc7716c06fe62d653fc1ee</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad53988b418d34bde02693fcbcbe24a12</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a05d18dfd7fb2b240693b6037ee8aa19b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a65b08b3f376ccc0ddae94b7b5f0e5042</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a231ab5cebcaa101d992fa7853b01fff4</anchor>
      <arglist>(cExpression *e, cComponent *evalcontext=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ace14cc350c8c904ec72077026c740eb1</anchor>
      <arglist>(cComponent *ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a52b180468bd1dc873de0db512314dec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a5f40ac7cf2370db579c96b4671b61953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a73c3347f1e43fb8b9f8cac8f3948b91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6a93a97cd20c30b5a38b371343b41d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a393284ca204556acc5b9c8efde0a88bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a07323fc579e4fedcc2d7d05aeca8d98e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ab189dc0270c52fbc2a8231394959583e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a80f8566f607c44ed12280a9048638834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a81e10ffbf1e02d8fa54bf3f2bb077fef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2a5871ff7101360e17ce50fbd8b6929c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a658e9774904da1cacf53f232faa48a32</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a27a990b64c90fb7336219d48de54feb1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2359a2ab3335b214365f92b905c2d9ed</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56f63d31e3095027941e63ef66a849a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a39dc47ee76b8d35bc9a28cea64d9c2a4</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a38c481cd40010fcdc7a15b34975fa4bc</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4c709bcf1716c065da06460db521f7de</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8396c9356a0b9c3d429a172de93fdd6a</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3448d665865a88d16251d9c488cbdb0b</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6854cdd22eafa29b1def75bafc1f510e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6fd4e6975f9a96804b909487dfeaa3ec</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aab287f7112fd2df08972edc3ebdc58ed</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1bca5481b349d47ab6c38ac6459a2777</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae3161ffac9fdc5f90bb73ff8744b83eb</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aae10acc60c2317754dcbe79c9b3f1b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a21b3dd35f400f9bff2a5f323bab48630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6a6c0aaee2d785b48a1e57710ceb586b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad3458486e208bbd7b782352192c6af82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aef9201b9c209876fc177668454e04c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aafe18270925d13d2d327687c1125ff68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a20a235a3b8231d8f92c779347fc8eb76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1e468842f87b88e04011cf0834f20f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a5665dbc337111463ad23d3dba99f7ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2874b8b9dc536df7e5e75833fee24c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a7d27cc515e59f676f08d399124be099d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aac131de7b011269ca1f1892aba95a830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>afc641171fb699c1116758176cd3bf4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a84ff838c325f8502edcf2d5ec8aff8ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac26d39514175b278d52c6e149b470ea9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a29a1922590a4350b3aed6989f4af3ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aa31ac0774e257c67267ee166f7d66d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac976964169b81aaba1d4cbb422f559ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2aff9080d4f68039805cccb668d7f5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a29282c3089315ea720b8fdddac7dc746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a60f3b6d3ead55d0e1907dfb1e3d6a965</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acade5cc8961b8765a933ae318b974e08</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af3354e6460cc7716c06fe62d653fc1ee</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad53988b418d34bde02693fcbcbe24a12</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a05d18dfd7fb2b240693b6037ee8aa19b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a65b08b3f376ccc0ddae94b7b5f0e5042</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a231ab5cebcaa101d992fa7853b01fff4</anchor>
      <arglist>(cExpression *e, cComponent *evalcontext=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ace14cc350c8c904ec72077026c740eb1</anchor>
      <arglist>(cComponent *ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a52b180468bd1dc873de0db512314dec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a5f40ac7cf2370db579c96b4671b61953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a73c3347f1e43fb8b9f8cac8f3948b91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6a93a97cd20c30b5a38b371343b41d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a393284ca204556acc5b9c8efde0a88bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a07323fc579e4fedcc2d7d05aeca8d98e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ab189dc0270c52fbc2a8231394959583e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a80f8566f607c44ed12280a9048638834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a81e10ffbf1e02d8fa54bf3f2bb077fef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2a5871ff7101360e17ce50fbd8b6929c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a658e9774904da1cacf53f232faa48a32</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a27a990b64c90fb7336219d48de54feb1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2359a2ab3335b214365f92b905c2d9ed</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56f63d31e3095027941e63ef66a849a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a39dc47ee76b8d35bc9a28cea64d9c2a4</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a38c481cd40010fcdc7a15b34975fa4bc</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4c709bcf1716c065da06460db521f7de</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8396c9356a0b9c3d429a172de93fdd6a</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3448d665865a88d16251d9c488cbdb0b</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6854cdd22eafa29b1def75bafc1f510e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6fd4e6975f9a96804b909487dfeaa3ec</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aab287f7112fd2df08972edc3ebdc58ed</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1bca5481b349d47ab6c38ac6459a2777</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae3161ffac9fdc5f90bb73ff8744b83eb</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aae10acc60c2317754dcbe79c9b3f1b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a21b3dd35f400f9bff2a5f323bab48630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6a6c0aaee2d785b48a1e57710ceb586b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad3458486e208bbd7b782352192c6af82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aef9201b9c209876fc177668454e04c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aafe18270925d13d2d327687c1125ff68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a20a235a3b8231d8f92c779347fc8eb76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1e468842f87b88e04011cf0834f20f01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a5665dbc337111463ad23d3dba99f7ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2874b8b9dc536df7e5e75833fee24c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>abdd0820f8401e11e09a1e92ab7f4d864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a7d27cc515e59f676f08d399124be099d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aac131de7b011269ca1f1892aba95a830</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParetoShifted</name>
    <filename>classomnetpp_1_1cParetoShifted.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cParetoShifted *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a6faafdc8c5840e57f69b294c4edf8339</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParetoShifted *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a6faafdc8c5840e57f69b294c4edf8339</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParImpl</name>
    <filename>classomnetpp_1_1cParImpl.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c027fd421922b49e22b1929db8ea58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad51ea392009a5fad9adaa09c828bc38d</anchor>
      <arglist>(const cParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aea8766f810e61380f298a3569cb2081d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cParImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af5ce8f05cacfa2efb280f7440e3d1711</anchor>
      <arglist>(const cParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a0765f6910828cd5ed9114da472c39e6d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1f527eb6d8f4e8e889489f1d63387b98</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ac02650ed2591c46c491b97c286f5d07e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aaaa77b3ac88cb639fd6a7d655cab8554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a25fef71f58977531b0a341dcc55d0286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3072cbb4d012dfa2e329f553fa18efe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aed93752a75ba9645635e32a675fbe3f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a73e0054d63ab185f70aa0d018b72093a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a616a8f5cdf9f79800e760c6ac2d174ee</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1d52ed617158bd7f9df2906585bb13c7</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>afa9c43994f52fed546cd49476589314d</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4d526b42c5770d19edcfe93d5f9da723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af7b523092fae856cae3088068c800601</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a343dff88d3305e9e7d7d7211ffb1e2e5</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9321fd8f1e99cd89b928a6e198e54d17</anchor>
      <arglist>(long l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3bec96b77627a85f6361e1f38e0a6711</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1e305c1697ea8b15aff2e617f588a34d</anchor>
      <arglist>(const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9533468d4b52d84a2353f75ca1990ede</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a6343c5c20f9db5587d43cf4605239dae</anchor>
      <arglist>(cXMLElement *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da3170fa04875f5794c9aa9d09e2007</anchor>
      <arglist>(cExpression *e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a938970373e87f6a184be5dae68b127c4</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>abbd2c01642c7a4738eac426ab746706a</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae98c13349ef7692ef3357935f9cb14f8</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae75179e3e51084137752e297297000f3</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aaab510fd22aeb08f369498f686dffd46</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a51a6279b068a032bb38f5fa372bf6778</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ade6ed4995385ca1e20750900ae9a1fcd</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>adc57a2a39cac4db83f2f91296a9de4be</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae1c44337f1ad81d774482f9eccce7012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4c3f4ab81f28176b26e5e7a735445f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetParImplObjectCounters</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a12d384fbc31409673e54f473fa589d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c027fd421922b49e22b1929db8ea58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad51ea392009a5fad9adaa09c828bc38d</anchor>
      <arglist>(const cParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aea8766f810e61380f298a3569cb2081d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cParImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af5ce8f05cacfa2efb280f7440e3d1711</anchor>
      <arglist>(const cParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a0765f6910828cd5ed9114da472c39e6d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1f527eb6d8f4e8e889489f1d63387b98</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ac02650ed2591c46c491b97c286f5d07e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aaaa77b3ac88cb639fd6a7d655cab8554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a25fef71f58977531b0a341dcc55d0286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3072cbb4d012dfa2e329f553fa18efe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aed93752a75ba9645635e32a675fbe3f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a73e0054d63ab185f70aa0d018b72093a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a616a8f5cdf9f79800e760c6ac2d174ee</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1d52ed617158bd7f9df2906585bb13c7</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>afa9c43994f52fed546cd49476589314d</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4d526b42c5770d19edcfe93d5f9da723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af7b523092fae856cae3088068c800601</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a343dff88d3305e9e7d7d7211ffb1e2e5</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9321fd8f1e99cd89b928a6e198e54d17</anchor>
      <arglist>(long l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3bec96b77627a85f6361e1f38e0a6711</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1e305c1697ea8b15aff2e617f588a34d</anchor>
      <arglist>(const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9533468d4b52d84a2353f75ca1990ede</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a6343c5c20f9db5587d43cf4605239dae</anchor>
      <arglist>(cXMLElement *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da3170fa04875f5794c9aa9d09e2007</anchor>
      <arglist>(cExpression *e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a938970373e87f6a184be5dae68b127c4</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>abbd2c01642c7a4738eac426ab746706a</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae98c13349ef7692ef3357935f9cb14f8</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae75179e3e51084137752e297297000f3</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aaab510fd22aeb08f369498f686dffd46</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a51a6279b068a032bb38f5fa372bf6778</anchor>
      <arglist>(cComponent *context) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ade6ed4995385ca1e20750900ae9a1fcd</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a241c9a108dd32e8529548b6affc7472e</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a44bbc7d4bbbd6d3ad3fd139ee8fb6d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ac6520c400be49eba9e6635ac51d7bfcb</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af0ecabdaf7b411d60d131bbeda4ba55b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cParImpl *</type>
      <name>createWithType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a55e4bf44a7ebe03e87c114fc0b02f8b1</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>adc57a2a39cac4db83f2f91296a9de4be</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae1c44337f1ad81d774482f9eccce7012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4c3f4ab81f28176b26e5e7a735445f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetParImplObjectCounters</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a12d384fbc31409673e54f473fa589d04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParsimCommunications</name>
    <filename>classomnetpp_1_1cParsimCommunications.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimCommunications</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a890a36a5a7e32261a589e00d62cf4110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5be7e5a13ea77d59aac45d21dceb6a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a618e8560b89583a7ce8212d95a000c87</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a9a0daa66fd24c6e91824ab136e917a37</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a28d22c9efedfc9c737477865dd376335</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a44773c9931df49f630866e38edeb0867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a11d729434acf2bbeb1b2372327425583</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ac2850d62eab6b0b2cf851b50c648546b</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5017f71551c89284cfd5c3099dc5325</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>aef8aebf1724e5c268f7d80082a8177da</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ae08d8a31af68964d88b4c3695cb8cacd</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5be7e5a13ea77d59aac45d21dceb6a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a618e8560b89583a7ce8212d95a000c87</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a9a0daa66fd24c6e91824ab136e917a37</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a28d22c9efedfc9c737477865dd376335</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a44773c9931df49f630866e38edeb0867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a11d729434acf2bbeb1b2372327425583</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ac2850d62eab6b0b2cf851b50c648546b</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5017f71551c89284cfd5c3099dc5325</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>aef8aebf1724e5c268f7d80082a8177da</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ae08d8a31af68964d88b4c3695cb8cacd</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPathChangeNotification</name>
    <filename>classomnetpp_1_1cPathChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathStartGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>aa56d54490db6a400c7f3e05e29bcc6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathEndGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>a64f78fca8a5353c0db1a595c680e8eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>changedGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>ab17a9155dc19afb153bc2c378592afa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPathFigure</name>
    <filename>classomnetpp_1_1cPathFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPathFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ac41b4ab1624a41823eac47f51633c8fc</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPathFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ac41b4ab1624a41823eac47f51633c8fc</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPatternMatcher</name>
    <filename>classomnetpp_1_1cPatternMatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a44b18dc37a8fe349d379cc55e84cc4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>af569d610b111afa764f0dae17b9d1c85</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>afd839e84f0e880b12876933ba89678d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a928a43596a234d42196aee3d75078410</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>afa19da52746a41a07eb9899aef4f4eca</anchor>
      <arglist>(const char *line)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>patternPrefixMatches</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a00d71c134f69f987298e083090a945be</anchor>
      <arglist>(const char *line, int suffixoffset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>debugStr</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a7e67c7a26e436a8f96cb4154a010d69f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>accd2600060dbaee3a3b41aed4034c63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>containsWildcards</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a311ad41a5f1f1b5761736923d19e12b4</anchor>
      <arglist>(const char *pattern)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPieSliceFigure</name>
    <filename>classomnetpp_1_1cPieSliceFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPieSliceFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>af0a63318cf84fa8e7434ecb89a9c1c25</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPieSliceFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>af0a63318cf84fa8e7434ecb89a9c1c25</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPixmapFigure</name>
    <filename>classomnetpp_1_1cPixmapFigure.html</filename>
    <base>omnetpp::cAbstractImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPixmapFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a376b77579abe23cf2f6d542db104955c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPixmapFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a376b77579abe23cf2f6d542db104955c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPoisson</name>
    <filename>classomnetpp_1_1cPoisson.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPoisson *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>ade9ec37a5c02e5fbb0201340436659a6</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPoisson *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>ade9ec37a5c02e5fbb0201340436659a6</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPolygonFigure</name>
    <filename>classomnetpp_1_1cPolygonFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolygonFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>aee940a4e6c5499a8d65f27a2c530c150</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolygonFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>aee940a4e6c5499a8d65f27a2c530c150</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPolylineFigure</name>
    <filename>classomnetpp_1_1cPolylineFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolylineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ac71d3e6cf4fa9877e2c8733276956649</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolylineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ac71d3e6cf4fa9877e2c8733276956649</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostDisplayStringChangeNotification</name>
    <filename>classomnetpp_1_1cPostDisplayStringChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classomnetpp_1_1cPostDisplayStringChangeNotification.html</anchorfile>
      <anchor>a3f03c9762432f25d9aaa5b7fd69ff4b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateAddNotification</name>
    <filename>classomnetpp_1_1cPostGateAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateAddNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateConnectNotification</name>
    <filename>classomnetpp_1_1cPostGateConnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPostGateConnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateDeleteNotification</name>
    <filename>classomnetpp_1_1cPostGateDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a0fc4c1be29ae9cee62a8cc937249e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>acbd2d6728e9c5590fafe746ae70505a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateDisconnectNotification</name>
    <filename>classomnetpp_1_1cPostGateDisconnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>a521c5505d3bebcffb15749cd791f6fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>ae76691f2e601775502329464d3efe9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateVectorResizeNotification</name>
    <filename>classomnetpp_1_1cPostGateVectorResizeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>oldSize</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a2712b3bec762b10ff070dfc3095522d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleAddNotification</name>
    <filename>classomnetpp_1_1cPostModuleAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleDeleteNotification</name>
    <filename>classomnetpp_1_1cPostModuleDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0d0c5d8894e9a5940495302ce01a42eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0ef8b0ef2e7ee70d6c59655d0689e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a265fe9d3fb70f123f71f183c5cdc339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>ab712ac373b9cd37f1711c7228de99db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a750b5d744c39a06bfb13e6eb010e35d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleReparentNotification</name>
    <filename>classomnetpp_1_1cPostModuleReparentNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleReparentNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>oldParentModule</name>
      <anchorfile>classomnetpp_1_1cPostModuleReparentNotification.html</anchorfile>
      <anchor>af56babb02216b2b11ed05c064d303380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostParameterChangeNotification</name>
    <filename>classomnetpp_1_1cPostParameterChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cPostParameterChangeNotification.html</anchorfile>
      <anchor>a7930cad613629b4f212280cd067d4dda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostPathCreateNotification</name>
    <filename>classomnetpp_1_1cPostPathCreateNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostPathCutNotification</name>
    <filename>classomnetpp_1_1cPostPathCutNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreDisplayStringChangeNotification</name>
    <filename>classomnetpp_1_1cPreDisplayStringChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classomnetpp_1_1cPreDisplayStringChangeNotification.html</anchorfile>
      <anchor>a3f03c9762432f25d9aaa5b7fd69ff4b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateAddNotification</name>
    <filename>classomnetpp_1_1cPreGateAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a0fc4c1be29ae9cee62a8cc937249e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>acbd2d6728e9c5590fafe746ae70505a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateConnectNotification</name>
    <filename>classomnetpp_1_1cPreGateConnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>a521c5505d3bebcffb15749cd791f6fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>ae76691f2e601775502329464d3efe9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateDeleteNotification</name>
    <filename>classomnetpp_1_1cPreGateDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateDeleteNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateDisconnectNotification</name>
    <filename>classomnetpp_1_1cPreGateDisconnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPreGateDisconnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateVectorResizeNotification</name>
    <filename>classomnetpp_1_1cPreGateVectorResizeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>newSize</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a6963928aa498edcd0d1540bd8321a49a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleAddNotification</name>
    <filename>classomnetpp_1_1cPreModuleAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a0ef8b0ef2e7ee70d6c59655d0689e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a265fe9d3fb70f123f71f183c5cdc339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>ab712ac373b9cd37f1711c7228de99db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a750b5d744c39a06bfb13e6eb010e35d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleDeleteNotification</name>
    <filename>classomnetpp_1_1cPreModuleDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreModuleDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleReparentNotification</name>
    <filename>classomnetpp_1_1cPreModuleReparentNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreModuleReparentNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>newParentModule</name>
      <anchorfile>classomnetpp_1_1cPreModuleReparentNotification.html</anchorfile>
      <anchor>a2244450cdaa4374d0143a143878e6a54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreParameterChangeNotification</name>
    <filename>classomnetpp_1_1cPreParameterChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cPreParameterChangeNotification.html</anchorfile>
      <anchor>a7930cad613629b4f212280cd067d4dda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrePathCreateNotification</name>
    <filename>classomnetpp_1_1cPrePathCreateNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrePathCutNotification</name>
    <filename>classomnetpp_1_1cPrePathCutNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cProperties</name>
    <filename>classomnetpp_1_1cProperties.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a1b6ad91b62fe8589ec7964e7fe7f00ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5ac87a4e4ea964010ed47b117974c4c8</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83fcfac1e4f9ed510a916b513b5d9508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a851d69884cc627b7701c57634f1e41c0</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ac52e05a26b4f9af74e5398e86aef3f98</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a992e9c78d9709a8a8e5068f8e7b65736</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt;</type>
      <name>getNames</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aa017d90e15f14371fd348e87e83176aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>acbab1d99ec300f705301a6dab26c795f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab7e0166a1ba9335d0da5eb08500e6410</anchor>
      <arglist>(const char *name, const char *index=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aa2d37ea1023369a61a47daac2e27bd5f</anchor>
      <arglist>(const char *name, const char *index=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIndicesFor</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab03060304ad342649172b151c408adf3</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a04630be8c428ed8562724773d15b1a77</anchor>
      <arglist>(cProperty *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a9ea24f343b0d7460ccb610cfe4989369</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a1b6ad91b62fe8589ec7964e7fe7f00ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5ac87a4e4ea964010ed47b117974c4c8</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83fcfac1e4f9ed510a916b513b5d9508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a851d69884cc627b7701c57634f1e41c0</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ac52e05a26b4f9af74e5398e86aef3f98</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a441703007dcbefdee2058fa6ac45b876</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a992e9c78d9709a8a8e5068f8e7b65736</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt;</type>
      <name>getNames</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aa017d90e15f14371fd348e87e83176aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>acbab1d99ec300f705301a6dab26c795f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab7e0166a1ba9335d0da5eb08500e6410</anchor>
      <arglist>(const char *name, const char *index=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aa2d37ea1023369a61a47daac2e27bd5f</anchor>
      <arglist>(const char *name, const char *index=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIndicesFor</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab03060304ad342649172b151c408adf3</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a04630be8c428ed8562724773d15b1a77</anchor>
      <arglist>(cProperty *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a9ea24f343b0d7460ccb610cfe4989369</anchor>
      <arglist>(int k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cProperty</name>
    <filename>classomnetpp_1_1cProperty.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a539647a5dc4e60acc29eb36005cb9d32</anchor>
      <arglist>(const char *name=nullptr, const char *index=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aa51847220ccf77139014118fe01df97a</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a846234267d39f79c18b63c97719a99fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a25e90f993e506b8cd099a81bc08f4554</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2d2e4945d1aacf7a6f067cf9ba0373d3</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6de6049caece96b3ab0809cdf06edef8</anchor>
      <arglist>(const char *index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ae08fcc7bbd5c8363fbb91e9e642abfb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2e64db95a875e3c9bf80c739c08ccaea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>afd6a0b3e441555fcc0c56a9c1abddd09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt; &amp;</type>
      <name>getKeys</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a0fc254f45856bde70cda107808cc4227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a51045990fb0b70464c899bbbf115db67</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5df1bf0ef4be8135beb2fce341b73b28</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8758cf962a7b015c68bdbb3df0ff04a7</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8a0c920fd8baa1b00423cb48058c906a</anchor>
      <arglist>(const char *key, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a1fb5650b6b598b2744ab54ec3a92616a</anchor>
      <arglist>(const char *key, int index=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a7f64f5093a68f81f6f842a405cd40e0c</anchor>
      <arglist>(const char *key, int index, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a08cddec96e09a044ba76a5d6d2c55c42</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a539647a5dc4e60acc29eb36005cb9d32</anchor>
      <arglist>(const char *name=nullptr, const char *index=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aa51847220ccf77139014118fe01df97a</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a846234267d39f79c18b63c97719a99fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a25e90f993e506b8cd099a81bc08f4554</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2d2e4945d1aacf7a6f067cf9ba0373d3</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6de6049caece96b3ab0809cdf06edef8</anchor>
      <arglist>(const char *index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ae08fcc7bbd5c8363fbb91e9e642abfb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2e64db95a875e3c9bf80c739c08ccaea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>afd6a0b3e441555fcc0c56a9c1abddd09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt; &amp;</type>
      <name>getKeys</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a0fc254f45856bde70cda107808cc4227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a51045990fb0b70464c899bbbf115db67</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5df1bf0ef4be8135beb2fce341b73b28</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8758cf962a7b015c68bdbb3df0ff04a7</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8a0c920fd8baa1b00423cb48058c906a</anchor>
      <arglist>(const char *key, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a1fb5650b6b598b2744ab54ec3a92616a</anchor>
      <arglist>(const char *key, int index=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a7f64f5093a68f81f6f842a405cd40e0c</anchor>
      <arglist>(const char *key, int index, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a08cddec96e09a044ba76a5d6d2c55c42</anchor>
      <arglist>(const char *key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPSquare</name>
    <filename>classomnetpp_1_1cPSquare.html</filename>
    <base>omnetpp::cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af1df6489684b5d315f51da8eec0b5600</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a16383e92637a0bd062e951608c397b36</anchor>
      <arglist>(const char *name=nullptr, int cells=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0481c61d9842867a42adeda5ced07954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a23755629026a8c83dae9e27ece85fcae</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a711438b6b4072388937011213572e678</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a41145334e6aea45c291a5fdd1c9fde40</anchor>
      <arglist>(double, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a140fcaf5e5f89538c74afcdd2a114961</anchor>
      <arglist>(int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab1bccc9023308b5e8eb8a1f1a9774a2c</anchor>
      <arglist>(double, int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a420d440b43a45f094de9bd33973dedaa</anchor>
      <arglist>(double, int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a02e4d4e923c09d2015d0bf828f61d08f</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ae8bdaef6e2e05763af5431257003ce7f</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af1df6489684b5d315f51da8eec0b5600</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a16383e92637a0bd062e951608c397b36</anchor>
      <arglist>(const char *name=nullptr, int cells=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0481c61d9842867a42adeda5ced07954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a23755629026a8c83dae9e27ece85fcae</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a711438b6b4072388937011213572e678</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a41145334e6aea45c291a5fdd1c9fde40</anchor>
      <arglist>(double, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a140fcaf5e5f89538c74afcdd2a114961</anchor>
      <arglist>(int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab1bccc9023308b5e8eb8a1f1a9774a2c</anchor>
      <arglist>(double, int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a420d440b43a45f094de9bd33973dedaa</anchor>
      <arglist>(double, int, double) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a02e4d4e923c09d2015d0bf828f61d08f</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a225e8d90bfcce39ff9dd453ccf12fb27</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cQueue</name>
    <filename>classomnetpp_1_1cQueue.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cQueue::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a450ea3a102bfafeada51a2a467e7a13b</anchor>
      <arglist>(const char *name=nullptr, CompareFunc cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a9330a163f41159726574eca1d314d3b0</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35d17b1313343cc396710a838a61f45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6f0b903bb99bba4fbd402734497890be</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af9a0309f1f8d1c822115459cf5be7ba5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1db9bcc155d8c1b9a841f119f014d151</anchor>
      <arglist>(CompareFunc cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7f35cf24711500b673e7f1c70bee76b7</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01bc503018a72c11f0af30d0c5b9a583</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a45d686de03a5550c090fe84ab344cbb8</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5f8bf52c67c1fafc6750cf1976423844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a81ee7a85a5a4d4ab3a4cd96048e0f807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ae37e03810243eb48e36d71e987d07152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acbf7308de3263e4a074a39504da4d582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a479432127ee77145cc19d6a2d1590821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>length</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01a189e32637ea7e5d8e54d3c4796ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a71d2fb64da7786eab10a7924f853528f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35491a9be8b2ef7cccfad40640117ca6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1f259b1b92eb0dab82e1c078c9a3c835</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a450ea3a102bfafeada51a2a467e7a13b</anchor>
      <arglist>(const char *name=nullptr, CompareFunc cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a9330a163f41159726574eca1d314d3b0</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35d17b1313343cc396710a838a61f45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6f0b903bb99bba4fbd402734497890be</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af9a0309f1f8d1c822115459cf5be7ba5</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1db9bcc155d8c1b9a841f119f014d151</anchor>
      <arglist>(CompareFunc cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7f35cf24711500b673e7f1c70bee76b7</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01bc503018a72c11f0af30d0c5b9a583</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a45d686de03a5550c090fe84ab344cbb8</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5f8bf52c67c1fafc6750cf1976423844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a81ee7a85a5a4d4ab3a4cd96048e0f807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ae37e03810243eb48e36d71e987d07152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acbf7308de3263e4a074a39504da4d582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a479432127ee77145cc19d6a2d1590821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>length</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01a189e32637ea7e5d8e54d3c4796ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a71d2fb64da7786eab10a7924f853528f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35491a9be8b2ef7cccfad40640117ca6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1f259b1b92eb0dab82e1c078c9a3c835</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6b108ec021506ba74b43f733a6162d45</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRandom</name>
    <filename>classomnetpp_1_1cRandom.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>aaddc08a47243d704760cb410cde71366</anchor>
      <arglist>(cRNG *rng)</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a847f2ac081179ea7d156e4330cb3525d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a4494a21d8b456b26ebde4f99bb2dcbcf</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>aaddc08a47243d704760cb410cde71366</anchor>
      <arglist>(cRNG *rng)</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a847f2ac081179ea7d156e4330cb3525d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a4494a21d8b456b26ebde4f99bb2dcbcf</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRealTimeScheduler</name>
    <filename>classomnetpp_1_1cRealTimeScheduler.html</filename>
    <base>omnetpp::cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cRealTimeScheduler</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>ab9accaff058d9f83ade9243e48e30b3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cRealTimeScheduler</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>ad373dcb1bed51e021a6b8122eb6d2fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a259105edab6c31a89f1d45090b955571</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>aad61920dbceba3b87d6f519b03eda684</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a837fffa44eee49feed07981cf2417eaf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a98a257214face2b52750b3d0c3a88901</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a98bb4a1ac78e4f433a4824f9d48aaa07</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRectangleFigure</name>
    <filename>classomnetpp_1_1cRectangleFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cRectangleFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a2e8ffaced174879e6c2758758b871aec</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRectangleFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a2e8ffaced174879e6c2758758b871aec</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRegistrationList</name>
    <filename>classomnetpp_1_1cRegistrationList.html</filename>
    <base>omnetpp::cNamedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a4e50d6ea9afac64c8379dccf2d51c786</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>aee4e19388207564ef83ffc65da16e8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a35a60dac6adcfc580f0d92e2a430e46a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a53be4bc491301e6353fa47cf6249e542</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>afca9bee46eadfa310285b8922dddf443</anchor>
      <arglist>(const char *qualifiedName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>afcf27b526e3e1871c2f4da18266bbdac</anchor>
      <arglist>(const char *qualifiedName, const char *contextNamespace, bool fallbackToOmnetpp=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>aa484f63de36f7e9cb2727f5ffcdffd80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultFilter</name>
    <filename>classomnetpp_1_1cResultFilter.html</filename>
    <base>omnetpp::cResultListener</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultFilterDescriptor</name>
    <filename>classomnetpp_1_1cResultFilterDescriptor.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultFilterDescriptor</name>
      <anchorfile>classomnetpp_1_1cResultFilterDescriptor.html</anchorfile>
      <anchor>a8fa46dc3d073cfc84acda76ec7b56589</anchor>
      <arglist>(const char *name, cResultFilter *(*f)())</arglist>
    </member>
    <member kind="function">
      <type>cResultFilter *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cResultFilterDescriptor.html</anchorfile>
      <anchor>a1322f7c53addfe49729d55025c98ae3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterDescriptor *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cResultFilterDescriptor.html</anchorfile>
      <anchor>aca260df3db2b5ec781ef54d42ec5110c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterDescriptor *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cResultFilterDescriptor.html</anchorfile>
      <anchor>a7cd9359baa64f8acf7fe4db773cdd975</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultListener</name>
    <filename>classomnetpp_1_1cResultListener.html</filename>
    <base>omnetpp::cIListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ac29d2f941ddc13062ed6566d67896d13</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ad7eeef91300cda697657332f42de5ed9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a6b66fcb9e86ec6f74615a7c78183433d</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a7069e1fa04e58faa57ad63912f665f9f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>aacf3401343eac3eed6c3afdc502c2f8c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;v, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ae297a106431baec4417a7be954a4b65f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a16748135bffb8ab012820fd72c5ac516</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a47f12f5c0be4b0e4333298133ec6a154</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a5b56bdc1791a6d4249982e3f2a43659c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a26ffd4394b27a0d6c37a488888895246</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultRecorder</name>
    <filename>classomnetpp_1_1cResultRecorder.html</filename>
    <base>omnetpp::cResultListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cResultRecorder.html</anchorfile>
      <anchor>a0b24a03a14c95b3ae41930b4728fc977</anchor>
      <arglist>(cComponent *component, const char *statisticName, const char *recordingMode, cProperty *attrsProperty, opp_string_map *manualAttrs=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultRecorderDescriptor</name>
    <filename>classomnetpp_1_1cResultRecorderDescriptor.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultRecorderDescriptor</name>
      <anchorfile>classomnetpp_1_1cResultRecorderDescriptor.html</anchorfile>
      <anchor>a85dba9c7bded0a24b9ef97c74d5f70c1</anchor>
      <arglist>(const char *name, cResultRecorder *(*f)())</arglist>
    </member>
    <member kind="function">
      <type>cResultRecorder *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cResultRecorderDescriptor.html</anchorfile>
      <anchor>aae4f359c1389ac18b5688277d9a520bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderDescriptor *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cResultRecorderDescriptor.html</anchorfile>
      <anchor>a1d715db3b8850c18ddaa4fad487cddc0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderDescriptor *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cResultRecorderDescriptor.html</anchorfile>
      <anchor>ac831009b7ff49ecddd421fb871bfaead</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRingFigure</name>
    <filename>classomnetpp_1_1cRingFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cRingFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a1821f003c21335800f8cdbc38277802a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRingFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a1821f003c21335800f8cdbc38277802a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRNG</name>
    <filename>classomnetpp_1_1cRNG.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a77d4bbed7f7c8525d89b1f40343c2abf</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>acd747cbf82958270214c5679e0d5fe16</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getNumbersDrawn</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>adf70f9adfa6fd18128cc1f097718c490</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a0a0bfa861e97107811ed339a2413fcdc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a4ff355f105eba06f0f1fce543d8a2fd1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>acc0626e672dac4098a5c3ff45a15e8ec</anchor>
      <arglist>(unsigned long n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a74dd16a97bca74f55dda0b0e4a6ba4b2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a7b4e6ac4fc1ed4b0b79a1af02e2ae3ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a7ab7032b781c3a004b98574321a8e64e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleRandNonzIncl1</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a70f584668cfe6310036613bc98baa752</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRunnableEnvir</name>
    <filename>classomnetpp_1_1cRunnableEnvir.html</filename>
    <base>omnetpp::cEnvir</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classomnetpp_1_1cRunnableEnvir.html</anchorfile>
      <anchor>a1c91572e0fc4fbc293b2ad082bfd722e</anchor>
      <arglist>(int argc, char *argv[], cConfiguration *cfg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRuntimeError</name>
    <filename>classomnetpp_1_1cRuntimeError.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a54c5ad99dbfd8f8d59adfc246c2ed9c8</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a74c97061a679c1933faa2640fe7dd33b</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a8d45abf530612ef04a9b9e1db179fb4d</anchor>
      <arglist>(const cObject *where, OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a82223345c6a880f377805d02e941913f</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a920416b8fb56788af35b50ecb6201e2f</anchor>
      <arglist>(const cRuntimeError &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRuntimeError *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a127b301bbaddf4f893eb5a7b0092bd27</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cScheduler</name>
    <filename>classomnetpp_1_1cScheduler.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <member kind="function">
      <type></type>
      <name>cScheduler</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a0ebfe1164e5a9a350253a0a07985c8b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cScheduler</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a9422ac3493264a67944af69d52599dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSimulation</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>af05d3f812ee308d16da2c235a32b7478</anchor>
      <arglist>(cSimulation *_sim)</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a79218e0640b73bfbdc5486d0faa1be5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a05415f31c5ab57917c2937ce21534ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a80bd6066e28414004fb7dac180a4dd4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a130ad4f8591895dca4bd4eea1365f529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>acbb85a20f0098c3de0d07fc4cc2f060b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>afa1dc4437362821ea9ab52622f35c9bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a0855e62fa831bf9a1267a3d216680492</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSequentialScheduler</name>
    <filename>classomnetpp_1_1cSequentialScheduler.html</filename>
    <base>omnetpp::cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cSequentialScheduler</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a50ab656a1f8455dbb9ed52c22418f2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>aad61920dbceba3b87d6f519b03eda684</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a837fffa44eee49feed07981cf2417eaf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a98a257214face2b52750b3d0c3a88901</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSimpleModule</name>
    <filename>classomnetpp_1_1cSimpleModule.html</filename>
    <base>omnetpp::cModule</base>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a8c6d0fbf9abef7662b59dafb4e54975a</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aeadbb208f7ba18b481e0971cdd2c51a7</anchor>
      <arglist>(const char *dummy1, cModule *dummy2, unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7e6e59351d93443e24fef6c983b5d986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a06fb2597bbb81e0a49bca4ea61e29f53</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aedc27169b1412915c9a7a51dd8b75b30</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59c65ccd12881389d82b81b70ae3e09e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminated</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aa3678a263424388c1ef23d2a028119bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a011f9e657ffb92aaf106ba1956f426cc</anchor>
      <arglist>(cObject *obj=nullptr, const char *label=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac774e695a1e7b8b1976c308ce10033d3</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afb8150ce0994b44ae960af96d95928a5</anchor>
      <arglist>(cMessage *msg, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7cebfc7951de345009a30634aae6d91f</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad728c31b040cda62dab15adec7346a09</anchor>
      <arglist>(cMessage *msg, simtime_t delay, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a664a30b20392b1c237393a451d3d2394</anchor>
      <arglist>(cMessage *msg, simtime_t delay, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a2efe0cc49238ee475c60aed7df83ef11</anchor>
      <arglist>(cMessage *msg, simtime_t delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ab1b3a44817ac85769f3654eb67179515</anchor>
      <arglist>(cMessage *msg, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a4b496da1ea9ecdf6620607271ecb374f</anchor>
      <arglist>(cMessage *msg, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aaa44578bb99a1f5d5b9fad8a89e8776c</anchor>
      <arglist>(cMessage *msg, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac0bf571397e6818503abfa7fbcfca87d</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7ad1592e9b59f168c0c186ceebba685a</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afb5d39988b6c589e3cffa8c8635b565f</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleAt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a97c57271ca2fc95225ed8514750cac27</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad87740833c489722abf3608ac7f8b840</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a770a55d5c681f2e0f369be65c0fb1b73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afcb9cc09344edb767a9d7a612e89a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a0b5df98d1ea76c8d6a47784078f120d2</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a425b43cd7042b532f08867c593edb4ab</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>abdf639cccd5b865f3695bdf9b55699e8</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSimulation</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a53805a756170103b885eeb21ce423036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>halt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5e9f808ec016dd288fb88a482ea24802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a35351edcc74290a6d06d6d0fc98f52de</anchor>
      <arglist>(const char *format,...) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a228ebdbab08c537d22aa5354c34f6be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a17c95dc91fd0116b886ab0c511e13a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a741784522779ee0f7b6522f0abbe7446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a517a5ef25204490292b84fa5bdd12288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59e577d050358fd9f737678394505aca</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a517a5ef25204490292b84fa5bdd12288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59e577d050358fd9f737678394505aca</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a8c6d0fbf9abef7662b59dafb4e54975a</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aeadbb208f7ba18b481e0971cdd2c51a7</anchor>
      <arglist>(const char *dummy1, cModule *dummy2, unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7e6e59351d93443e24fef6c983b5d986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a06fb2597bbb81e0a49bca4ea61e29f53</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aedc27169b1412915c9a7a51dd8b75b30</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59c65ccd12881389d82b81b70ae3e09e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminated</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aa3678a263424388c1ef23d2a028119bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a011f9e657ffb92aaf106ba1956f426cc</anchor>
      <arglist>(cObject *obj=nullptr, const char *label=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac774e695a1e7b8b1976c308ce10033d3</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afb8150ce0994b44ae960af96d95928a5</anchor>
      <arglist>(cMessage *msg, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7cebfc7951de345009a30634aae6d91f</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad728c31b040cda62dab15adec7346a09</anchor>
      <arglist>(cMessage *msg, simtime_t delay, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a664a30b20392b1c237393a451d3d2394</anchor>
      <arglist>(cMessage *msg, simtime_t delay, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a2efe0cc49238ee475c60aed7df83ef11</anchor>
      <arglist>(cMessage *msg, simtime_t delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ab1b3a44817ac85769f3654eb67179515</anchor>
      <arglist>(cMessage *msg, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a4b496da1ea9ecdf6620607271ecb374f</anchor>
      <arglist>(cMessage *msg, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aaa44578bb99a1f5d5b9fad8a89e8776c</anchor>
      <arglist>(cMessage *msg, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac0bf571397e6818503abfa7fbcfca87d</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7ad1592e9b59f168c0c186ceebba685a</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afb5d39988b6c589e3cffa8c8635b565f</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleAt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a97c57271ca2fc95225ed8514750cac27</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad87740833c489722abf3608ac7f8b840</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a770a55d5c681f2e0f369be65c0fb1b73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afcb9cc09344edb767a9d7a612e89a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a0b5df98d1ea76c8d6a47784078f120d2</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a425b43cd7042b532f08867c593edb4ab</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>abdf639cccd5b865f3695bdf9b55699e8</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSimulation</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a53805a756170103b885eeb21ce423036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>halt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5e9f808ec016dd288fb88a482ea24802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a35351edcc74290a6d06d6d0fc98f52de</anchor>
      <arglist>(const char *format,...) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a228ebdbab08c537d22aa5354c34f6be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a17c95dc91fd0116b886ab0c511e13a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a741784522779ee0f7b6522f0abbe7446</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSimulation</name>
    <filename>classomnetpp_1_1cSimulation.html</filename>
    <base>omnetpp::cNamedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76091704d53de40af39c3d8757c1cc8f</anchor>
      <arglist>(const char *name, cEnvir *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1424e4840f2bc190bb664b2db9cd3803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac68651321f7e97be8adc93099f8f001a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abbb4a3db6c752da1c899fd53f9c4170f</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac110f4a99f3317800f4b24ac3ef9e4c5</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastComponentId</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acb92ea04f3a212ea3746fbc5e19ff5da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a16cc625373e9167fc90d44b24b65b896</anchor>
      <arglist>(const char *modulePath) const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7be9fdb96c9d811ca4743e9eb6142d2</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aabc57908f1aa3f536a13922d87a4a3f8</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a10204bd131ee478eb23288c2a2ac9816</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9db6e55d409aff4f1001d9ba11941185</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acd90456364ed7eeb339f978cf8579286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a00be9d0cd540247f2137f217e2bdad31</anchor>
      <arglist>(cScheduler *scheduler)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>getScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa4d5627d2d477b66b7951d1cf015c3d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2d75db745e4b8cdf8a66e487fc53372</anchor>
      <arglist>(cFutureEventSet *fes)</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet *</type>
      <name>getFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a896988841d449a3a03b55905384605a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationTimeLimit</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad13e721d4a0ce3c2fdebc972cde1eb71</anchor>
      <arglist>(simtime_t simTimeLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad917c484c032be218b9664f885f7616e</anchor>
      <arglist>(cModuleType *networkType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a42dfdd08efb1052dfbcb44ceba7bab39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2e7c2c87608e09212d593d3c776d3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af965d933c43eda084d5553e31b7a6b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a80f41b8635b2d7cb79b816599bceee83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getNetworkType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ae2e8e44102a8c91521c29c8c390ab936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4c1ecc24ab6a24137c11e9e4f897b312</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aedca65929a8995c12d1b68ab59dd32f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a44c3c46f44c2b8105adb9eccac01ff17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab5949116da0c154fcc4f8705324f254e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af257176f9ecb5efe33a35a745253fdd2</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a365cdc16b0df1ed35f43e3052a012d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8c6843806896ff546ed02828dc8ccb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a234c9c266e93409977491471c91f1f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8e14b88c219d11be15ccf68072ce3bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a7f3fafc5fe621f99521994373742aeda</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a53a579f7e017859873d727e04a3469cd</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a028516c6d50d645f5bddfa6d17df88d0</anchor>
      <arglist>(cSimpleModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2fcad0c41e02a875bf1d8baeefc409ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3372593ec5d4c92a65f5f57ae5c9127e</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa3cec1877861f5a0ec0b49b96cc03481</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a22d6686256ab2e917effb3b54b66d244</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a25f92228e559392272906e18d29ac3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getActivityModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac3d1e884989e2e2f65ffd1bf62d495b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a04fbb2bd4ceefa10eb03f51efa72f7f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4b5df4b97bba0ae257df7c9a9f59ffc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9acff1db928ad5ababa4d216a4e5ae7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getContextSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af22fe956354ce16c4271a03ed05e30fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a199587e4d00b5dcfc24800ea38c7d82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa99eabf3f0749393de18bc4d1c680e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrapOnNextEventRequested</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acf42a10bf6250637b600b5927dc73cf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2e6e5f7952dfca326b58f79ec1a0c77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aeb0b15eb8f85e30bc121a738b8b64c1c</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>cFingerprintCalculator *</type>
      <name>getFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a56494b78793e6e1d0a502b4081d3b7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76488447ca154623fe848baff14d76b3</anchor>
      <arglist>(cFingerprintCalculator *fingerprint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a31cce6908e2628da2c1a702bc9226234</anchor>
      <arglist>(const char *folderName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedFile</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af18d202d2da043e2d8cf9fe0b100339e</anchor>
      <arglist>(const char *nedFilename, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedText</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab1905dabcb45e796254c43c685ea8443</anchor>
      <arglist>(const char *name, const char *nedText, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7d9a45cc3204eaf2f536ecf8a4e2ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a752fd7f817d82897840bf0e372a662f5</anchor>
      <arglist>(const char *folder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76091704d53de40af39c3d8757c1cc8f</anchor>
      <arglist>(const char *name, cEnvir *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1424e4840f2bc190bb664b2db9cd3803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac68651321f7e97be8adc93099f8f001a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function">
      <type>cEnvir *</type>
      <name>getEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab920736928c724a5c796d28a0c081343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cSimulation *</type>
      <name>getActiveSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ae677cba64809c8914558eed1bc31c1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getActiveEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a6944156bfb54ed66b3a6206608975f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setActiveSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a159a200fc5ea22666e5eceb7e22e53dd</anchor>
      <arglist>(cSimulation *sim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStaticEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a6f1ffc6ef2a5cd20c0bb82d56b019ed5</anchor>
      <arglist>(cEnvir *env)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getStaticEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2efd8a63eda423d420f8042d0edf2834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abbb4a3db6c752da1c899fd53f9c4170f</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac110f4a99f3317800f4b24ac3ef9e4c5</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastComponentId</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acb92ea04f3a212ea3746fbc5e19ff5da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a16cc625373e9167fc90d44b24b65b896</anchor>
      <arglist>(const char *modulePath) const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7be9fdb96c9d811ca4743e9eb6142d2</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aabc57908f1aa3f536a13922d87a4a3f8</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a10204bd131ee478eb23288c2a2ac9816</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9db6e55d409aff4f1001d9ba11941185</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acd90456364ed7eeb339f978cf8579286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a31cce6908e2628da2c1a702bc9226234</anchor>
      <arglist>(const char *folderName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedFile</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af18d202d2da043e2d8cf9fe0b100339e</anchor>
      <arglist>(const char *nedFilename, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedText</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab1905dabcb45e796254c43c685ea8443</anchor>
      <arglist>(const char *name, const char *nedText, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7d9a45cc3204eaf2f536ecf8a4e2ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a752fd7f817d82897840bf0e372a662f5</anchor>
      <arglist>(const char *folder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a00be9d0cd540247f2137f217e2bdad31</anchor>
      <arglist>(cScheduler *scheduler)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>getScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa4d5627d2d477b66b7951d1cf015c3d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2d75db745e4b8cdf8a66e487fc53372</anchor>
      <arglist>(cFutureEventSet *fes)</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet *</type>
      <name>getFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a896988841d449a3a03b55905384605a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationTimeLimit</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad13e721d4a0ce3c2fdebc972cde1eb71</anchor>
      <arglist>(simtime_t simTimeLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad917c484c032be218b9664f885f7616e</anchor>
      <arglist>(cModuleType *networkType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a42dfdd08efb1052dfbcb44ceba7bab39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2e7c2c87608e09212d593d3c776d3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af965d933c43eda084d5553e31b7a6b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a80f41b8635b2d7cb79b816599bceee83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getNetworkType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ae2e8e44102a8c91521c29c8c390ab936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4c1ecc24ab6a24137c11e9e4f897b312</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aedca65929a8995c12d1b68ab59dd32f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a44c3c46f44c2b8105adb9eccac01ff17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab5949116da0c154fcc4f8705324f254e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af257176f9ecb5efe33a35a745253fdd2</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a365cdc16b0df1ed35f43e3052a012d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8c6843806896ff546ed02828dc8ccb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a234c9c266e93409977491471c91f1f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8e14b88c219d11be15ccf68072ce3bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a7f3fafc5fe621f99521994373742aeda</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a53a579f7e017859873d727e04a3469cd</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a028516c6d50d645f5bddfa6d17df88d0</anchor>
      <arglist>(cSimpleModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2fcad0c41e02a875bf1d8baeefc409ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3372593ec5d4c92a65f5f57ae5c9127e</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa3cec1877861f5a0ec0b49b96cc03481</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a22d6686256ab2e917effb3b54b66d244</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a25f92228e559392272906e18d29ac3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getActivityModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac3d1e884989e2e2f65ffd1bf62d495b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a04fbb2bd4ceefa10eb03f51efa72f7f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4b5df4b97bba0ae257df7c9a9f59ffc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9acff1db928ad5ababa4d216a4e5ae7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getContextSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af22fe956354ce16c4271a03ed05e30fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a199587e4d00b5dcfc24800ea38c7d82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa99eabf3f0749393de18bc4d1c680e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrapOnNextEventRequested</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>acf42a10bf6250637b600b5927dc73cf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2e6e5f7952dfca326b58f79ec1a0c77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aeb0b15eb8f85e30bc121a738b8b64c1c</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>cFingerprintCalculator *</type>
      <name>getFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a56494b78793e6e1d0a502b4081d3b7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76488447ca154623fe848baff14d76b3</anchor>
      <arglist>(cFingerprintCalculator *fingerprint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSingleFingerprintCalculator</name>
    <filename>classomnetpp_1_1cSingleFingerprintCalculator.html</filename>
    <base>omnetpp::cFingerprintCalculator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cSingleFingerprintCalculator *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>aed73f4c08e7fea9c1a6adac1a30ddec8</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>ab54515c9f3e8197ec1f43d1be8707320</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>a1f5245a9bd90a9cf9771d699139ce656</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStackCleanupException</name>
    <filename>classomnetpp_1_1cStackCleanupException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>acdab754a351d87c39786d9220662c8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>a49874eed72f184fcfebf5546c12ee002</anchor>
      <arglist>(const cStackCleanupException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStackCleanupException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>a67babc6853079bdee53001a48c2f1683</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>aae86d2a7de243494e1b1cf4f5110eede</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStatistic</name>
    <filename>classomnetpp_1_1cStatistic.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a906cbbec60872b39d9a90d6983d1a52f</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad527be2a2d66ea878b9bdc912a70cc1c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a14b0ca65d6a043d3bcc04b93ce535327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a03dffdcf8762a5cea186f8e18fd11e5a</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a0d0363624442028cb0d8e74d7bf58d80</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aaac95950ec12a06c26cf38d1ed12479b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a8143695fcbee3a4078e7393cf3ffec56</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9476df6128e559dac29db2b2bb8c7620</anchor>
      <arglist>(const cStatistic *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a67bddb47f5e1d77a3c9f0b75a52a9fa6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>afefc10611bc22206a03d14f7a347f1d7</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad4b8f3f771bb44681acd8c78f1a2a3d4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9507065477097ec9eeed1eb5e3bdca42</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abaf8c7809b857c229aa5dcbf8ae5f928</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ac2b51086ec9d71957bea0650074957d2</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ada14c52afb985d7afd5775815f492fc9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3e5da1832f59919f8b3d25597b67d843</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a780457a9f637b32868e046e4045bf80a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a184d8b9a497003e47d55db8306d507c0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a025ece76fcf372d578334a52f04739ab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a2ab03b55584b2d4d66dcd526b814f4a0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a939b4a8dc9d168cfee582f1e3cb1f07f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransientDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>af1fc649d1e5f2884dd108f0afaa69bac</anchor>
      <arglist>(cTransientDetection *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAccuracyDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad436d6498b521c445ceaea4869c7fc91</anchor>
      <arglist>(cAccuracyDetection *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTransientDetection *</type>
      <name>getTransientDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a1f4fe9a15e5db7a45e5c8c754d1453ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAccuracyDetection *</type>
      <name>getAccuracyDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>add03392bc865bdf2299c8cfc9250ea06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED double</type>
      <name>random</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a304ba3253b49dc81efc0dc4e9540df8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a02bc1291bafdabfc2e68b972b2a782d1</anchor>
      <arglist>(FILE *) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a4ce141f961eca6bcc35ef6907cbfd887</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aa670500bfed420e9dc873464a0abaec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordWithUnit</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5ca8a0fd1c8c7b40ef8bf69eb62cf922</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordAs</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb38184f169f5f1fbbbc4891e9b71158</anchor>
      <arglist>(const char *name, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a906cbbec60872b39d9a90d6983d1a52f</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad527be2a2d66ea878b9bdc912a70cc1c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a14b0ca65d6a043d3bcc04b93ce535327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a03dffdcf8762a5cea186f8e18fd11e5a</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a0d0363624442028cb0d8e74d7bf58d80</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aaac95950ec12a06c26cf38d1ed12479b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a8143695fcbee3a4078e7393cf3ffec56</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9476df6128e559dac29db2b2bb8c7620</anchor>
      <arglist>(const cStatistic *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a67bddb47f5e1d77a3c9f0b75a52a9fa6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>afefc10611bc22206a03d14f7a347f1d7</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad4b8f3f771bb44681acd8c78f1a2a3d4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9507065477097ec9eeed1eb5e3bdca42</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abaf8c7809b857c229aa5dcbf8ae5f928</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ac2b51086ec9d71957bea0650074957d2</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ada14c52afb985d7afd5775815f492fc9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3e5da1832f59919f8b3d25597b67d843</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a780457a9f637b32868e046e4045bf80a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a184d8b9a497003e47d55db8306d507c0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a025ece76fcf372d578334a52f04739ab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a2ab03b55584b2d4d66dcd526b814f4a0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a939b4a8dc9d168cfee582f1e3cb1f07f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransientDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>af1fc649d1e5f2884dd108f0afaa69bac</anchor>
      <arglist>(cTransientDetection *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAccuracyDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad436d6498b521c445ceaea4869c7fc91</anchor>
      <arglist>(cAccuracyDetection *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTransientDetection *</type>
      <name>getTransientDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a1f4fe9a15e5db7a45e5c8c754d1453ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAccuracyDetection *</type>
      <name>getAccuracyDetectionObject</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>add03392bc865bdf2299c8cfc9250ea06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED double</type>
      <name>random</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a304ba3253b49dc81efc0dc4e9540df8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a02bc1291bafdabfc2e68b972b2a782d1</anchor>
      <arglist>(FILE *) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a4ce141f961eca6bcc35ef6907cbfd887</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aa670500bfed420e9dc873464a0abaec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordWithUnit</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5ca8a0fd1c8c7b40ef8bf69eb62cf922</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordAs</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb38184f169f5f1fbbbc4891e9b71158</anchor>
      <arglist>(const char *name, const char *unit=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStdDev</name>
    <filename>classomnetpp_1_1cStdDev.html</filename>
    <base>omnetpp::cStatistic</base>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a2ae77fc06cf334d34cf6d3540be63aa9</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>afa6138962ef1ff2753ef92faf2975039</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a07a678b6d637cda98062645662588fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aacdbf0a762b8389c487873db05b939c4</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a55fa9913c73fb1adfd1f07e3dec4648a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a488d03e106fbcd048b793425b9813e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aac4369af0062530e017b391b7a96b5d2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad71d07fae9fdf9e1d8f43f9124c7ed02</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ab3f6c6505cfe84547d61c32949a92aae</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad4614c66422138152aeb7152d144b642</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a248108852d1e83e9d895e55cb1fbb60b</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a8bd8999c139e951c864d8d3bb7814a0d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a64db20ed8c4a8018353fd3c25da5bd5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ade2fd8d9934ff43b1ce38d335d7e3097</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a97d4005577c6c51e719fc423b603457f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa5071b07512e9fc17205e6923797e118</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa1e4820b9d86a831f51787d1e6094dab</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a7fba5078aac38d6cfa4e1b5fc68d456c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a2ae77fc06cf334d34cf6d3540be63aa9</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>afa6138962ef1ff2753ef92faf2975039</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a07a678b6d637cda98062645662588fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aacdbf0a762b8389c487873db05b939c4</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a55fa9913c73fb1adfd1f07e3dec4648a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a488d03e106fbcd048b793425b9813e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aac4369af0062530e017b391b7a96b5d2</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad71d07fae9fdf9e1d8f43f9124c7ed02</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ab3f6c6505cfe84547d61c32949a92aae</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad4614c66422138152aeb7152d144b642</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a248108852d1e83e9d895e55cb1fbb60b</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a8bd8999c139e951c864d8d3bb7814a0d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a64db20ed8c4a8018353fd3c25da5bd5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ade2fd8d9934ff43b1ce38d335d7e3097</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a97d4005577c6c51e719fc423b603457f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa5071b07512e9fc17205e6923797e118</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa1e4820b9d86a831f51787d1e6094dab</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a7fba5078aac38d6cfa4e1b5fc68d456c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringParImpl</name>
    <filename>classomnetpp_1_1cStringParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a2cb4abc1839e30eb6657ad5a4376146c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac1fb9e0e71edf276a18fb811102ef5c4</anchor>
      <arglist>(const cStringParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aec3b3ed4003d52ed8b6faf2c2a4c72b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ace8ca5198448c87a385358b050431546</anchor>
      <arglist>(const cStringParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStringParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a6c2fe9b2112f7559b16327dba4c05e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a2cb4abc1839e30eb6657ad5a4376146c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac1fb9e0e71edf276a18fb811102ef5c4</anchor>
      <arglist>(const cStringParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aec3b3ed4003d52ed8b6faf2c2a4c72b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ace8ca5198448c87a385358b050431546</anchor>
      <arglist>(const cStringParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStringParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a6c2fe9b2112f7559b16327dba4c05e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringPool</name>
    <filename>classomnetpp_1_1cStringPool.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringPool</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a4310e93371682fb37a017fe1f42cc705</anchor>
      <arglist>(const char *poolName=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringPool</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a19452bb3379c340a2770cda44eddc63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a8527988e6046ba63525684c3ec1accea</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>peek</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a39a9ec7e903ac3053d9e08f5706cc469</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a4e0e3a807503027c83026a8837f4b0c8</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a4a4fecb6d7cd9d0b8eb6579eee183af8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringTokenizer</name>
    <filename>classomnetpp_1_1cStringTokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a6f954c95bf98f819d9a9512fbe3ab796</anchor>
      <arglist>(const char *str, const char *delimiters=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ac696072d951d5ab987f273492d483f58</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>aead440e695e66ab43c100bda82d4b828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStringTokenizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ae6aaf4f88568d5c049bf02c5e0e096d0</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelimiter</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ab5f58506b70285300efe1c22ae437826</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreTokens</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>af690597352ca6f48a9f86b527cd754da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>nextToken</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a0f9986333b38318adb056bc0ed1ab152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>asVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a0e06c328a31867fae2b91e405c76ef45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>asIntVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a8b0f1f108f64813d1a76b9a5cc79356f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>asDoubleVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a3606dd540ad9a8ca914b2fdd582d79b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStudentT</name>
    <filename>classomnetpp_1_1cStudentT.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cStudentT *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a4790973f65eb8006322671a3f578edfc</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStudentT *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a4790973f65eb8006322671a3f578edfc</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTDExpandingWindows</name>
    <filename>classomnetpp_1_1cTDExpandingWindows.html</filename>
    <base>omnetpp::cTransientDetection</base>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>aaa4b3e90af0e9e2608d70e57829f74ca</anchor>
      <arglist>(const cTDExpandingWindows &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a5a8f3a8e29cf3aa108a86714488bfc2a</anchor>
      <arglist>(const char *name=nullptr, int reps=3, int minw=4, double wind=1.3, double acc=0.3, PostTDFunc f=nullptr, void *p=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a16e956f1945daeee7a09aa4e8fbeea3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTDExpandingWindows &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>ad63d8236380d214dd9aaa321f136f77e</anchor>
      <arglist>(const cTDExpandingWindows &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTDExpandingWindows *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a30e075a375c4ebc21bdfc4facc275594</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a30f946658312d1911f0d5471ddd3875a</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>ac5f22fd89c9d430ed5a1428428b244e0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a9b960a536c58146680bbb937653bd6bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a1306e29fda504409b52d24e2002fbee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a2af117417cc4c8d4311fc92545326905</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a7efebe44fc7b94e0d83149034fa42d30</anchor>
      <arglist>(int reps=3, int minw=4, double wind=1.3, double acc=0.3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>aaa4b3e90af0e9e2608d70e57829f74ca</anchor>
      <arglist>(const cTDExpandingWindows &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a5a8f3a8e29cf3aa108a86714488bfc2a</anchor>
      <arglist>(const char *name=nullptr, int reps=3, int minw=4, double wind=1.3, double acc=0.3, PostTDFunc f=nullptr, void *p=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTDExpandingWindows</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a16e956f1945daeee7a09aa4e8fbeea3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTDExpandingWindows &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>ad63d8236380d214dd9aaa321f136f77e</anchor>
      <arglist>(const cTDExpandingWindows &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTDExpandingWindows *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a30e075a375c4ebc21bdfc4facc275594</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a30f946658312d1911f0d5471ddd3875a</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>ac5f22fd89c9d430ed5a1428428b244e0</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a9b960a536c58146680bbb937653bd6bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a1306e29fda504409b52d24e2002fbee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a2af117417cc4c8d4311fc92545326905</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classomnetpp_1_1cTDExpandingWindows.html</anchorfile>
      <anchor>a7efebe44fc7b94e0d83149034fa42d30</anchor>
      <arglist>(int reps=3, int minw=4, double wind=1.3, double acc=0.3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTerminationException</name>
    <filename>classomnetpp_1_1cTerminationException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>afa32904dec003b78a599ef1c06d14330</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a7ab34e2860822705491adb6284c714a5</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a43c19fa207ec7ac1b61bf073234a5973</anchor>
      <arglist>(const cTerminationException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTerminationException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a39266a85928aa6891daee76fe58c8b0a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>aae86d2a7de243494e1b1cf4f5110eede</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTextFigure</name>
    <filename>classomnetpp_1_1cTextFigure.html</filename>
    <base>omnetpp::cAbstractTextFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>ace853d60356b57d1f53af5a23d5b5069</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>ace853d60356b57d1f53af5a23d5b5069</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a2a9445f358d91d1885171924e8665d5f</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTimestampedValue</name>
    <filename>classomnetpp_1_1cTimestampedValue.html</filename>
    <base>omnetpp::cITimestampedValue</base>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cTimestampedValue.html</anchorfile>
      <anchor>a60ce614a1018aeaba773c456290bb747</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cTimestampedValue.html</anchorfile>
      <anchor>ac95ba39a34b3d0c7f6d32f49818edeab</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology</name>
    <filename>classomnetpp_1_1cTopology.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cTopology::Link</class>
    <class kind="class">omnetpp::cTopology::LinkIn</class>
    <class kind="class">omnetpp::cTopology::LinkOut</class>
    <class kind="class">omnetpp::cTopology::Node</class>
    <class kind="class">omnetpp::cTopology::Predicate</class>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd4897610cdb4a21656f34ce78a01471</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5cfa6dd0a490855d87cab1f6f2546721</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3eaf190693c38b022c64cd70d0e83625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a01552f5bc4c5377e8f0be8a4bff6fc0b</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTopology *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a0ef33908a605616cda02a60262771ede</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a20978b403df109704fe94e59516448ef</anchor>
      <arglist>(bool(*selfunc)(cModule *, void *), void *userdata=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab2ec53f63a05b8678c203e254ac3bcfd</anchor>
      <arglist>(Predicate *predicate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByModulePath</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ac14cd4eac16540ed979ea73c8edb3f1e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;fullPathPatterns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByNedTypeName</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aaedf2f68eab98cb0b6fe6e656518f371</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;nedTypeNames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByProperty</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3e7a0cdef48da852bee702b61b7fccca</anchor>
      <arglist>(const char *propertyName, const char *value=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByParameter</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3de025db53954d3b375ae91a8cb70ac7</anchor>
      <arglist>(const char *paramName, const char *paramValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>abe33a18cfe1b5a59892f03d873a0aa38</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a10d04d4577ce859f166c1483ce52b1ac</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a19cedd1bbb3c57e7d4c17bea10ebfe9d</anchor>
      <arglist>(Link *link, Node *srcNode, Node *destNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aff6e00465457d8e447da9ee03e6f386e</anchor>
      <arglist>(Link *link, cGate *srcGate, cGate *destGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ae8dc763c4069a5575158e59e2a1efdb5</anchor>
      <arglist>(Link *link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumNodes</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab81dd1ba4840e5496c1e7218398a927f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>af088aa31d75d5ec1e6d5932469102d75</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNodeFor</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a56acb38d4a6e5e647d0cba0312d46260</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateUnweightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa914b29251db6f94cae62a2229f4e82d</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateWeightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a902a7790bd7bd5089b3dbebc64015c13</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getTargetNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>afae236053c5d3b34e2bb6456f0fd3bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Node *</type>
      <name>createNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a0dddeda87a7b009195217e175cd02de2</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Link *</type>
      <name>createLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a02b1a1e27b0e4687ad5606c669956a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd4897610cdb4a21656f34ce78a01471</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5cfa6dd0a490855d87cab1f6f2546721</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3eaf190693c38b022c64cd70d0e83625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a01552f5bc4c5377e8f0be8a4bff6fc0b</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTopology *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a0ef33908a605616cda02a60262771ede</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a20978b403df109704fe94e59516448ef</anchor>
      <arglist>(bool(*selfunc)(cModule *, void *), void *userdata=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab2ec53f63a05b8678c203e254ac3bcfd</anchor>
      <arglist>(Predicate *predicate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByModulePath</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ac14cd4eac16540ed979ea73c8edb3f1e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;fullPathPatterns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByNedTypeName</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aaedf2f68eab98cb0b6fe6e656518f371</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;nedTypeNames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByProperty</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3e7a0cdef48da852bee702b61b7fccca</anchor>
      <arglist>(const char *propertyName, const char *value=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByParameter</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3de025db53954d3b375ae91a8cb70ac7</anchor>
      <arglist>(const char *paramName, const char *paramValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>abe33a18cfe1b5a59892f03d873a0aa38</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a10d04d4577ce859f166c1483ce52b1ac</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a19cedd1bbb3c57e7d4c17bea10ebfe9d</anchor>
      <arglist>(Link *link, Node *srcNode, Node *destNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aff6e00465457d8e447da9ee03e6f386e</anchor>
      <arglist>(Link *link, cGate *srcGate, cGate *destGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ae8dc763c4069a5575158e59e2a1efdb5</anchor>
      <arglist>(Link *link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumNodes</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab81dd1ba4840e5496c1e7218398a927f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>af088aa31d75d5ec1e6d5932469102d75</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNodeFor</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a56acb38d4a6e5e647d0cba0312d46260</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateUnweightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa914b29251db6f94cae62a2229f4e82d</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateWeightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a902a7790bd7bd5089b3dbebc64015c13</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getTargetNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>afae236053c5d3b34e2bb6456f0fd3bcd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTransientDetection</name>
    <filename>classomnetpp_1_1cTransientDetection.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cTransientDetection</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a8db05aa3ce0e1005ce7ba6560e77d451</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTransientDetection</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a08eb1d5dc4a674ca11c637dd4e65a595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTransientDetection *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>adbb2fbca7a966f3b42b55eac928e3b58</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>afac440523caf963ed8b18d782563d5db</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>afe905211e6b16cfdde6c06cb7d5f5d70</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a0efff8623a2fb79dad94a96dcf16d966</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>ac0ae5f26cd2001d772aed9d2ea97d41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a83e7369648b535de5af822e916340f5f</anchor>
      <arglist>(PostTDFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>ae32b48a9e4ac9bdc606ff75226e97d9b</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>aec02be2a42ba2f6a99201a4836fddb0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTransientDetection</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a8db05aa3ce0e1005ce7ba6560e77d451</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTransientDetection</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a08eb1d5dc4a674ca11c637dd4e65a595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTransientDetection *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>adbb2fbca7a966f3b42b55eac928e3b58</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>afac440523caf963ed8b18d782563d5db</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>afe905211e6b16cfdde6c06cb7d5f5d70</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a20dcbdfbd0ec77afc802522bb7e379c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a0efff8623a2fb79dad94a96dcf16d966</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>ac0ae5f26cd2001d772aed9d2ea97d41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>a83e7369648b535de5af822e916340f5f</anchor>
      <arglist>(PostTDFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>ae32b48a9e4ac9bdc606ff75226e97d9b</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classomnetpp_1_1cTransientDetection.html</anchorfile>
      <anchor>aec02be2a42ba2f6a99201a4836fddb0c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTriang</name>
    <filename>classomnetpp_1_1cTriang.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTriang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a6218262d7681c28da66d4cd5d61a8081</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTriang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a6218262d7681c28da66d4cd5d61a8081</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTruncNormal</name>
    <filename>classomnetpp_1_1cTruncNormal.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTruncNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>afce00edc982619834f4c6964b215d76c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTruncNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>afce00edc982619834f4c6964b215d76c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cUniform</name>
    <filename>classomnetpp_1_1cUniform.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a5811b02d39ef0043a7d5dc3cbe4be302</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a5811b02d39ef0043a7d5dc3cbe4be302</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVarHistogram</name>
    <filename>classomnetpp_1_1cVarHistogram.html</filename>
    <base>omnetpp::cHistogramBase</base>
    <member kind="enumeration">
      <type></type>
      <name>TransformType</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_NO_TRANSFORM</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2ac6ad1847f55692905f84bb01147e4b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_DBL</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2a42758e045df893dde84379a3570a74bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_INT</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2aae4c1a13f036331cc5b83835e67d3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_NO_TRANSFORM</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2ac6ad1847f55692905f84bb01147e4b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_DBL</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2a42758e045df893dde84379a3570a74bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_INT</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2aae4c1a13f036331cc5b83835e67d3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aee225f49e6a0123cf06a0a66c224eb78</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab466cc26e8590823869ca3a9b7d3321a</anchor>
      <arglist>(const char *name=nullptr, int numcells=11, TransformType transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab81db19a4f0e001ac0a3786af9e102e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a85dc0c8f279de9dda730ce6ac699c3a1</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cVarHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a572e45d7d1eb40252e62b61afcc03cee</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ae8bdaef6e2e05763af5431257003ce7f</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a6e7a3e8afecbd2455c9eaad475493ccf</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEquiprobableCells</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a32fdbec9ccda792f6ecb815081624f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aee225f49e6a0123cf06a0a66c224eb78</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab466cc26e8590823869ca3a9b7d3321a</anchor>
      <arglist>(const char *name=nullptr, int numcells=11, TransformType transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab81db19a4f0e001ac0a3786af9e102e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a85dc0c8f279de9dda730ce6ac699c3a1</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cVarHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a572e45d7d1eb40252e62b61afcc03cee</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5b155f2a14bb8dcd7ef16d58b6341b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ae8bdaef6e2e05763af5431257003ce7f</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa45569da345d3925659d9f0072bfb5c7</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ad1c953e19e9642e33e7def14612088a4</anchor>
      <arglist>(double x) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ae610cbd2c5960cf6acf65ef59e6e1b56</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a3451fa4df7ad3bc7cf657b86fa849606</anchor>
      <arglist>(int k) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a6e7a3e8afecbd2455c9eaad475493ccf</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVisitor</name>
    <filename>classomnetpp_1_1cVisitor.html</filename>
    <class kind="class">omnetpp::cVisitor::EndTraversalException</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVisitor</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>a45815a2fcee4fa3cbbbd4188d557dc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>ac1f588ca1ea6607e7908d66cafdd4502</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processChildrenOf</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>a78100e44d1014959511febf43f7facdf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>aac70927a11a8c21a1fba5531a13908c3</anchor>
      <arglist>(cObject *obj)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_bool</name>
    <filename>classomnetpp_1_1cWatch__bool.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_char</name>
    <filename>classomnetpp_1_1cWatch__char.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_cObject</name>
    <filename>classomnetpp_1_1cWatch__cObject.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_cObjectPtr</name>
    <filename>classomnetpp_1_1cWatch__cObjectPtr.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_stdstring</name>
    <filename>classomnetpp_1_1cWatch__stdstring.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_uchar</name>
    <filename>classomnetpp_1_1cWatch__uchar.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>a0616c6fe30b98503d2dafb6c2388ade7</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>a965c0b270ffd166766ec3e451c9060ce</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatchBase</name>
    <filename>classomnetpp_1_1cWatchBase.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac4ce02fc31de5c3abb5e734ca843b5af</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>a13b3f3b1ec80491e0b057265b2d4ebef</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac24dfb23d26a140f3797018646fc2dcf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac4ce02fc31de5c3abb5e734ca843b5af</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>a13b3f3b1ec80491e0b057265b2d4ebef</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac24dfb23d26a140f3797018646fc2dcf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWeibull</name>
    <filename>classomnetpp_1_1cWeibull.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeibull *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>ad07e561e0b8e9a06baf8c1d60a7599be</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeibull *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>ad07e561e0b8e9a06baf8c1d60a7599be</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a929e9c101dcb153b2bd951f75d9b7bb4</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWeightedStdDev</name>
    <filename>classomnetpp_1_1cWeightedStdDev.html</filename>
    <base>omnetpp::cStdDev</base>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acfdbbf9968d1057419e657d49d8648ff</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8e7c5aa02a2cba3e932e8ecdafad4d8c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a5140966f00458e03ea4a4ba1a1f02846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a08d872e2ed8a8f35568e35ac80d8d60c</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeightedStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a11ef601b498a086bbf31c15b7b31a968</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a488d03e106fbcd048b793425b9813e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>accc5e0577dba709f1dc953b7731dbc59</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>abe1d15bf41bcf2ac04678a25b4557ebe</anchor>
      <arglist>(SimTime value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a77d983d7442bd74ad8d41284ae552fcb</anchor>
      <arglist>(double value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a9943352c60d47364365b6cf37ab4d7b8</anchor>
      <arglist>(SimTime value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8bd8999c139e951c864d8d3bb7814a0d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>ade2fd8d9934ff43b1ce38d335d7e3097</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a97d4005577c6c51e719fc423b603457f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>aa5071b07512e9fc17205e6923797e118</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>aa1e4820b9d86a831f51787d1e6094dab</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a7fba5078aac38d6cfa4e1b5fc68d456c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acfdbbf9968d1057419e657d49d8648ff</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8e7c5aa02a2cba3e932e8ecdafad4d8c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a5140966f00458e03ea4a4ba1a1f02846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a08d872e2ed8a8f35568e35ac80d8d60c</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeightedStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a11ef601b498a086bbf31c15b7b31a968</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a38e94571d706500b3d1af108bd69be06</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a488d03e106fbcd048b793425b9813e18</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>accc5e0577dba709f1dc953b7731dbc59</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>abe1d15bf41bcf2ac04678a25b4557ebe</anchor>
      <arglist>(SimTime value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a77d983d7442bd74ad8d41284ae552fcb</anchor>
      <arglist>(double value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a9943352c60d47364365b6cf37ab4d7b8</anchor>
      <arglist>(SimTime value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a34a60648411661e7c02590b536317e25</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8bd8999c139e951c864d8d3bb7814a0d</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>ade2fd8d9934ff43b1ce38d335d7e3097</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a97d4005577c6c51e719fc423b603457f</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>aa5071b07512e9fc17205e6923797e118</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>aa1e4820b9d86a831f51787d1e6094dab</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a7fba5078aac38d6cfa4e1b5fc68d456c</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>abed08d6e173514c26aa4c7601b8ec92a</anchor>
      <arglist>(FILE *) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLElement</name>
    <filename>classomnetpp_1_1cXMLElement.html</filename>
    <class kind="class">omnetpp::cXMLElement::ParamResolver</class>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a0d7559b0cc69a8aec7b2b62c9ebc118c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a5524df9abf6d62335d9f659084180491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a34552da180af27ee2fc057cec52e1ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a9d01aa4633af690703b1bcb3fd811f35</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>afd4ebb283f41dcc3a8be7e24a2d9470f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cXMLAttributeMap &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ab9393ef9c16b827a98febea9cfbf9b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a3f8b087a0e4fe6dc1c2a8c8cd85c585c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aca70ddfc8d3adefc9dded97c962310c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a99c9cee596c8bd2197483b90352d1a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a915e710e83a6bb59621b1b8d06b48688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6df54f8c17a506cb5a985d4bd2217734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a027360bc7ede892614d6d7df38bedc27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a14f5035d9791699e35c131bd22f19172</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1e295c05b6c984433e342452089a7d3e</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a605e312c372a9cde7b1a59572525d59c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6b0bf90d975faa1e29851164e655c845</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ad0aa49644e43eaa723be0d3e8cfa7c82</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ada62ae8b1665cd2964d3e2139a9f1c84</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa378c1cdbe2fbecfb98a27fbf14d591b</anchor>
      <arglist>(const char *idattrvalue) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ac9224d58280c6c97b06941342d31a62e</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=nullptr, ParamResolver *resolver=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>debugDump</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a8876f6efb5945e6af845135013ad34f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a9363681f09d39d04631ec55eb15cb388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a0d7559b0cc69a8aec7b2b62c9ebc118c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a5524df9abf6d62335d9f659084180491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a34552da180af27ee2fc057cec52e1ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a9d01aa4633af690703b1bcb3fd811f35</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>afd4ebb283f41dcc3a8be7e24a2d9470f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cXMLAttributeMap &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ab9393ef9c16b827a98febea9cfbf9b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a3f8b087a0e4fe6dc1c2a8c8cd85c585c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aca70ddfc8d3adefc9dded97c962310c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a99c9cee596c8bd2197483b90352d1a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a915e710e83a6bb59621b1b8d06b48688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6df54f8c17a506cb5a985d4bd2217734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a027360bc7ede892614d6d7df38bedc27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a14f5035d9791699e35c131bd22f19172</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1e295c05b6c984433e342452089a7d3e</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a605e312c372a9cde7b1a59572525d59c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6b0bf90d975faa1e29851164e655c845</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ad0aa49644e43eaa723be0d3e8cfa7c82</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ada62ae8b1665cd2964d3e2139a9f1c84</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa378c1cdbe2fbecfb98a27fbf14d591b</anchor>
      <arglist>(const char *idattrvalue) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ac9224d58280c6c97b06941342d31a62e</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=nullptr, ParamResolver *resolver=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>debugDump</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a8876f6efb5945e6af845135013ad34f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a9363681f09d39d04631ec55eb15cb388</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLParImpl</name>
    <filename>classomnetpp_1_1cXMLParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ad32c29db514f723f76d5e575e459fd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6f9a49bd7f7cdfd5fccf7dc180590848</anchor>
      <arglist>(const cXMLParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>afb2b95101d10254072d10c7be4c73ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a63b1ecf9a379b9a0323e67323991cd8a</anchor>
      <arglist>(const cXMLParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a34aea620596a6a241a4088d81255f90a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ad32c29db514f723f76d5e575e459fd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6f9a49bd7f7cdfd5fccf7dc180590848</anchor>
      <arglist>(const cXMLParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>afb2b95101d10254072d10c7be4c73ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a63b1ecf9a379b9a0323e67323991cd8a</anchor>
      <arglist>(const cXMLParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a34aea620596a6a241a4088d81255f90a</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ab505554e9e8f16db2f12daf1427d29ea</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5da0f0e925717106aeb90ef7db703afd</anchor>
      <arglist>(cCommBuffer *buffer) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>acdce77c05a02d58f1f093ada0e9a0c1e</anchor>
      <arglist>(long l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a65c91e6e9c7b67f0b22807a79933fed6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a219a9ce935c677095a8881fe3f2cebe7</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>aadcc850dce67a966c59e320f47520ac6</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>abb511db693fc28c01917b60024241348</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac24d3b54c896083f2a068c343c9956f4</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ab06e487c6424029f4b6831e30cb6a019</anchor>
      <arglist>(cComponent *context) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0de3ff1e3a0e4bda2d59b00c3d2cd132</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af24a89deeceeabf511551835829ec370</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a7ba3fa20bca67729d2476abb4e66f884</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5625fd0d543ca1990cc53390a4687f43</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a68161051e0bdefd99eaa25fc32b73361</anchor>
      <arglist>(const cParImpl *other) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression::Elem</name>
    <filename>classomnetpp_1_1cDynamicExpression_1_1Elem.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a1675f54f73e810804fc6a9cefd243683</anchor>
      <arglist>(const Elem &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>af7d08e590329add02405d44f94b9b841</anchor>
      <arglist>(bool _b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a5b753abde8d5b72c1ddb9c80d837fffb</anchor>
      <arglist>(int _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ac61a6fc80201ef6ed063e31b2e3f8456</anchor>
      <arglist>(short _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a1de5b2e9413b140b3699f2c10ec07179</anchor>
      <arglist>(long _l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a2469752b1c981922e7281de0fecbba6e</anchor>
      <arglist>(double _d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a8add283e2d27370777568f19cddae03e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ac02a758b59abd393cb705368878c54fb</anchor>
      <arglist>(const char *_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ab4832c0b2d611f6225592857b2c76b7b</anchor>
      <arglist>(cXMLElement *_x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a4f4a35355211ce391664a9fd774d0e5b</anchor>
      <arglist>(cNEDMathFunction *_f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>abfcc31ba16d5cb8feccbf5761e23bf0a</anchor>
      <arglist>(cNEDFunction *f, int argc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>aa5e24a856e46f6fa17d3ac93a8a76a76</anchor>
      <arglist>(Functor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a1504811654ece46318798d1d0b465620</anchor>
      <arglist>(OpType _op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a46d0e5f89fa0764c72d657e617f7e561</anchor>
      <arglist>(cExpression *_expr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a22c762b0238fa42f38fcf963fdba1b6d</anchor>
      <arglist>(const Elem &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVisitor::EndTraversalException</name>
    <filename>classomnetpp_1_1cVisitor_1_1EndTraversalException.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Font</name>
    <filename>structomnetpp_1_1cFigure_1_1Font.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression::Functor</name>
    <filename>classomnetpp_1_1cDynamicExpression_1_1Functor.html</filename>
    <base>omnetpp::cObject</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::GateIterator</name>
    <filename>classomnetpp_1_1cModule_1_1GateIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>GateIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a3078e1e4f43f773bfbb1a04ee9ee5553</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>ac01430210d1c5fb33a69406d1f6fcaba</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a8521b30e089ed4432c509538d0faea52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cGate *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a3e61f3af230b227ebc10792b6a5b5a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a13e89c095f97413810a8cfb74967f2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GateIterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>ae2054f383e70d0fbd09bbff35ff46931</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cKSplit::Grid</name>
    <filename>structomnetpp_1_1cKSplit_1_1Grid.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>a4dafd66c26e6b8acf64d2feba6141bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reldepth</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>ab3e3dc3b5c231c52c4c5ace9b0bb4a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>total</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>a245b65fbced50370bf8a01069e5ee177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mother</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>ab7e8dcbaa2de0adeaa6be4a7feafd592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cells</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>af98130b9f54442ce63e70aa51bda3f86</anchor>
      <arglist>[K]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cQueue::Iterator</name>
    <filename>classomnetpp_1_1cQueue_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a422df0ee6f1f674d552fe96d9a691ec3</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a21dfc35daaae810f35a98ddb29cc91c9</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a672d921f579e56ee781b145525720bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cObject *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>aca05fecc59df157aa0a1a452bcef8c8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>aef12ef33726bc591f569f822c7b5ac41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>ac1702aedba13b4112b891b58dfd78eba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a34e5ed23ddc31b7d8d4bfb5bfacbaab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a826422223993becdf7c1e60aea56e9c0</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cKSplit::Iterator</name>
    <filename>classomnetpp_1_1cKSplit_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a84f2f4ff471f2a45cdec89d6c9c938f4</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a1d0a737a7c27e1b4196816c04fb0fe96</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a2aefc5a84a51687145f8514f4029c26c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a132d549c024fd011da9b2f96319c5395</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCellNumber</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a1bc9d9a26ba155dbcf668aa352374f29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMin</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a266ce0e30502b03f3281b10844fcde01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMax</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a2b0f5a3139742d5a18448ac7cbb3c66c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a4c13102912f3fbeb01db67de89859e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a2d6243828ad669a89f0120ef71951838</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArray::Iterator</name>
    <filename>classomnetpp_1_1cArray_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a65ba07b3fc34ea382e76071569e09910</anchor>
      <arglist>(const cArray &amp;a, bool atHead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>ab95869bd456138059e34986d0c6de220</anchor>
      <arglist>(const cArray &amp;a, bool atHead=true)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a672d921f579e56ee781b145525720bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cObject *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>aca05fecc59df157aa0a1a452bcef8c8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>aef12ef33726bc591f569f822c7b5ac41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>ac1702aedba13b4112b891b58dfd78eba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a34e5ed23ddc31b7d8d4bfb5bfacbaab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a826422223993becdf7c1e60aea56e9c0</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationReader::KeyValue</name>
    <filename>classomnetpp_1_1cConfigurationReader_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfiguration::KeyValue</name>
    <filename>classomnetpp_1_1cConfiguration_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Link</name>
    <filename>classomnetpp_1_1cTopology_1_1Link.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>af16a171cd67ab9d1b2e76a2efa7abd89</anchor>
      <arglist>(double weight=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>ab5341c6c8a5639fe9608f4e4a937d835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>ae2931e09e0fd8eac15c83f0254b4e4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::LinkIn</name>
    <filename>classomnetpp_1_1cTopology_1_1LinkIn.html</filename>
    <base>omnetpp::cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>afdeb149340cee2b11379d1a3d1d4acca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getLocalNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>ac393ee070711d20bdd2733d472813b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>ac039b93eda7b0c977df1b19005936e2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>af185c9b12e9b6a50bc32c7f4e11332d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>aabd63b7d1aadc5616aadee586f3d15bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a76520bb98d332134e57b0c385a894bae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::LinkOut</name>
    <filename>classomnetpp_1_1cTopology_1_1LinkOut.html</filename>
    <base>omnetpp::cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>afdeb149340cee2b11379d1a3d1d4acca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getLocalNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>ac393ee070711d20bdd2733d472813b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>ac039b93eda7b0c977df1b19005936e2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>af185c9b12e9b6a50bc32c7f4e11332d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>aabd63b7d1aadc5616aadee586f3d15bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a76520bb98d332134e57b0c385a894bae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::NEDSupport::LoopVar</name>
    <filename>classomnetpp_1_1NEDSupport_1_1LoopVar.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>LoopVar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1LoopVar.html</anchorfile>
      <anchor>a5641d73473cb6394b9c8ec9c15724d08</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1LoopVar.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchExpression::Matchable</name>
    <filename>classomnetpp_1_1cMatchExpression_1_1Matchable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a36daae296dedc81e2618c4ecbc88c6c8</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a10224ec3b6a3ff8ef7dae69cf92d927e</anchor>
      <arglist>(const char *attribute) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matchable</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a8ffc9d38b61d8481286dafb2cccf00ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannel::MessageSentSignalValue</name>
    <filename>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</filename>
    <base>omnetpp::cITimestampedValue</base>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>MessageSentSignalValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a0b3762828d776522a133994a5e67fe03</anchor>
      <arglist>(simtime_t_cref t, cMessage *m, result_t *r)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getMessage</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>aca271d8e2a74df21032695a87ef2c57d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>result_t *</type>
      <name>getChannelResult</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a9f4b7ae04d7dbb82cf3a79e0d2f3c5d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a60ce614a1018aeaba773c456290bb747</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>ac95ba39a34b3d0c7f6d32f49818edeab</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a8d2851888c19a187a70f8f351f5a5ea4</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a60ce614a1018aeaba773c456290bb747</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>ac95ba39a34b3d0c7f6d32f49818edeab</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a8d2851888c19a187a70f8f351f5a5ea4</anchor>
      <arglist>(simsignal_t signalID) const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::ModNameParamResolver</name>
    <filename>classomnetpp_1_1ModNameParamResolver.html</filename>
    <base>omnetpp::cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1ModNameParamResolver.html</anchorfile>
      <anchor>a56fb46187edc470545e3bf6bdea91f3a</anchor>
      <arglist>(const char *paramname, std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Node</name>
    <filename>classomnetpp_1_1cTopology_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a42b4652ff50a5c824e5d8449a12df382</anchor>
      <arglist>(int moduleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModuleId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aaaca1f325e51a7d98c1408fc378e67a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>adb5d2f9383c6e4c34eb0aeefae4d5b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ab5341c6c8a5639fe9608f4e4a937d835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ae2931e09e0fd8eac15c83f0254b4e4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a25f49cdb593bf29e28f5550efded6d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>getLinkIn</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a04cd5e5c456396bad59ae741b8ca1437</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aadfc71eaae8598e011c71a80b123b4ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getLinkOut</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af18fb3e0bb4b872a9c263adb296d158a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToTarget</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a0e41dd4b5cf2423e5195826bf8564307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af0e3c78635fc3d7a23484a65cdf56aed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ac5d22ea1dd43f9458c33e69e4b8738f4</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModuleId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aaaca1f325e51a7d98c1408fc378e67a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>adb5d2f9383c6e4c34eb0aeefae4d5b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ab5341c6c8a5639fe9608f4e4a937d835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ae2931e09e0fd8eac15c83f0254b4e4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a25f49cdb593bf29e28f5550efded6d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>getLinkIn</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a04cd5e5c456396bad59ae741b8ca1437</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aadfc71eaae8598e011c71a80b123b4ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getLinkOut</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af18fb3e0bb4b872a9c263adb296d158a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToTarget</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a0e41dd4b5cf2423e5195826bf8564307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af0e3c78635fc3d7a23484a65cdf56aed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ac5d22ea1dd43f9458c33e69e4b8738f4</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::noncopyable</name>
    <filename>classomnetpp_1_1noncopyable.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string</name>
    <filename>classomnetpp_1_1opp__string.html</filename>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a0c1cfe7d44dbc41dafb88691840aafdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a4242ceb0bdc72550ef4bcf02f1682df5</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a9a66c382f9ed729ec5e4c19ceed831d9</anchor>
      <arglist>(const char *s, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a700571b583ece453104ff30eeac7be9e</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae9c1cbcb890c3aff2868fc934a641dde</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>afc98c848acc706639825b747b2797708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a89da6be964480b4c86334e4e337d3cf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ac6e61de369e994009e36f344f99c15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>af3c8c4693a40dad1eeba2b0e30f56f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ab8e4e3e2a7bf18888b71bdf9dda0770b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reserve</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a59029fa2c5f379d8de656000d0204b58</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a84534ecb0bfb413a88ed782fa2cdfaf6</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a19a1dded93363979b3cbba257cb7fe1a</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a3df133fd455c00bd31accb33de560687</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a8351d5899ebcfb95659548f9782ec3e2</anchor>
      <arglist>(const opp_string &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae00cdb46a49630a3e45db1ed35315f55</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>acfff746db962d67507355bc0a358f8d7</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ad9f957be57990cb67dac1e54505e2a62</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a85ae171f343aa272d726bbf40c875147</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>aa93b96fc3610c74fd93b6b9c70e5c856</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>acf25ac12d05395aa1558cf97f9bfe0bf</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string_map</name>
    <filename>classomnetpp_1_1opp__string__map.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string_vector</name>
    <filename>classomnetpp_1_1opp__string__vector.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::NEDSupport::ParameterRef</name>
    <filename>classomnetpp_1_1NEDSupport_1_1ParameterRef.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>ParameterRef *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1ParameterRef.html</anchorfile>
      <anchor>a81c35193195f238c7b09ed5aa8e7a026</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1ParameterRef.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLElement::ParamResolver</name>
    <filename>classomnetpp_1_1cXMLElement_1_1ParamResolver.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cXMLElement_1_1ParamResolver.html</anchorfile>
      <anchor>a2fcb2686116d608aaa17da78b76293c4</anchor>
      <arglist>(const char *paramname, std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFigure::Pixmap</name>
    <filename>classomnetpp_1_1cFigure_1_1Pixmap.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Point</name>
    <filename>structomnetpp_1_1cFigure_1_1Point.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Predicate</name>
    <filename>classomnetpp_1_1cTopology_1_1Predicate.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Rectangle</name>
    <filename>structomnetpp_1_1cFigure_1_1Rectangle.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cChannel::result_t</name>
    <filename>structomnetpp_1_1cChannel_1_1result__t.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a5dc553a9e4746fc288305eb717d31022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a06953883d0cea09fe0baaa0e715cfb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>discard</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a1b22241b0cd43d447bdc750c702e7de2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::RGBA</name>
    <filename>structomnetpp_1_1cFigure_1_1RGBA.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::NEDSupport::SiblingModuleParameterRef</name>
    <filename>classomnetpp_1_1NEDSupport_1_1SiblingModuleParameterRef.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>SiblingModuleParameterRef *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>abe4b744a555a18889f6598599264a094</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SimTime</name>
    <filename>classomnetpp_1_1SimTime.html</filename>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac5064988a19bbde87200ee5caa169921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a534ed1b9ea3b2c2911a66637f1403e14</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a50fb2b35798a26d8af5d78c06f2e9249</anchor>
      <arglist>(cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a53f7fec36fd40316384e451c20fdeb54</anchor>
      <arglist>(int64_t value, SimTimeUnit unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac886517d543b8a416b908383a9cc6aed</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SimTime</type>
      <name>ZERO</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ad4b5cfa0953c6bb8471d5439c3698484</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac5064988a19bbde87200ee5caa169921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a534ed1b9ea3b2c2911a66637f1403e14</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a50fb2b35798a26d8af5d78c06f2e9249</anchor>
      <arglist>(cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a53f7fec36fd40316384e451c20fdeb54</anchor>
      <arglist>(int64_t value, SimTimeUnit unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac886517d543b8a416b908383a9cc6aed</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>aec59a91554c568eaf28cae204d961bc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dbl</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a598dc213b1fd75cd1caa1e8c40954fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>inUnit</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a6955edd3381bf4735c83f3d4285f1356</anchor>
      <arglist>(SimTimeUnit unit) const </arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>trunc</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a63df83095d48e3fa26145120e39f8cbf</anchor>
      <arglist>(SimTimeUnit unit) const </arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>remainderForUnit</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>acce1759215f75bbf1fbbe9d7e9fb0f5a</anchor>
      <arglist>(SimTimeUnit unit) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>aea42d281cd19c18223286d0988f6acbc</anchor>
      <arglist>(SimTimeUnit unit, int64_t &amp;outValue, SimTime &amp;outRemainder) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a1b9b8885b0880fc4ddf9a2c7d1ca3dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a59db23efe0b71b5aa4f4a0a4f9421d1e</anchor>
      <arglist>(char *buf) const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>raw</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ae09627545d1ba0d0662b422eed5127b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>setRaw</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ab489f68c50427742d610fba570c9c91d</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>getMaxTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>aa68675f3d58f4be0458f7f7385c67767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64_t</type>
      <name>getScale</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a433e669fe9bb209e17aae9a4290d5715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getScaleExp</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac893f1e8f32b3b9560667f2f5ab49b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScaleExp</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a7a04abbe172c85c9a5926f840a829432</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a7c6440396ce33f988f0e40b35b80f9be</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a0ac22c52d9cd6f415948cf3aca65f160</anchor>
      <arglist>(const char *s, const char *&amp;endp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>ttoa</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a6f3d9d25a935863a8fc220d6c73fda5d</anchor>
      <arglist>(char *buf, int64_t t, int scaleexp, char *&amp;endp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::NEDSupport::Sizeof</name>
    <filename>classomnetpp_1_1NEDSupport_1_1Sizeof.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>Sizeof *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1Sizeof.html</anchorfile>
      <anchor>a9d8412ab70fc72ea40c4879e7b6d5ee4</anchor>
      <arglist>() const  override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1NEDSupport_1_1Sizeof.html</anchorfile>
      <anchor>ab3865e40926760534b5faa68d9b1a8df</anchor>
      <arglist>() const  override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::StringMapParamResolver</name>
    <filename>classomnetpp_1_1StringMapParamResolver.html</filename>
    <base>omnetpp::cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1StringMapParamResolver.html</anchorfile>
      <anchor>a56fb46187edc470545e3bf6bdea91f3a</anchor>
      <arglist>(const char *paramname, std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::SubmoduleIterator</name>
    <filename>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SubmoduleIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a53d9db80040e4c2ad7fda82dd09a771a</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>ac01430210d1c5fb33a69406d1f6fcaba</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a7a2398d3f082f493c951aaca1d00a152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cModule *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>aa16e5243d1fd55d0a9a37ee218d854a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a71c36f24333cce752c1f32f032b7d6ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>af72512ff1ac9663dbc7364bd77d2930a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a258e7e5d1ac926c886c0900dfed627f0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>adee2295ae8a6c676c35771b0b786c96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>aeb89269288cf98502fed24ab785109f7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Transform</name>
    <filename>structomnetpp_1_1cFigure_1_1Transform.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cOsgCanvas::Viewpoint</name>
    <filename>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</filename>
    <member kind="variable">
      <type>Vec3d</type>
      <name>eye</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a9b753ecd80fc7275e2fdf5dc60426e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>center</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a996abd6e20014463f484224c2d161f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>up</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a93dc75c74ab5b8be04001ad196e5ac33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>eye</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a9b753ecd80fc7275e2fdf5dc60426e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>center</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a996abd6e20014463f484224c2d161f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>up</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a93dc75c74ab5b8be04001ad196e5ac33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous Distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
    <class kind="class">omnetpp::cExponential</class>
    <class kind="class">omnetpp::cNormal</class>
    <class kind="class">omnetpp::cTruncNormal</class>
    <class kind="class">omnetpp::cGamma</class>
    <class kind="class">omnetpp::cBeta</class>
    <class kind="class">omnetpp::cErlang</class>
    <class kind="class">omnetpp::cChiSquare</class>
    <class kind="class">omnetpp::cStudentT</class>
    <class kind="class">omnetpp::cCauchy</class>
    <class kind="class">omnetpp::cTriang</class>
    <class kind="class">omnetpp::cWeibull</class>
    <class kind="class">omnetpp::cParetoShifted</class>
    <member kind="function">
      <type>SIM_API double</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga110654e0d90a50f94b159b71fce85ea0</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga6c187b32dbb8f5b5160556f2ca4534fb</anchor>
      <arglist>(cRNG *rng, SimTime a, SimTime b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga0de2189f2c06898f5b5a0ae2a60e9b20</anchor>
      <arglist>(cRNG *rng, double mean)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga4362d3d87ff5372487fd2e7ffdfa088e</anchor>
      <arglist>(cRNG *rng, SimTime mean)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga12d73760739137f5ae3651f4f6a58e01</anchor>
      <arglist>(cRNG *rng, double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gafe77c5f57f787729b5fcd731da5c78e9</anchor>
      <arglist>(cRNG *rng, SimTime mean, SimTime stddev)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaaee930b6bec6275135ab027188ffcaed</anchor>
      <arglist>(cRNG *rng, double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga6140484507e3e9c6b1b73eb4bbe742c2</anchor>
      <arglist>(cRNG *rng, SimTime mean, SimTime stddev)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>gamma_d</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga930a8344c42f44d4edddec58cbdd3515</anchor>
      <arglist>(cRNG *rng, double alpha, double theta)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>beta</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga983bf42adb00ec887cc0b89461a641bb</anchor>
      <arglist>(cRNG *rng, double alpha1, double alpha2)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>erlang_k</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaf677c5e1f529ac841a0626ae6fb1307d</anchor>
      <arglist>(cRNG *rng, unsigned int k, double mean)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>chi_square</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga8e20957261bfadd01eb1c5cfb3b310f8</anchor>
      <arglist>(cRNG *rng, unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>student_t</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaf0d6ac1cf137dc1f4304b03625fa79c5</anchor>
      <arglist>(cRNG *rng, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>cauchy</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga45ba6269b2710bd818393ad8a7357e09</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>triang</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga06ba23b968c0605be2f68fb7d687f81c</anchor>
      <arglist>(cRNG *rng, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga0f4db9d4422567ca1231ad506bb40ce4</anchor>
      <arglist>(cRNG *rng, double m, double w)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>weibull</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gae11b004b9485106089cf826a7f43fbd7</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>pareto_shifted</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaee9eef42071614f8cf278210a26db12c</anchor>
      <arglist>(cRNG *rng, double a, double b, double c)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete Distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
    <class kind="class">omnetpp::cIntUniform</class>
    <class kind="class">omnetpp::cBernoulli</class>
    <class kind="class">omnetpp::cBinomial</class>
    <class kind="class">omnetpp::cGeometric</class>
    <class kind="class">omnetpp::cNegBinomial</class>
    <class kind="class">omnetpp::cPoisson</class>
    <member kind="function">
      <type>SIM_API int</type>
      <name>intuniform</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga602a773dd9e4ba8b74f8aae19c36341c</anchor>
      <arglist>(cRNG *rng, int a, int b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bernoulli</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaa60fe96d871836523410bc5f3c4753a6</anchor>
      <arglist>(cRNG *rng, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>binomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaf7febe469997b5910b55e4a031ef7854</anchor>
      <arglist>(cRNG *rng, int n, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>geometric</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga0fa2696c756da6e498c060cc6954bdf1</anchor>
      <arglist>(cRNG *rng, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>negbinomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga47614bb04cc83b6e1204c76223ee2645</anchor>
      <arglist>(cRNG *rng, int n, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>poisson</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga45fee4d163ab811a42d5caa2eb666c05</anchor>
      <arglist>(cRNG *rng, double lambda)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation Core</title>
    <filename>group__SimCore.html</filename>
    <class kind="class">omnetpp::cChannel</class>
    <class kind="class">omnetpp::cIdealChannel</class>
    <class kind="class">omnetpp::cComponent</class>
    <class kind="class">omnetpp::cDatarateChannel</class>
    <class kind="class">omnetpp::cDelayChannel</class>
    <class kind="class">omnetpp::cGate</class>
    <class kind="class">omnetpp::cMessage</class>
    <class kind="class">omnetpp::cModule</class>
    <class kind="class">omnetpp::cPacket</class>
    <class kind="class">omnetpp::cPar</class>
    <class kind="class">omnetpp::cSimpleModule</class>
    <member kind="function">
      <type>simtime_t</type>
      <name>simTime</name>
      <anchorfile>group__SimCore.html</anchorfile>
      <anchor>ga546abe6e6fd7a646f74d81cc944a3f08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Simulation Support</title>
    <filename>group__SimSupport.html</filename>
    <class kind="class">omnetpp::cComponentType</class>
    <class kind="class">omnetpp::cModuleType</class>
    <class kind="class">omnetpp::cChannelType</class>
    <class kind="class">omnetpp::cConfigOption</class>
    <class kind="class">omnetpp::cCoroutine</class>
    <class kind="class">omnetpp::cDefaultList</class>
    <class kind="class">omnetpp::cDisplayString</class>
    <class kind="class">omnetpp::cDynamicExpression</class>
    <class kind="class">omnetpp::cEnum</class>
    <class kind="class">omnetpp::cEnvir</class>
    <class kind="class">omnetpp::cRunnableEnvir</class>
    <class kind="class">omnetpp::cEvent</class>
    <class kind="class">omnetpp::cEventHeap</class>
    <class kind="class">omnetpp::cException</class>
    <class kind="class">omnetpp::cTerminationException</class>
    <class kind="class">omnetpp::cRuntimeError</class>
    <class kind="class">omnetpp::cExpression</class>
    <class kind="class">omnetpp::cFutureEventSet</class>
    <class kind="class">omnetpp::cISimulationLifecycleListener</class>
    <class kind="class">omnetpp::cMsgPar</class>
    <class kind="class">omnetpp::cNamedObject</class>
    <class kind="class">omnetpp::cNEDValue</class>
    <class kind="class">omnetpp::cNullEnvir</class>
    <class kind="class">omnetpp::cObject</class>
    <class kind="class">omnetpp::cOwnedObject</class>
    <class kind="class">omnetpp::cNoncopyableOwnedObject</class>
    <class kind="class">omnetpp::cProperties</class>
    <class kind="class">omnetpp::cProperty</class>
    <class kind="class">omnetpp::cResultFilter</class>
    <class kind="class">omnetpp::cNumericResultFilter</class>
    <class kind="class">omnetpp::cObjectResultFilter</class>
    <class kind="class">omnetpp::cResultListener</class>
    <class kind="class">omnetpp::cResultRecorder</class>
    <class kind="class">omnetpp::cNumericResultRecorder</class>
    <class kind="class">omnetpp::cScheduler</class>
    <class kind="class">omnetpp::cSequentialScheduler</class>
    <class kind="class">omnetpp::cRealTimeScheduler</class>
    <class kind="class">omnetpp::cSimulation</class>
    <class kind="class">omnetpp::cVisitor</class>
    <class kind="class">omnetpp::cXMLElement</class>
    <member kind="define">
      <type>#define</type>
      <name>Enter_Method</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaf475b9c6ec92bbfaaa248e579e4c5ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Enter_Method_Silent</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gafe7ca1d44640558115d556a56b6cb54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>CoroutineFnp</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga64109d89a6a36d6c65e2524b27813c1f</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>cNEDValue(*</type>
      <name>NEDFunction</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga81908740976dcfdba398c50246e1e1e1</anchor>
      <arglist>)(cComponent *context, cNEDValue argv[], int argc)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga3878bb0ff0049c813b13e732c56040eb</anchor>
      <arglist>)(...)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFuncNoArg</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaa216ad53083633a7defdc61edac3db4b</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc1Arg</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga2cbcc2115d4377160bd556b3f9223a2d</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc2Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga1b4d710aa8165750999266bd47542797</anchor>
      <arglist>)(double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc3Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga50194155789705e150f0944496c0c557</anchor>
      <arglist>)(double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc4Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga17200c8621c59c039d47a669994d575c</anchor>
      <arglist>)(double, double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>eventnumber_t</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaebe35226c5c889df9d1cf602b9339aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimulationLifecycleEventType</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gadc5b9469373589dc3d21a7efd968baae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_STARTUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea4b6fd7116559ad3fa1f7706b8254732f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_SETUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea35ba52701bfc9e45a2bc0a758ec3c818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_SETUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea659ba8cbb4230ba2404b05e1705b956f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_INITIALIZE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea3f1d6695f84efc377eca594f61fbd2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_INITIALIZE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea8c865d8306a6390bcad4da5a3d503a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_START</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea0111bd5438ab79df6afcb1f7f925b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_PAUSE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeabf24db5a8943b4ee9fd2e5a899f2f254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_RESUME</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeacfd233e8d62d67511ad9b5706a20945b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_SUCCESS</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeafed96348be03e6e8bc96ed4acb7e3b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_ERROR</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea6306593c7f396392a8ec4136951c0aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_FINISH</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea92c1ca05349fc42cf226dc728676a596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_FINISH</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeab3d7e3a77d60e4f77766fe9fb6eb50cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_RUN_END</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea41850b10d67fc128cc6fe76a6bddd1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_DELETE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea2a016c888c443aca48ac01023a523395</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_DELETE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea8eaca39dfead769ac52a360d6bbf08c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SHUTDOWN</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea1e3c696d5c1a38024cdf31ccf5d490f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>createOne</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga472c2dc97e5cf7c0929426f5a59ed89a</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga2e2428a092ef9cd1c52471ae0a2ba920</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga9e1dcc79e9e31ef10df26a0e94d15b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnvir *</type>
      <name>getEnvir</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gadc4728c488881c627cb1f82940c69952</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container Classes</title>
    <filename>group__Containers.html</filename>
    <class kind="class">omnetpp::cArray</class>
    <class kind="class">omnetpp::cPacketQueue</class>
    <class kind="class">omnetpp::cQueue</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CompareFunc</name>
      <anchorfile>group__Containers.html</anchorfile>
      <anchor>gabeb451b66385c18e01063cb0576ea8a0</anchor>
      <arglist>)(cObject *a, cObject *b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimTime</name>
    <title>Simulation Time</title>
    <filename>group__SimTime.html</filename>
    <class kind="class">omnetpp::SimTime</class>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_MAX</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac49dd7b8b931047fa6ffd3bc981ab56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_ZERO</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gadf0c23f8b4d5f80a452d41159a24a00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_STR</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac24a262d761e665e366bb88bf72baac2</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_DBL</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gaf9702033a2b001c963275256b2a9dac0</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="typedef">
      <type>SimTime</type>
      <name>simtime_t</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga5a8189d996907ac38e69e6a4c50cf4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const simtime_t &amp;</type>
      <name>simtime_t_cref</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga862c66c218dc43a550086c0ab68bf134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const double</type>
      <name>const_simtime_t</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac6a6df51df71a990796880a4d5ec73a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimTimeUnit</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga9fac15731bd595846fae3ceaf940e39e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random Number Generation</title>
    <filename>group__RandomNumbers.html</filename>
    <subgroup>RandomNumbersCont</subgroup>
    <subgroup>RandomNumbersDiscr</subgroup>
    <class kind="class">omnetpp::cRandom</class>
    <class kind="class">omnetpp::cRNG</class>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical Result Collection</title>
    <filename>group__Statistics.html</filename>
    <class kind="class">omnetpp::cDensityEstBase</class>
    <class kind="class">omnetpp::cTransientDetection</class>
    <class kind="class">omnetpp::cAccuracyDetection</class>
    <class kind="class">omnetpp::cTDExpandingWindows</class>
    <class kind="class">omnetpp::cADByStddev</class>
    <class kind="class">omnetpp::cHistogramBase</class>
    <class kind="class">omnetpp::cHistogram</class>
    <class kind="class">omnetpp::cLongHistogram</class>
    <class kind="class">omnetpp::cDoubleHistogram</class>
    <class kind="class">omnetpp::cKSplit</class>
    <class kind="class">omnetpp::cOutVector</class>
    <class kind="class">omnetpp::cPSquare</class>
    <class kind="class">omnetpp::cStatistic</class>
    <class kind="class">omnetpp::cStdDev</class>
    <class kind="class">omnetpp::cWeightedStdDev</class>
    <class kind="class">omnetpp::cVarHistogram</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostTDFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga376a847fa6d3bc7d9e85ac37b0a94a82</anchor>
      <arglist>)(cTransientDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostADFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga9e9298e239b4b55aa5e1dae7a390f0d8</anchor>
      <arglist>)(cAccuracyDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>gaf380c0952190c3d595b7a1de8d43e5bc</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga3da446f624c1d69471059b2c72031ab7</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>RecordFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga37fbe968485e8b8126acb7dd681d4041</anchor>
      <arglist>)(void *, simtime_t, double, double)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Canvas</name>
    <title>Canvas (2D Graphics)</title>
    <filename>group__Canvas.html</filename>
    <class kind="struct">omnetpp::cFigure::Point</class>
    <class kind="struct">omnetpp::cFigure::Rectangle</class>
    <class kind="struct">omnetpp::cFigure::Color</class>
    <class kind="struct">omnetpp::cFigure::Font</class>
    <class kind="struct">omnetpp::cFigure::Transform</class>
    <class kind="struct">omnetpp::cFigure::RGBA</class>
    <class kind="class">omnetpp::cFigure::Pixmap</class>
    <class kind="class">omnetpp::cFigure</class>
    <class kind="class">omnetpp::cGroupFigure</class>
    <class kind="class">omnetpp::cAbstractLineFigure</class>
    <class kind="class">omnetpp::cLineFigure</class>
    <class kind="class">omnetpp::cArcFigure</class>
    <class kind="class">omnetpp::cPolylineFigure</class>
    <class kind="class">omnetpp::cAbstractShapeFigure</class>
    <class kind="class">omnetpp::cRectangleFigure</class>
    <class kind="class">omnetpp::cOvalFigure</class>
    <class kind="class">omnetpp::cRingFigure</class>
    <class kind="class">omnetpp::cPieSliceFigure</class>
    <class kind="class">omnetpp::cPolygonFigure</class>
    <class kind="class">omnetpp::cPathFigure</class>
    <class kind="class">omnetpp::cAbstractTextFigure</class>
    <class kind="class">omnetpp::cTextFigure</class>
    <class kind="class">omnetpp::cLabelFigure</class>
    <class kind="class">omnetpp::cAbstractImageFigure</class>
    <class kind="class">omnetpp::cImageFigure</class>
    <class kind="class">omnetpp::cIconFigure</class>
    <class kind="class">omnetpp::cPixmapFigure</class>
    <class kind="class">omnetpp::cCanvas</class>
  </compound>
  <compound kind="group">
    <name>OSG</name>
    <title>OSG (3D Graphics)</title>
    <filename>group__OSG.html</filename>
    <class kind="struct">omnetpp::cOsgCanvas::Viewpoint</class>
    <class kind="class">omnetpp::cOsgCanvas</class>
    <class kind="class">omnetpp::cObjectOsgNode</class>
    <member kind="enumeration">
      <type></type>
      <name>ViewerStyle</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gaf0b73d3d331edf08d7b2401b48622652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CameraManipulatorType</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gae9cf5117e3a9b51d6ded7154cd384906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FSM</name>
    <title>FSM Support</title>
    <filename>group__FSM.html</filename>
    <class kind="class">omnetpp::cFSM</class>
    <member kind="define">
      <type>#define</type>
      <name>FSM_MAXT</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga0cb33efc256dd2747fc91e417ea2c7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Switch</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga08ffc02054cc56d5ae887e25e37ac093</anchor>
      <arglist>(fsm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Transient</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga56a5100336c6a038c144cd7d3b2ecc50</anchor>
      <arglist>(state)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Steady</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga701a11384d894ccaf913e6b3d4d2aaa4</anchor>
      <arglist>(state)        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_EnterExit</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga5f0a5349b23bf4e1d88a7b013eccf5e9</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Enter</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>gacd1d3c4cda20ca24b7646b8d3e781fe7</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Exit</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga144e45f05f612d9fe7e17e81e58cf6a1</anchor>
      <arglist>(state)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Goto</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga6b56df7db93cec9692b5cadc3ad620ab</anchor>
      <arglist>(fsm, state)  </arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Signals</name>
    <title>Signals</title>
    <filename>group__Signals.html</filename>
    <class kind="class">omnetpp::cIListener</class>
    <class kind="class">omnetpp::cListener</class>
    <class kind="class">omnetpp::cModelChangeNotification</class>
    <class kind="class">omnetpp::cPreModuleAddNotification</class>
    <class kind="class">omnetpp::cPostModuleAddNotification</class>
    <class kind="class">omnetpp::cPreModuleDeleteNotification</class>
    <class kind="class">omnetpp::cPostModuleDeleteNotification</class>
    <class kind="class">omnetpp::cPreModuleReparentNotification</class>
    <class kind="class">omnetpp::cPostModuleReparentNotification</class>
    <class kind="class">omnetpp::cPreGateAddNotification</class>
    <class kind="class">omnetpp::cPostGateAddNotification</class>
    <class kind="class">omnetpp::cPreGateDeleteNotification</class>
    <class kind="class">omnetpp::cPostGateDeleteNotification</class>
    <class kind="class">omnetpp::cPreGateVectorResizeNotification</class>
    <class kind="class">omnetpp::cPostGateVectorResizeNotification</class>
    <class kind="class">omnetpp::cPreGateConnectNotification</class>
    <class kind="class">omnetpp::cPreGateDisconnectNotification</class>
    <class kind="class">omnetpp::cPostGateDisconnectNotification</class>
    <class kind="class">omnetpp::cPathChangeNotification</class>
    <class kind="class">omnetpp::cPrePathCreateNotification</class>
    <class kind="class">omnetpp::cPostPathCreateNotification</class>
    <class kind="class">omnetpp::cPrePathCutNotification</class>
    <class kind="class">omnetpp::cPostPathCutNotification</class>
    <class kind="class">omnetpp::cPreParameterChangeNotification</class>
    <class kind="class">omnetpp::cPostParameterChangeNotification</class>
    <class kind="class">omnetpp::cPreDisplayStringChangeNotification</class>
    <class kind="class">omnetpp::cPostDisplayStringChangeNotification</class>
    <class kind="class">omnetpp::cITimestampedValue</class>
    <class kind="class">omnetpp::cTimestampedValue</class>
    <member kind="typedef">
      <type>int</type>
      <name>simsignal_t</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>gad08b7133e8200e277fc877568b4d561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimsignalType</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>ga70ca182aa292f42481bb44237de4eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIM_API simsignal_t</type>
      <name>PRE_MODEL_CHANGE</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>ga91752e22a84e30df1c185f574ff6556f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIM_API simsignal_t</type>
      <name>POST_MODEL_CHANGE</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>gaf8247a9fc88c68ee287fa2572133dd68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Utilities</name>
    <title>Utility Classes</title>
    <filename>group__Utilities.html</filename>
    <class kind="class">omnetpp::cMatchExpression::Matchable</class>
    <class kind="class">omnetpp::cMatchExpression</class>
    <class kind="class">omnetpp::cMatchableString</class>
    <class kind="class">omnetpp::cPatternMatcher</class>
    <class kind="class">omnetpp::cStringTokenizer</class>
    <class kind="class">omnetpp::cTopology</class>
    <class kind="class">omnetpp::opp_string</class>
    <class kind="class">omnetpp::opp_string_vector</class>
    <class kind="class">omnetpp::opp_string_map</class>
    <member kind="function">
      <type>P</type>
      <name>check_and_cast</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga5044f74639a1f5cd3701d438261a0407</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>check_and_cast_nullable</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga0b4782d0f87609e981435a9ac0c0fcb0</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opp_strlen</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga5b35bf42f5261c56fb5c0cade0f05ea7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strdup</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga2ff9851aa2bc996cca97b20b81e5ab80</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strcpy</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gad904f75ebf7debc890f5f2bcf75e79df</anchor>
      <arglist>(char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opp_strcmp</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gaca723c5e22d4626cd50158df8a0ea302</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API char *</type>
      <name>opp_strprettytrunc</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga46437ddb528048851ff78a55fda7fd0b</anchor>
      <arglist>(char *dest, const char *src, unsigned maxlen)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API const char *</type>
      <name>opp_typename</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gad2ab2b6c42da31388031dc4c8b7e34b8</anchor>
      <arglist>(const std::type_info &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Logging</name>
    <title>Logging</title>
    <filename>group__Logging.html</filename>
    <class kind="class">omnetpp::cLog</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPILETIME_LOGLEVEL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gad92ffa5469c99474d4c81b54da6d82c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPILETIME_LOG_PREDICATE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga827abcd35ae49affe7a3300b912b9511</anchor>
      <arglist>(object, logLevel, category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_STATICCONTEXT</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gad1ac625347054d125541b99977b568c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_LOG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gaf56c1851f58a8c87647e8c7a46e9153f</anchor>
      <arglist>(logLevel, category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga650ef3eff8a2900bef69dae29c05d2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_FATAL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga21ca59ae14a670274065f4e1ed58db12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_ERROR</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga27b348ffd20ee22cf301edf893debd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_WARN</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga44af3daae0a3db64e9a0ac2e2ecfc4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_INFO</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gadd5f124c5c627d3254ac1fec6eef473b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DETAIL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga8a503e0ad7339523a69e370288c25e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DEBUG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga287cddcb098a38db86a1f854156e8ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_TRACE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga3e58f5026fe6c3d164f80b1e2595438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gad77f41294ad44ddd3c520edd00784267</anchor>
      <arglist>(category)            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_FATAL_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga1e63e11dd5ac14f0cc5a72e83a469676</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_ERROR_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga3ef558853ee8125819ce37349d4068ae</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_WARN_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga47844f6b6e8505620e27244459d7e75e</anchor>
      <arglist>(category)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_INFO_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga7afe25e757d5aed091044ffe5d88f357</anchor>
      <arglist>(category)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DETAIL_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga98996690f390ca0f7c789ac6f803eb30</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DEBUG_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gab920e9199eb30b77d412555401edef34</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_TRACE_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga1b3099ed4a93eee07ffdced3cce3ed51</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gaca1fd1d8935433e6ba2e3918214e07f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_TRACE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ab9f7c6a7b5e3b3b2071b9f8ff8de1d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_DEBUG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9abc8bb8dd85fdb023c81656b7da9c43bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_DETAIL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9a05770ba5bf63d83c13eb2f404b9ee4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_INFO</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9afe47011875b862ca175df0149afe429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_WARN</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9a04fc37b4bda31a4c1740fbe00688aa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_ERROR</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ab63aafd966c1c6336506be3820931a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_FATAL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9aa756ac23820271987f8e0d5fce2bd8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_OFF</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ae0acafb6ab8f52125650f8acdcbb2d70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>WatchMacros</name>
    <title>WATCH Macros</title>
    <filename>group__WatchMacros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_VECTOR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga04cd4ec4f5b9ed4a3a6d2603de1892ed</anchor>
      <arglist>(variable)      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRVECTOR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>gae489c6bbc2e19af741e61977d4f03aa7</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_LIST</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>gaf8482a01d3a53041c0778ba10803bb68</anchor>
      <arglist>(variable)          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRLIST</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga9a21ce8b8e664e90337b2a40fd1b833e</anchor>
      <arglist>(variable)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_SET</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>gaea8b09c4284a076be1267ba6282f6eb0</anchor>
      <arglist>(variable)            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRSET</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga7fb21921e0f8d859bbb3071687b89f8d</anchor>
      <arglist>(variable)      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_MAP</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga2eae12f24c99b549cf3a0157998ac6da</anchor>
      <arglist>(m)                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRMAP</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga8ad69889cbab564060dae85b889e1608</anchor>
      <arglist>(m)                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga0878b62c3a2dcb0388c967a4acb2f18a</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_RW</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga3f13d05484bd1eb370c51dbd176688b2</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_OBJ</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga9546e1fef910bea22f9bc3172bb24743</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga36540d0cfbab96aa1cd3b571f4d7aeb6</anchor>
      <arglist>(variable)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RegMacros</name>
    <title>Registration Macros</title>
    <filename>group__RegMacros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultFilter</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga6f2d3c14629d4841a0e08a4f495a7f3a</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultRecorder</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga9afee497008788618fda74c8d6e782b4</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga6443da94f0c425c2f6a4e2796ae0d930</anchor>
      <arglist>(NAME, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga32775e2c56ecc55d5a26c22cb8b14c21</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function3</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga17008e10fe2c26046a2dfb2372376e74</anchor>
      <arglist>(NAME, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function4</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gafb4652c1aa744a704decd8bf8495badd</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gafa65854bb341b99eb44a29b8f6805589</anchor>
      <arglist>(FUNCTION, SIGNATURE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gac94af17dc21c6f86787d54f51e2eccef</anchor>
      <arglist>(FUNCTION, SIGNATURE, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Class</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gadbca479a455e4ba1bb47e9cb699e8765</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Abstract_Class</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga18681258c0394e5167e4d282b44a4be4</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Module</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga109b3bf65513bbe25360c5f4c08cd2d1</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Channel</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga07e252d0422dfc02058dfa801ea66deb</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ClassDescriptor</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga380ca4378934e280a8b7d00294ed6ba7</anchor>
      <arglist>(DESCRIPTORCLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gae02e9864add2a397723ab930d623adc0</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga932711ee76eb90de1f725deabf4d440f</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga1a2e531079c5d8a6ee323812d1ba717d</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gaa248a1484a581af34c8995b3cc42479c</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gaf1a96476aabfaf442a9bb421ba647717</anchor>
      <arglist>(ID, NAME, KIND, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga597fb33bbc90f9cd8f46fe628bee0203</anchor>
      <arglist>(ID, NAME, KIND, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_MessagePrinter</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga404cfee50d31b0a4ea475fc2302f04f6</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Enum</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga5b4eac4ef8bf8a02dad60d9e71766dad</anchor>
      <arglist>(NAME, VALUES)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Enum2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga569a3bec7b8ddf8ef32c3e3c119f8c19</anchor>
      <arglist>(VAR, NAME, VALUES)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ExtensionPoints</name>
    <title>Extension Points</title>
    <filename>group__ExtensionPoints.html</filename>
    <class kind="class">omnetpp::cConfigurationReader</class>
    <class kind="class">omnetpp::cConfiguration</class>
    <class kind="class">omnetpp::cConfigurationEx</class>
    <class kind="class">omnetpp::cFingerprintCalculator</class>
    <class kind="class">omnetpp::cMessagePrinter</class>
    <class kind="class">omnetpp::cRNG</class>
    <class kind="class">omnetpp::cScheduler</class>
    <class kind="class">omnetpp::cIOutputVectorManager</class>
    <class kind="class">omnetpp::cIOutputScalarManager</class>
    <class kind="class">omnetpp::cISnapshotManager</class>
    <class kind="class">omnetpp::cIEventlogManager</class>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal Classes</title>
    <filename>group__Internals.html</filename>
    <class kind="class">omnetpp::cBoolParImpl</class>
    <class kind="class">omnetpp::cClassDescriptor</class>
    <class kind="class">omnetpp::cDoubleParImpl</class>
    <class kind="class">omnetpp::cDeleteModuleException</class>
    <class kind="class">omnetpp::cStackCleanupException</class>
    <class kind="class">omnetpp::cSingleFingerprintCalculator</class>
    <class kind="class">omnetpp::cMultiFingerprintCalculator</class>
    <class kind="class">omnetpp::cLogEntry</class>
    <class kind="class">omnetpp::cLongParImpl</class>
    <class kind="class">omnetpp::cNEDFunction</class>
    <class kind="class">omnetpp::cNEDMathFunction</class>
    <class kind="class">omnetpp::cObjectFactory</class>
    <class kind="class">omnetpp::cParImpl</class>
    <class kind="class">omnetpp::cRegistrationList</class>
    <class kind="class">omnetpp::cGlobalRegistrationList</class>
    <class kind="class">omnetpp::cResultFilterDescriptor</class>
    <class kind="class">omnetpp::cResultRecorderDescriptor</class>
    <class kind="class">omnetpp::cStringParImpl</class>
    <class kind="class">omnetpp::cWatchBase</class>
    <class kind="class">omnetpp::cGenericReadonlyWatch</class>
    <class kind="class">omnetpp::cGenericAssignableWatch</class>
    <class kind="class">omnetpp::cWatch_bool</class>
    <class kind="class">omnetpp::cWatch_char</class>
    <class kind="class">omnetpp::cWatch_uchar</class>
    <class kind="class">omnetpp::cWatch_stdstring</class>
    <class kind="class">omnetpp::cWatch_cObject</class>
    <class kind="class">omnetpp::cWatch_cObjectPtr</class>
    <class kind="class">omnetpp::cXMLParImpl</class>
    <class kind="class">omnetpp::cErrorMessages</class>
    <class kind="class">omnetpp::CodeFragments</class>
    <class kind="class">omnetpp::cContextSwitcher</class>
    <class kind="class">omnetpp::cMethodCallContextSwitcher</class>
    <class kind="class">omnetpp::cContextTypeSwitcher</class>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel Simulation Extension</title>
    <filename>group__ParsimBrief.html</filename>
    <class kind="class">omnetpp::cCommBuffer</class>
    <class kind="class">omnetpp::cParsimCommunications</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PARSIM_PARTITIONS</name>
      <anchorfile>group__ParsimBrief.html</anchorfile>
      <anchor>gaa82c54be13c3f5bcbebe1d4d648e8c77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>OMNeT++ API Reference</title>
    <filename>index</filename>
  </compound>
</tagfile>
